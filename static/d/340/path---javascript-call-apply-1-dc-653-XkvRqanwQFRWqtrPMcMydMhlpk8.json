{"data":{"markdownRemark":{"html":"<h2 id=\"call-比-apply-快的多，下面代码运行结果\"><a href=\"#call-%E6%AF%94-apply-%E5%BF%AB%E7%9A%84%E5%A4%9A%EF%BC%8C%E4%B8%8B%E9%9D%A2%E4%BB%A3%E7%A0%81%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>call 比 apply 快的多，下面代码运行结果</h2>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">work</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">time</span><span class=\"token punctuation\">(</span><span class=\"token string\">'call'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">1000000</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    work<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">timeEnd</span><span class=\"token punctuation\">(</span><span class=\"token string\">'call'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">time</span><span class=\"token punctuation\">(</span><span class=\"token string\">'apply'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">1000000</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    work<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">timeEnd</span><span class=\"token punctuation\">(</span><span class=\"token string\">'apply'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">time</span><span class=\"token punctuation\">(</span><span class=\"token string\">'call'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">1000000</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    work<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">timeEnd</span><span class=\"token punctuation\">(</span><span class=\"token string\">'call'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n    </code></pre>\n      </div>\n<p>google chrome Version 62 结果显示如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token constant\">VM125</span><span class=\"token punctuation\">:</span><span class=\"token number\">16</span> call<span class=\"token punctuation\">:</span> <span class=\"token number\">5.592041015625</span>ms\n<span class=\"token constant\">VM125</span><span class=\"token punctuation\">:</span><span class=\"token number\">16</span> apply<span class=\"token punctuation\">:</span> <span class=\"token number\">17.97705078125</span>ms\n<span class=\"token constant\">VM125</span><span class=\"token punctuation\">:</span><span class=\"token number\">22</span> call<span class=\"token punctuation\">:</span> <span class=\"token number\">3.798828125</span>ms\n<span class=\"token constant\">VM125</span><span class=\"token punctuation\">:</span><span class=\"token number\">16</span> apply<span class=\"token punctuation\">:</span> <span class=\"token number\">18.8818359375</span>ms\n<span class=\"token constant\">VM125</span><span class=\"token punctuation\">:</span><span class=\"token number\">22</span> call<span class=\"token punctuation\">:</span> <span class=\"token number\">2.841064453125</span>ms\n<span class=\"token constant\">VM125</span><span class=\"token punctuation\">:</span><span class=\"token number\">16</span> apply<span class=\"token punctuation\">:</span> <span class=\"token number\">15.654052734375</span>ms\n<span class=\"token constant\">VM125</span><span class=\"token punctuation\">:</span><span class=\"token number\">22</span> call<span class=\"token punctuation\">:</span> <span class=\"token number\">2.47900390625</span>ms\n<span class=\"token constant\">VM125</span><span class=\"token punctuation\">:</span><span class=\"token number\">16</span> apply<span class=\"token punctuation\">:</span> <span class=\"token number\">15.90087890625</span>ms\n<span class=\"token constant\">VM125</span><span class=\"token punctuation\">:</span><span class=\"token number\">22</span> call<span class=\"token punctuation\">:</span> <span class=\"token number\">2.311767578125</span>ms\n<span class=\"token constant\">VM125</span><span class=\"token punctuation\">:</span><span class=\"token number\">16</span> apply<span class=\"token punctuation\">:</span> <span class=\"token number\">15.912109375</span>ms\n<span class=\"token constant\">VM125</span><span class=\"token punctuation\">:</span><span class=\"token number\">22</span> call<span class=\"token punctuation\">:</span> <span class=\"token number\">2.385986328125</span>ms</code></pre>\n      </div>\n<p>原因在与.apply在运行前要对作为参数的数组进行一系列检验和深拷贝，.call则没有这些步骤。具体可以参考ECMA .</p>\n<p>深拷贝是指将.apply()的第二个参数（数组）深拷贝到JS引擎内部创建的argList里。<br>\n.call和.apply运行的时候都会创建一个参数序列（Argument Lists）叫做argList。.call只需要将参数逐一放到argList里面。而.apply的参数是数组，需要获得其中每一个元素的值再放到argList里面。\n大致步骤是：</p>\n<ul>\n<li>\n<p>Let argList be an empty List.</p>\n</li>\n<li>\n<p>Let index be 0.</p>\n</li>\n<li>\n<p>Repeat while index &#x3C; n</p>\n</li>\n<li>\n<p>Let indexName be ToString(index).</p>\n</li>\n<li>\n<p>Let nextArg be the result of calling the [[Get]] internal method of argArray with indexName as the argument.\nAppend nextArg as the last element of argList.</p>\n</li>\n<li>\n<p>Set index to index + 1.</p>\n</li>\n</ul>\n<h2 id=\"参考文档\"><a href=\"#%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>参考文档</h2>\n<p><a href=\"http://www.ecma-international.org/ecma-262/5.1/#sec-15.3.4.3\">ecma</a></p>\n<p><a href=\"https://segmentfault.com/q/1010000007894513\">underscore源码</a></p>","timeToRead":2,"excerpt":"call 比 apply 快的多，下面代码运行结果 google chrome Version 62 结果显示如下： 原因在与.apply在运行前要对作为参数的数组进行一系列检验和深拷贝，.call则没有这些步骤。具体可以参考ECMA . 深拷贝是指将.apply…","frontmatter":{"title":"call 与 apply性能分析","cover":null,"date":"2017-05-03T22:00:00.000Z","category":"JavaScript","tags":["JavaScript","call vs apply"]},"fields":{"nextTitle":"http","nextSlug":"/http/http/","prevTitle":"事件的捕获和冒泡","prevSlug":"/javascript/event/order/","slug":"/javascript/call-apply/","date":"2017-05-02T16:00:00.000Z"}}},"pageContext":{"slug":"/javascript/call-apply/"}}