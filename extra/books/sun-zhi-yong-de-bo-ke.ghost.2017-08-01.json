{"db":[{"meta":{"exported_on":1501603314212,"version":"004"},"data":{"posts":[{"id":1,"uuid":"7deff949-45f6-4df4-8bf5-66747a4e146f","title":"欢迎使用 Ghost 博客系统","slug":"welcome-to-ghost","markdown":"Yeah，博客上线了！这篇文章的目的是向你介绍 Ghost 编辑器并帮你快速上手。通过 `<your blog URL>/ghost/` 链接就可以登录系统后台管理你的博客内容了。当你进入后台，你就能看到左侧文章列表处列出的这篇文章，右侧就是这篇文章的预览效果。点击预览栏右上角的铅笔图标就能进入内容编辑页面。 \r\n\r\n## 快速入门\r\n\r\nGhost 使用 Markdown 语法书写内容。简单来说，Markdown 就是一种简化的书写格式！\r\n\r\n用 Markdown 语法写作是很容易的。在编辑界面的左侧就是你写作的地方。在你认为需要的时候，可以使用以下这些语法来格式化你的内容。例如下面这个无序列表：\r\n\r\n* Item number one\r\n* Item number two\r\n    * A nested item\r\n* A final item\r\n\r\n还可以是有序列表：\r\n\r\n1. Remember to buy some milk\r\n2. Drink the milk\r\n3. Tweet that I remembered to buy the milk, and drank it\r\n\r\n### 链接\r\n\r\n如果要链接其它页面，可以直接把页面的 URL 粘贴过来，例如 http://www.ghostchina.com - 会被自动识别为链接。但是，如果你想自定义链接文本，可以像这样： [Ghost 中文网](http://www.ghostchina.com)。很简单吧！\r\n\r\n### 图片\r\n\r\n插入图片也没问题！前提是你事先知道图片的 URL，然后像下面这样：\r\n\r\n![The Ghost Logo](http://static.ghostchina.com/image/3/fe/34a9831916be9db1381ecb320491e.png)\r\n\r\n如果图片在本地的硬盘里怎么办？也很简单！像下面这样书写就能为图片预留一个位置，然后你可以继续写作，回头再通过拖拽的方式把图片上传到服务器上。\r\n\r\n![一张图片]\r\n\r\n\r\n### 引用\r\n\r\n有些时候我们需要引用别人说的话，可以这样：\r\n\r\n> Wisdomous - it's definitely a word.\r\n\r\n### 代码\r\n\r\n或许你是个码农，需要贴一些代码到文章里，可以通过两个引号（Tab 键上面的那个键）加入行内代码 `<code>`。如果需要加入大段的代码，可以在代码前加 4 个空格缩进，这就是 Markdown 的语法。\r\n\r\n    .awesome-thing {\r\n        display: block;\r\n        width: 100%;\r\n    }\r\n\r\n### 分割线\r\n\r\n在任一新行输入 3 个或更多的短横线（减号）就是一条分隔线了。\r\n\r\n---\r\n\r\n### 高级用法\r\n\r\nMarkdown 还有一个特别用法，就是在你需要的时候可以直接书写 HTML 代码。\r\n\r\n<input type=\"text\" placeholder=\"这是个输入框！\" />\r\n\r\n只要掌握了上面的这些介绍，你就已经入门了！继续写作吧！","html":"<p>Yeah，博客上线了！这篇文章的目的是向你介绍 Ghost 编辑器并帮你快速上手。通过 <code>&lt;your blog URL&gt;/ghost/</code> 链接就可以登录系统后台管理你的博客内容了。当你进入后台，你就能看到左侧文章列表处列出的这篇文章，右侧就是这篇文章的预览效果。点击预览栏右上角的铅笔图标就能进入内容编辑页面。 </p>\n\n<h2 id=\"\">快速入门</h2>\n\n<p>Ghost 使用 Markdown 语法书写内容。简单来说，Markdown 就是一种简化的书写格式！</p>\n\n<p>用 Markdown 语法写作是很容易的。在编辑界面的左侧就是你写作的地方。在你认为需要的时候，可以使用以下这些语法来格式化你的内容。例如下面这个无序列表：</p>\n\n<ul>\n<li>Item number one</li>\n<li>Item number two\n<ul><li>A nested item</li></ul></li>\n<li>A final item</li>\n</ul>\n\n<p>还可以是有序列表：</p>\n\n<ol>\n<li>Remember to buy some milk  </li>\n<li>Drink the milk  </li>\n<li>Tweet that I remembered to buy the milk, and drank it</li>\n</ol>\n\n<h3 id=\"\">链接</h3>\n\n<p>如果要链接其它页面，可以直接把页面的 URL 粘贴过来，例如 <a href=\"http://www.ghostchina.com\">http://www.ghostchina.com</a> - 会被自动识别为链接。但是，如果你想自定义链接文本，可以像这样： <a href=\"http://www.ghostchina.com\">Ghost 中文网</a>。很简单吧！</p>\n\n<h3 id=\"\">图片</h3>\n\n<p>插入图片也没问题！前提是你事先知道图片的 URL，然后像下面这样：</p>\n\n<p><img src=\"http://static.ghostchina.com/image/3/fe/34a9831916be9db1381ecb320491e.png\" alt=\"The Ghost Logo\" /></p>\n\n<p>如果图片在本地的硬盘里怎么办？也很简单！像下面这样书写就能为图片预留一个位置，然后你可以继续写作，回头再通过拖拽的方式把图片上传到服务器上。</p>\n\n<h3 id=\"\">引用</h3>\n\n<p>有些时候我们需要引用别人说的话，可以这样：</p>\n\n<blockquote>\n  <p>Wisdomous - it's definitely a word.</p>\n</blockquote>\n\n<h3 id=\"\">代码</h3>\n\n<p>或许你是个码农，需要贴一些代码到文章里，可以通过两个引号（Tab 键上面的那个键）加入行内代码 <code>&lt;code&gt;</code>。如果需要加入大段的代码，可以在代码前加 4 个空格缩进，这就是 Markdown 的语法。</p>\n\n<pre><code>.awesome-thing {\n    display: block;\n    width: 100%;\n}\n</code></pre>\n\n<h3 id=\"\">分割线</h3>\n\n<p>在任一新行输入 3 个或更多的短横线（减号）就是一条分隔线了。</p>\n\n<hr />\n\n<h3 id=\"\">高级用法</h3>\n\n<p>Markdown 还有一个特别用法，就是在你需要的时候可以直接书写 HTML 代码。</p>\n\n<p><input type=\"text\" placeholder=\"这是个输入框！\" /></p>\n\n<p>只要掌握了上面的这些介绍，你就已经入门了！继续写作吧！</p>","image":null,"featured":0,"page":0,"status":"published","language":"zh_CN","meta_title":null,"meta_description":null,"author_id":1,"created_at":1458229218250,"created_by":1,"updated_at":1458229218250,"updated_by":1,"published_at":1458229218279,"published_by":1},{"id":2,"uuid":"9add7440-513a-46c6-ac4b-d442b144f286","title":"在阿里云 ECS Centos6.5上搭建Ghost博客系统,以及nodejs版本控制工具安装","slug":"ghostbo-ke-xi-tong-zai-centos6-5de-an-zhuang","markdown":"1 任何信息都有时效性,本文写于2016.3.20凌晨\n2 不建议参考本文,请直接参考官方英文文档. http://ghost.org\n\n笔者在搭建服务器之前,刚刚接触前端开发半年,对于服务器搭建,nodejs,linux命令等完全是小白,完全靠google 百度,以及自己摸索.\n\n##### 一 服务器购买及域名购买及解析\n1 服务器,直接阿里云服务器,笔者买了入门1M 1G 1核的Centos6.5 ECS服务器.服务器放在深圳(不要担心备案的是,只不过是有点麻烦),便宜.\n2 域名购买及解析\n域名购买,直接在万网上购买就可以,我的域名就是http://sunzhiyong.cn\n29元第一年.域名购买了之后,就实名认证域名.\n解析:打开阿里云管理控制台,进入云解析,然后将你购买的域名解析到你的服务器(因为,计算机里面都是通过ip地址来访问你的服务器的,要让你的服务器能通过域名来访问你的服务器,需要将域名跟ip对应起来).解析的时候,同时添加'www'及'@'记录.都很傻瓜式的操作,按照提示就可以完成.\n#####二 服务器node环境的搭建\nGhost是基于Node.js构建的开源博客平台，所以我们首先搭建Node环境。\n我们首先下载xsheel,然后根据提示连接到你的服务器.IP在阿里云管理控制台查看.\n然后逐行执行以下命令:\n<code>\nwget http://nodejs.org/dist/v0.10.40/node-v0.10.40.tar.gz  \ntar zxvf node-v0.10.40.tar.gz  \ncd node-v0.10.40  \n./configure \nmake && make install \n</code>\n命令执行完毕之后，检测一下环境是否搭建成功,以及查看以下版本信息.\n执行:\n<code>\nnode -v \n</code>\n显示v0.10.40,就说明环境搭建成功.\n\n#####配置Nginx \n\n安装好了nginx后，我们需要设置一个代理服务器让我们的博客可以使用域名访问。 在/etc/nginx/conf.d目录下创建一个配置文件ghost.conf：\n执行:\n<code>\nvi /etc/nginx/conf.d/ghost.conf \n</code>\n写入以下内容：\n```\nserver {  \n    listen 80;\n    server_name example.com; #将 example.com 改为你的域名或ip。\n\n    location / {\n        proxy_set_header   X-Real-IP $remote_addr;\n        proxy_set_header   Host      $http_host;\n        proxy_pass         http://127.0.0.1:2368;\n    }\n}\n```\n\n保存退出，重启nginx：\n\n执行\n<code>\nservice nginx restart  \n</code>\n没有错误就ok了.\n\n有的人会安装MySQL,对于小白来说,感觉没有必要,我们尽快搭建好博客系统.\n\n#####四 安装Ghost\n这时候我们就需要安装ghost,我们用的是中文版本的.首先要下载,逐行执行:\n<code>\nmkdir var\ncd var\nmkdir www\ncd www\nwget http://dl.ghostchina.com/Ghost-0.7.4-zh-full.zip  \nunzip Ghost-0.7.4-zh-full.zip -d ghost  \ncd ghost  \n</code>\n接着修改默认配置,逐行执行:\n<code>\ncp config.example.js config.js  \nvi config.js \n</code>\nGhost有产品模式、开发模式和测试模式等多种运行模式，这里我们需要在配置文件中找到production模式：\n```\n# 生产模式\nproduction: {  \n    url: 'http://snowz.me', # 修改为你的域名或者IP，注意加上http://\n    mail: {},\n    database: {\n        client: 'mysql'\n        connection: {\n            host     : '127.0.0.1',\n            user     : 'ghost', # 数据库连接的用户\n            password : '123456', # 先前创建的密码\n            database : 'ghost', # 先前创建的数据库\n            charset  : 'utf8'\n        },\n    server: {\n            host: '127.0.0.1',\n            port: '2368' # 若修改该端口记得在nginx中做相应改变\n        }\n    }  \n```\n保存退出，接下来就到了见证奇迹的时刻啦，输入指令执行：\n<code>\nnpm start --production  \n</code>\n启动浏览器，输入之前配置的域名或者IP，我们就可以看到建立好的Ghost博客啦。 （Ctrl+C 中断掉开发者模式）\n#####五 让Ghost保持运行之nvm(node版本控制工具)安装\n前面提到的启动 Ghost 使用 npm start --production 命令。这是一个在开发模式下启动和测试的不错的选择，但是通过这种命令行启动的方式有个缺点，即当你关闭终端窗口或者从 SSH 断开连接时，Ghost 就停止了。为了防止 Ghost 停止工作，我们得解决这个问题。\n\n接下来安装forever,执行：\n<code>\nnpm install -g forever\n</code>\n你会发现提示说,你当前node版本是v0.10.40,而forever需要的版本则是,0.12以上的版本.这样的话,我们怎么办呢,一个方法就是格式化服务器,然后我们装一个高级的版本,但是这样的话,我们以上的努力就白费.另一个方法就是我升级一下nodejs版本. \n\nnodejs升级,这时候我们就需要node 版本管理工具,这里我们介绍nvm(Node Version Manager 我们参考git:https://github.com/creationix/nvm),各位读者,在安装的时候请务必参考此网址文档.\n\n首先我们Install script,我们来安装,在centos下直接执行代码:\n<code>\nwget -qO- https://raw.githubusercontent.com/creationix/nvm/v0.31.0/install.sh | bash\n</code>\n完成之后,我们执行:\n\n<code>nvp</code>\n\n如果发现找不到nvm命令,我们需要执行\n\n<code>touch ~/.bash_profile</code>\n\n(参考:Note: On OSX, if you get nvm: command not found after running the install script, your system may not have a [.bash_profile file] where the command is set up. Simple create one with touch ~/.bash_profile and run the install script again.)\n\n然后我们重启连接就可以.\n#####六 让Ghost保持运行之安装新版本node V4.2.4\n安装好nvm之后,我们就利用nvm来管理我们的node版本.\n以下是nvm的参考\n```\nNode Version Manager\n\nNote: <version> refers to any version-like string nvm understands. This includes:\n  - full or partial version numbers, starting with an optional \"v\" (0.10, v0.1.2, v1)\n  - default (built-in) aliases: node, stable, unstable, iojs, system\n  - custom aliases you define with `nvm alias foo`\n\nUsage:\n  nvm help                                  Show this message\n  nvm --version                             Print out the latest released version of nvm\n  nvm install [-s] <version>                Download and install a <version>, [-s] from source. Uses .nvmrc if available\n    --reinstall-packages-from=<version>     When installing, reinstall packages installed in <node|iojs|node version number>\n  nvm uninstall <version>                   Uninstall a version\n  nvm use [--silent] <version>              Modify PATH to use <version>. Uses .nvmrc if available\n  nvm exec [--silent] <version> [<command>] Run <command> on <version>. Uses .nvmrc if available\n  nvm run [--silent] <version> [<args>]     Run `node` on <version> with <args> as arguments. Uses .nvmrc if available\n  nvm current                               Display currently activated version\n  nvm ls                                    List installed versions\n  nvm ls <version>                          List versions matching a given description\n  nvm ls-remote                             List remote versions available for install\n  nvm version <version>                     Resolve the given description to a single local version\n  nvm version-remote <version>              Resolve the given description to a single remote version\n  nvm deactivate                            Undo effects of `nvm` on current shell\n  nvm alias [<pattern>]                     Show all aliases beginning with <pattern>\n  nvm alias <name> <version>                Set an alias named <name> pointing to <version>\n  nvm unalias <name>                        Deletes the alias named <name>\n  nvm reinstall-packages <version>          Reinstall global `npm` packages contained in <version> to current version\n  nvm unload                                Unload `nvm` from shell\n  nvm which [<version>]                     Display path to installed node version. Uses .nvmrc if available\n\nExample:\n  nvm install v0.10.32                  Install a specific version number\n  nvm use 0.10                          Use the latest available 0.10.x release\n  nvm run 0.10.32 app.js                Run app.js using node v0.10.32\n  nvm exec 0.10.32 node app.js          Run `node app.js` with the PATH pointing to node v0.10.32\n  nvm alias default 0.10.32             Set default node version on a shell\n\nNote:\n  to remove, delete, or uninstall nvm - just remove the `$NVM_DIR` folder (usually `~/.nvm`)\n```\n我们安装所支持的版本,v4.2.4\n<code>\nnvm install v4.2.4\n</code>\n如果默认node版本自动跟换为 4.2.4则不需要再更改,若没有更改则执行\n<code>\nnvm use 4.2.4\n</code>\n这时候我们的node版本就升级好了,以后在开发的过程中,如果需要其他版本,可以通过nvm来管理.\n\n#####六 让Ghost保持运行之安装forever\n<code>\nnpm install -g forever\n</code>\n然后执行：\n<code>\nNODE_ENV=production forever start index.js\n</code>\n接下来看一下forever是否挂在了index.js：\n\nforever list\n```\ninfo:    Forever processes running\ndata:        uid  command                                  script   forever pid   id logfile                 uptime        \ndata:    [0] 4EL0 /root/.nvm/versions/node/v4.2.4/bin/node index.js 13249   13565    /root/.forever/4EL0.log 0:1:41:13.947 \n```\n\n这个状态的话，你就可以开始你的Ghost之路了！\n\n结束进程命令：\nforever index.js\n\n参考:\n\nhttps://www.zhihu.com/question/22755373\nhttps://snowz.me/how-to-install-ghost/\n\n此文花费笔者不少心血编写,转载请注明出处,谢谢","html":"<p>1 任何信息都有时效性,本文写于2016.3.20凌晨 <br />\n2 不建议参考本文,请直接参考官方英文文档. <a href=\"http://ghost.org\">http://ghost.org</a></p>\n\n<p>笔者在搭建服务器之前,刚刚接触前端开发半年,对于服务器搭建,nodejs,linux命令等完全是小白,完全靠google 百度,以及自己摸索.</p>\n\n<h5 id=\"\">一 服务器购买及域名购买及解析</h5>\n\n<p>1 服务器,直接阿里云服务器,笔者买了入门1M 1G 1核的Centos6.5 ECS服务器.服务器放在深圳(不要担心备案的是,只不过是有点麻烦),便宜. <br />\n2 域名购买及解析 <br />\n域名购买,直接在万网上购买就可以,我的域名就是<a href=\"http://sunzhiyong.cn\">http://sunzhiyong.cn</a>\n29元第一年.域名购买了之后,就实名认证域名. <br />\n解析:打开阿里云管理控制台,进入云解析,然后将你购买的域名解析到你的服务器(因为,计算机里面都是通过ip地址来访问你的服务器的,要让你的服务器能通过域名来访问你的服务器,需要将域名跟ip对应起来).解析的时候,同时添加'www'及'@'记录.都很傻瓜式的操作,按照提示就可以完成.</p>\n\n<h5 id=\"node\">二 服务器node环境的搭建</h5>\n\n<p>Ghost是基于Node.js构建的开源博客平台，所以我们首先搭建Node环境。 <br />\n我们首先下载xsheel,然后根据提示连接到你的服务器.IP在阿里云管理控制台查看.\n然后逐行执行以下命令:\n<code> <br />\nwget http://nodejs.org/dist/v0.10.40/node-v0.10.40.tar.gz <br />\ntar zxvf node-v0.10.40.tar.gz <br />\ncd node-v0.10.40 <br />\n./configure \nmake &amp;&amp; make install <br />\n</code> <br />\n命令执行完毕之后，检测一下环境是否搭建成功,以及查看以下版本信息.\n执行:\n<code> <br />\nnode -v <br />\n</code> <br />\n显示v0.10.40,就说明环境搭建成功.</p>\n\n<h5 id=\"nginx\">配置Nginx</h5>\n\n<p>安装好了nginx后，我们需要设置一个代理服务器让我们的博客可以使用域名访问。 在/etc/nginx/conf.d目录下创建一个配置文件ghost.conf：\n执行:\n<code> <br />\nvi /etc/nginx/conf.d/ghost.conf <br />\n</code> <br />\n写入以下内容：</p>\n\n<pre><code>server {  \n    listen 80;\n    server_name example.com; #将 example.com 改为你的域名或ip。\n\n    location / {\n        proxy_set_header   X-Real-IP $remote_addr;\n        proxy_set_header   Host      $http_host;\n        proxy_pass         http://127.0.0.1:2368;\n    }\n}\n</code></pre>\n\n<p>保存退出，重启nginx：</p>\n\n<p>执行\n<code> <br />\nservice nginx restart <br />\n</code> <br />\n没有错误就ok了.</p>\n\n<p>有的人会安装MySQL,对于小白来说,感觉没有必要,我们尽快搭建好博客系统.</p>\n\n<h5 id=\"ghost\">四 安装Ghost</h5>\n\n<p>这时候我们就需要安装ghost,我们用的是中文版本的.首先要下载,逐行执行:\n<code> <br />\nmkdir var <br />\ncd var <br />\nmkdir www <br />\ncd www <br />\nwget http://dl.ghostchina.com/Ghost-0.7.4-zh-full.zip <br />\nunzip Ghost-0.7.4-zh-full.zip -d ghost <br />\ncd ghost <br />\n</code> <br />\n接着修改默认配置,逐行执行:\n<code> <br />\ncp config.example.js config.js <br />\nvi config.js <br />\n</code> <br />\nGhost有产品模式、开发模式和测试模式等多种运行模式，这里我们需要在配置文件中找到production模式：  </p>\n\n<pre><code># 生产模式\nproduction: {  \n    url: 'http://snowz.me', # 修改为你的域名或者IP，注意加上http://\n    mail: {},\n    database: {\n        client: 'mysql'\n        connection: {\n            host     : '127.0.0.1',\n            user     : 'ghost', # 数据库连接的用户\n            password : '123456', # 先前创建的密码\n            database : 'ghost', # 先前创建的数据库\n            charset  : 'utf8'\n        },\n    server: {\n            host: '127.0.0.1',\n            port: '2368' # 若修改该端口记得在nginx中做相应改变\n        }\n    }  \n</code></pre>\n\n<p>保存退出，接下来就到了见证奇迹的时刻啦，输入指令执行：\n<code> <br />\nnpm start --production <br />\n</code> <br />\n启动浏览器，输入之前配置的域名或者IP，我们就可以看到建立好的Ghost博客啦。 （Ctrl+C 中断掉开发者模式）</p>\n\n<h5 id=\"ghostnvmnode\">五 让Ghost保持运行之nvm(node版本控制工具)安装</h5>\n\n<p>前面提到的启动 Ghost 使用 npm start --production 命令。这是一个在开发模式下启动和测试的不错的选择，但是通过这种命令行启动的方式有个缺点，即当你关闭终端窗口或者从 SSH 断开连接时，Ghost 就停止了。为了防止 Ghost 停止工作，我们得解决这个问题。</p>\n\n<p>接下来安装forever,执行：\n<code> <br />\nnpm install -g forever <br />\n</code> <br />\n你会发现提示说,你当前node版本是v0.10.40,而forever需要的版本则是,0.12以上的版本.这样的话,我们怎么办呢,一个方法就是格式化服务器,然后我们装一个高级的版本,但是这样的话,我们以上的努力就白费.另一个方法就是我升级一下nodejs版本. </p>\n\n<p>nodejs升级,这时候我们就需要node 版本管理工具,这里我们介绍nvm(Node Version Manager 我们参考git:<a href=\"https://github.com/creationix/nvm),各位读者,在安装的时候请务必参考此网址文档\">https://github.com/creationix/nvm),各位读者,在安装的时候请务必参考此网址文档</a>.</p>\n\n<p>首先我们Install script,我们来安装,在centos下直接执行代码:\n<code> <br />\nwget -qO- https://raw.githubusercontent.com/creationix/nvm/v0.31.0/install.sh | bash <br />\n</code> <br />\n完成之后,我们执行:</p>\n\n<p><code>nvp</code></p>\n\n<p>如果发现找不到nvm命令,我们需要执行</p>\n\n<p><code>touch ~/.bash_profile</code></p>\n\n<p>(参考:Note: On OSX, if you get nvm: command not found after running the install script, your system may not have a [.bash<em>profile file] where the command is set up. Simple create one with touch ~/.bash</em>profile and run the install script again.)</p>\n\n<p>然后我们重启连接就可以.</p>\n\n<h5 id=\"ghostnodev424\">六 让Ghost保持运行之安装新版本node V4.2.4</h5>\n\n<p>安装好nvm之后,我们就利用nvm来管理我们的node版本.\n以下是nvm的参考</p>\n\n<pre><code>Node Version Manager\n\nNote: &lt;version&gt; refers to any version-like string nvm understands. This includes:  \n  - full or partial version numbers, starting with an optional \"v\" (0.10, v0.1.2, v1)\n  - default (built-in) aliases: node, stable, unstable, iojs, system\n  - custom aliases you define with `nvm alias foo`\n\nUsage:  \n  nvm help                                  Show this message\n  nvm --version                             Print out the latest released version of nvm\n  nvm install [-s] &lt;version&gt;                Download and install a &lt;version&gt;, [-s] from source. Uses .nvmrc if available\n    --reinstall-packages-from=&lt;version&gt;     When installing, reinstall packages installed in &lt;node|iojs|node version number&gt;\n  nvm uninstall &lt;version&gt;                   Uninstall a version\n  nvm use [--silent] &lt;version&gt;              Modify PATH to use &lt;version&gt;. Uses .nvmrc if available\n  nvm exec [--silent] &lt;version&gt; [&lt;command&gt;] Run &lt;command&gt; on &lt;version&gt;. Uses .nvmrc if available\n  nvm run [--silent] &lt;version&gt; [&lt;args&gt;]     Run `node` on &lt;version&gt; with &lt;args&gt; as arguments. Uses .nvmrc if available\n  nvm current                               Display currently activated version\n  nvm ls                                    List installed versions\n  nvm ls &lt;version&gt;                          List versions matching a given description\n  nvm ls-remote                             List remote versions available for install\n  nvm version &lt;version&gt;                     Resolve the given description to a single local version\n  nvm version-remote &lt;version&gt;              Resolve the given description to a single remote version\n  nvm deactivate                            Undo effects of `nvm` on current shell\n  nvm alias [&lt;pattern&gt;]                     Show all aliases beginning with &lt;pattern&gt;\n  nvm alias &lt;name&gt; &lt;version&gt;                Set an alias named &lt;name&gt; pointing to &lt;version&gt;\n  nvm unalias &lt;name&gt;                        Deletes the alias named &lt;name&gt;\n  nvm reinstall-packages &lt;version&gt;          Reinstall global `npm` packages contained in &lt;version&gt; to current version\n  nvm unload                                Unload `nvm` from shell\n  nvm which [&lt;version&gt;]                     Display path to installed node version. Uses .nvmrc if available\n\nExample:  \n  nvm install v0.10.32                  Install a specific version number\n  nvm use 0.10                          Use the latest available 0.10.x release\n  nvm run 0.10.32 app.js                Run app.js using node v0.10.32\n  nvm exec 0.10.32 node app.js          Run `node app.js` with the PATH pointing to node v0.10.32\n  nvm alias default 0.10.32             Set default node version on a shell\n\nNote:  \n  to remove, delete, or uninstall nvm - just remove the `$NVM_DIR` folder (usually `~/.nvm`)\n</code></pre>\n\n<p>我们安装所支持的版本,v4.2.4\n<code> <br />\nnvm install v4.2.4 <br />\n</code> <br />\n如果默认node版本自动跟换为 4.2.4则不需要再更改,若没有更改则执行\n<code> <br />\nnvm use 4.2.4 <br />\n</code> <br />\n这时候我们的node版本就升级好了,以后在开发的过程中,如果需要其他版本,可以通过nvm来管理.</p>\n\n<h5 id=\"ghostforever\">六 让Ghost保持运行之安装forever</h5>\n\n<p><code> <br />\nnpm install -g forever <br />\n</code> <br />\n然后执行：\n<code> <br />\nNODE_ENV=production forever start index.js <br />\n</code> <br />\n接下来看一下forever是否挂在了index.js：</p>\n\n<p>forever list  </p>\n\n<pre><code>info:    Forever processes running  \ndata:        uid  command                                  script   forever pid   id logfile                 uptime  \ndata:    [0] 4EL0 /root/.nvm/versions/node/v4.2.4/bin/node index.js 13249   13565    /root/.forever/4EL0.log 0:1:41:13.947  \n</code></pre>\n\n<p>这个状态的话，你就可以开始你的Ghost之路了！</p>\n\n<p>结束进程命令：\nforever index.js</p>\n\n<p>参考:</p>\n\n<p><a href=\"https://www.zhihu.com/question/22755373\">https://www.zhihu.com/question/22755373</a> <br />\n<a href=\"https://snowz.me/how-to-install-ghost/\">https://snowz.me/how-to-install-ghost/</a></p>\n\n<p>此文花费笔者不少心血编写,转载请注明出处,谢谢</p>","image":null,"featured":0,"page":0,"status":"published","language":"zh_CN","meta_title":null,"meta_description":null,"author_id":1,"created_at":1458230427992,"created_by":1,"updated_at":1458570102496,"updated_by":1,"published_at":1458410131403,"published_by":1},{"id":4,"uuid":"71867adb-cece-46df-94fe-f5eb1c05c49e","title":"这个城市那么空","slug":"untitle","markdown":"2015年8月底来的上海，生活在上海这几个月，深深被上海魅力所吸引。所幸的是一直跟大学三位很好的朋友生活在一起。在这陌生的城市，让人感到很庆幸。\n\n今天，把俩位朋友送走了，应该说是昨天了，已经过了凌晨，就感到有点惆怅，我也明白天下无不散之宴席，各自有各自的人生轨迹，只是，这一切来的太快，让人难以适应。\n\n这种惆怅让我第一次对上海这座城市感到有种距离感，让人感觉到这个城市那么空。","html":"<p>2015年8月底来的上海，生活在上海这几个月，深深被上海魅力所吸引。所幸的是一直跟大学三位很好的朋友生活在一起。在这陌生的城市，让人感到很庆幸。</p>\n\n<p>今天，把俩位朋友送走了，应该说是昨天了，已经过了凌晨，就感到有点惆怅，我也明白天下无不散之宴席，各自有各自的人生轨迹，只是，这一切来的太快，让人难以适应。</p>\n\n<p>这种惆怅让我第一次对上海这座城市感到有种距离感，让人感觉到这个城市那么空。</p>","image":null,"featured":0,"page":0,"status":"published","language":"zh_CN","meta_title":null,"meta_description":null,"author_id":1,"created_at":1458488620586,"created_by":1,"updated_at":1458912266159,"updated_by":1,"published_at":1458493723633,"published_by":1},{"id":5,"uuid":"07e9d1a1-fae7-44be-bd48-fcb7a1c2972a","title":"工作总结","slug":"gong-zuo-zong-jie","markdown":"#####干了这么长时间的开发，总结一下自己对开发的理解。\n1 对自己用的每一行代码负责,了解背后的原理，深究\n2 项目结构要分好目录,清晰\n3 写共用的方法,只要存在重复操作，利用了一个方法,就写共用方法\n4 使用多个public.js  局部public.js,\n5 对于ajax 背后要处理,比如网络未连接,比如,超时,比如错误信息之类.\n6 尽可能少的减少数据请求,在添加数据的同时,要把数据添加到本地,以防下次用到的时候,用户看不见数据.\n7 使用 css3 按钮 svg 之类的,csssprites这种图片感觉会被时代淘汰，因为对于程序员来说，图片不可绝对控制。代码的世界，就是程序员的世界，在你的代码里面，你就是上帝，必须绝对控制。图片这种格式的东西，应该会被取代。\n8 使用sass这类预编译语言，css存在很大的缺陷，关注postcss。\n9 多写注释，最好是对于每一个方法,布局都有注释,不然项目跨度时间长,记不得代码有什么用,很费时间。\n10 阅读英文文档，不可否认，技术的世界，绝大部分的知识都是从太平洋彼岸传过来的。要想跟进技术的发展，你就必须阅读英文文档。另一方面就是，你看翻译的文档，我常常认为这是二手文档、二手思想。别人翻译的，永远跟源文档有差别，会存在差异。\n11 关注几个网址，关注github stackoverflow google\n12 使用google搜索，google浏览器\n\n\n","html":"<h5 id=\"\">干了这么长时间的开发，总结一下自己对开发的理解。</h5>\n\n<p>1 对自己用的每一行代码负责,了解背后的原理，深究 <br />\n2 项目结构要分好目录,清晰 <br />\n3 写共用的方法,只要存在重复操作，利用了一个方法,就写共用方法 <br />\n4 使用多个public.js  局部public.js, <br />\n5 对于ajax 背后要处理,比如网络未连接,比如,超时,比如错误信息之类. <br />\n6 尽可能少的减少数据请求,在添加数据的同时,要把数据添加到本地,以防下次用到的时候,用户看不见数据. <br />\n7 使用 css3 按钮 svg 之类的,csssprites这种图片感觉会被时代淘汰，因为对于程序员来说，图片不可绝对控制。代码的世界，就是程序员的世界，在你的代码里面，你就是上帝，必须绝对控制。图片这种格式的东西，应该会被取代。 <br />\n8 使用sass这类预编译语言，css存在很大的缺陷，关注postcss。 <br />\n9 多写注释，最好是对于每一个方法,布局都有注释,不然项目跨度时间长,记不得代码有什么用,很费时间。 <br />\n10 阅读英文文档，不可否认，技术的世界，绝大部分的知识都是从太平洋彼岸传过来的。要想跟进技术的发展，你就必须阅读英文文档。另一方面就是，你看翻译的文档，我常常认为这是二手文档、二手思想。别人翻译的，永远跟源文档有差别，会存在差异。 <br />\n11 关注几个网址，关注github stackoverflow google <br />\n12 使用google搜索，google浏览器</p>","image":null,"featured":0,"page":0,"status":"published","language":"zh_CN","meta_title":null,"meta_description":null,"author_id":1,"created_at":1458493789542,"created_by":1,"updated_at":1458908857348,"updated_by":1,"published_at":1458908188090,"published_by":1},{"id":6,"uuid":"fa73917c-8436-4d2d-90dd-9b10d0fe2b91","title":"设置“根据重力感应自动横竖屏”失效问题","slug":"she-zhi-gen-ju-zhong-li-gan-ying-zi-dong-heng-shu-ping-shi-xiao-wen-ti","markdown":"已经在,manifest.json文件里面设置了“根据重力感应自动横竖屏”不感应的横竖屏，但是Hbulider本地打包,以及直接运行在本机和虚拟机上,但是仍然感应横竖屏。只有在云打包情况下，这些设置才会生效。","html":"<p>已经在,manifest.json文件里面设置了“根据重力感应自动横竖屏”不感应的横竖屏，但是Hbulider本地打包,以及直接运行在本机和虚拟机上,但是仍然感应横竖屏。只有在云打包情况下，这些设置才会生效。</p>","image":null,"featured":0,"page":0,"status":"published","language":"zh_CN","meta_title":null,"meta_description":null,"author_id":1,"created_at":1458908207792,"created_by":1,"updated_at":1458908533878,"updated_by":1,"published_at":1458908275424,"published_by":1},{"id":7,"uuid":"1423d4ad-d3e1-42c2-9463-ae18d77c2464","title":"mui遮罩蒙版","slug":"untitled","markdown":"mui这个框架，官方文档贼坑，内容少的可怜，许多东西得自己搜索，自己看源文件，我都有种自己帮官方写个文档的冲动，以后再说。 \n==关于遮罩蒙版官方文档如下：  \n\n--------\n 在popover、侧滑菜单等界面，经常会用到蒙版遮罩；比如popover弹出后，除popover控件外的其它区域都会遮罩一层蒙版，用户点击蒙版不会触发蒙版下方的逻辑，而会关闭popover同时关闭蒙版；再比如侧滑菜单界面，菜单划出后，除侧滑菜单之外的其它区域都会遮罩一层蒙版，用户点击蒙版会关闭侧滑菜单同时关闭蒙版。  \n\n遮罩蒙版常用的操作包括：创建、显示、关闭，如下代码：  \n\n    var mask = mui.createMask(callback);//callback为用户点击蒙版时自动执行的回调；\n    mask.show();//显示遮罩\n    mask.close();//关闭遮罩  \n**注意：**关闭遮罩仅会关闭，不会销毁；关闭之后可以再次调用mask.show();打开遮罩；\n\n mui默认的蒙版遮罩使用.mui-backdrop类定义（如下代码），若需自定义遮罩效果，只需覆盖定义.mui-backdrop即可；  \n\n    .mui-backdrop {\n    position: fixed;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    z-index: 998;\n    background-color: rgba(0,0,0,.3);\n    }  \n\n----\n看完了之后就没理解什么意思，然后自己又查了一些资料。  \n**声明,创建一个遮罩，在这个框架里面，这样就直接创建了一个遮罩.其中callback方法是自己自定义的方法,你可以不写,也可以设置点击遮罩的时候,所需要执行的方法.**  \n` var mask = mui.createMask(callback);`  \n**显示遮罩**  \n` mask.show();//显示遮罩`  \n**显示遮罩**  \n`mask.show();打开遮罩；`\n\n以上调用的话都是调用默认的遮罩效果,是一个全屏的遮罩,但是我们又是需要对遮罩进行修改,这时候,我们就需要来设置类来**覆盖遮罩类**\n\n\n    .mui-backdrop {\n    position: fixed;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    z-index: 998;\n    background-color: rgba(0,0,0,.3);\n    }  \n\n官方这个遮罩效果里面小可设置这些属性,来控制遮罩效果\n\n","html":"<p>mui这个框架，官方文档贼坑，内容少的可怜，许多东西得自己搜索，自己看源文件，我都有种自己帮官方写个文档的冲动，以后再说。 <br />\n==关于遮罩蒙版官方文档如下：  </p>\n\n<hr />\n\n<p>在popover、侧滑菜单等界面，经常会用到蒙版遮罩；比如popover弹出后，除popover控件外的其它区域都会遮罩一层蒙版，用户点击蒙版不会触发蒙版下方的逻辑，而会关闭popover同时关闭蒙版；再比如侧滑菜单界面，菜单划出后，除侧滑菜单之外的其它区域都会遮罩一层蒙版，用户点击蒙版会关闭侧滑菜单同时关闭蒙版。  </p>\n\n<p>遮罩蒙版常用的操作包括：创建、显示、关闭，如下代码：  </p>\n\n<pre><code>var mask = mui.createMask(callback);//callback为用户点击蒙版时自动执行的回调；\nmask.show();//显示遮罩\nmask.close();//关闭遮罩  \n</code></pre>\n\n<p><strong>注意：</strong>关闭遮罩仅会关闭，不会销毁；关闭之后可以再次调用mask.show();打开遮罩；</p>\n\n<p>mui默认的蒙版遮罩使用.mui-backdrop类定义（如下代码），若需自定义遮罩效果，只需覆盖定义.mui-backdrop即可；  </p>\n\n<pre><code>.mui-backdrop {\nposition: fixed;\ntop: 0;\nright: 0;\nbottom: 0;\nleft: 0;\nz-index: 998;\nbackground-color: rgba(0,0,0,.3);\n}  \n</code></pre>\n\n<hr />\n\n<p>看完了之后就没理解什么意思，然后自己又查了一些资料。 <br />\n<strong>声明,创建一个遮罩，在这个框架里面，这样就直接创建了一个遮罩.其中callback方法是自己自定义的方法,你可以不写,也可以设置点击遮罩的时候,所需要执行的方法.</strong> <br />\n<code>var mask = mui.createMask(callback);</code> <br />\n<strong>显示遮罩</strong> <br />\n<code>mask.show();//显示遮罩</code> <br />\n<strong>显示遮罩</strong> <br />\n<code>mask.show();打开遮罩；</code></p>\n\n<p>以上调用的话都是调用默认的遮罩效果,是一个全屏的遮罩,但是我们又是需要对遮罩进行修改,这时候,我们就需要来设置类来<strong>覆盖遮罩类</strong></p>\n\n<pre><code>.mui-backdrop {\nposition: fixed;\ntop: 0;\nright: 0;\nbottom: 0;\nleft: 0;\nz-index: 998;\nbackground-color: rgba(0,0,0,.3);\n}  \n</code></pre>\n\n<p>官方这个遮罩效果里面小可设置这些属性,来控制遮罩效果</p>","image":null,"featured":0,"page":0,"status":"published","language":"zh_CN","meta_title":null,"meta_description":null,"author_id":1,"created_at":1458908317744,"created_by":1,"updated_at":1458911575224,"updated_by":1,"published_at":1458910905376,"published_by":1},{"id":8,"uuid":"7ba3d119-7964-4847-99a1-aac3aeaad8a2","title":"区域滚动","slug":"qu-yu","markdown":"scroll(区域滚动)\n在App开发中，div区域滚动的需求是普遍存在的，但系统默认实现又有如下问题：\n\nAndroid平台4.0以下不支持div滚动\nAndroid平台4.0以上支持div滚动，但不显示滚动条\n弹出层的div滚动在iOS平台存在事件透传的问题\n因此，mui额外提供了区域滚动组件，使用时需要遵循如下DOM结构  \n`<div class=\"mui-scroll-wrapper\">\n\t    <div class=\"mui-scroll\">\n\t\t<!--这里放置真实显示的DOM内容-->\n\t</div>\n</div>`\n区域滚动组件默认为absolute定位，全屏显示；在实际使用过程中，需要手动设置滚动区域的位置（top和height）\n\n若使用区域滚动组件，需手动初始化scroll控件，代码如下：\n\nmui('.mui-scroll-wrapper').scroll({\n\tdeceleration: 0.0005 //flick 减速系数，系数越大，滚动速度越慢，滚动距离越小，默认值0.0006\n});  \nmui中iOS平台的下拉刷新（Android平台的下拉刷新使用的是双webview+原生滚动方案）、popover、可拖动式选项卡均使用了scroll组件。 为方便大家使用，mui还额外为scroll插件封装了部分方法。  \n\n ==隐藏滚动条==\n\n> mui.plusReady(function(){\nplus.webview.currentWebview().setStyle({\nscrollIndicator:'none'\n});\n})\n","html":"<p>scroll(区域滚动) <br />\n在App开发中，div区域滚动的需求是普遍存在的，但系统默认实现又有如下问题：</p>\n\n<p>Android平台4.0以下不支持div滚动 <br />\nAndroid平台4.0以上支持div滚动，但不显示滚动条 <br />\n弹出层的div滚动在iOS平台存在事件透传的问题\n因此，mui额外提供了区域滚动组件，使用时需要遵循如下DOM结构 <br />\n<code>&lt;div class=\"mui-scroll-wrapper\"&gt;\n        &lt;div class=\"mui-scroll\"&gt;\n        &lt;!--这里放置真实显示的DOM内容--&gt;\n    &lt;/div&gt;\n&lt;/div&gt;</code> <br />\n区域滚动组件默认为absolute定位，全屏显示；在实际使用过程中，需要手动设置滚动区域的位置（top和height）</p>\n\n<p>若使用区域滚动组件，需手动初始化scroll控件，代码如下：</p>\n\n<p>mui('.mui-scroll-wrapper').scroll({ <br />\n    deceleration: 0.0005 //flick 减速系数，系数越大，滚动速度越慢，滚动距离越小，默认值0.0006\n}); <br />\nmui中iOS平台的下拉刷新（Android平台的下拉刷新使用的是双webview+原生滚动方案）、popover、可拖动式选项卡均使用了scroll组件。 为方便大家使用，mui还额外为scroll插件封装了部分方法。  </p>\n\n<p><mark>隐藏滚动条</mark></p>\n\n<blockquote>\n  <p>mui.plusReady(function(){\n  plus.webview.currentWebview().setStyle({ <br />\n  scrollIndicator:'none' <br />\n  });\n  })</p>\n</blockquote>","image":null,"featured":0,"page":0,"status":"published","language":"zh_CN","meta_title":null,"meta_description":null,"author_id":1,"created_at":1458911059840,"created_by":1,"updated_at":1458911531880,"updated_by":1,"published_at":1458911531881,"published_by":1},{"id":9,"uuid":"9a3058a6-73f4-499b-950e-a1780255f805","title":"获取input输入的值","slug":"huo-qu","markdown":"seletor.value;","html":"<p>seletor.value;</p>","image":null,"featured":0,"page":0,"status":"published","language":"zh_CN","meta_title":null,"meta_description":null,"author_id":1,"created_at":1458911672800,"created_by":1,"updated_at":1458911736786,"updated_by":1,"published_at":1458911734053,"published_by":1},{"id":10,"uuid":"5c150547-39bf-4420-ad8a-82569382c5c0","title":"input获取焦点,失去焦点事件","slug":"inputhuo-qu-jiao-dian-shi-qu-jiao-dian-shi-jian","markdown":"这里使用jQuery的方法  \n**获得焦点**  \n```\n$(\"#search_keywords\").focus(function() {\n\t//自定义方法,可选\n});\n```\n\n**失去焦点**\n```\n$(\"#search_keywords\").blur(function() {\n\t//自定义方法,可选\n});\n```","html":"<p>这里使用jQuery的方法 <br />\n<strong>获得焦点</strong>  </p>\n\n<pre><code>$(\"#search_keywords\").focus(function() {\n    //自定义方法,可选\n});\n</code></pre>\n\n<p><strong>失去焦点</strong></p>\n\n<pre><code>$(\"#search_keywords\").blur(function() {\n    //自定义方法,可选\n});\n</code></pre>","image":null,"featured":0,"page":0,"status":"published","language":"zh_CN","meta_title":null,"meta_description":null,"author_id":1,"created_at":1458911792867,"created_by":1,"updated_at":1458912195895,"updated_by":1,"published_at":1458912195896,"published_by":1},{"id":11,"uuid":"f28d07f3-c165-4859-bb9c-2c52997d8e6f","title":"MUI开发注意事项","slug":"muikai-fa-zhu-yi-shi-xiang","markdown":"1 在使用mui框架开发的时候,文档结构要清晰\n\t在开发的时候,文档结构按照官方的样例,来建文档结构,比如说header 然后就是,<div class =”mui-content”></div>,如果有footer,就加进去\n(Dom个人建议:在对mui框架了解不多的情况下,在写用控件的时候,建议先去官方找到mui里面的控件,copy过来,然后在mui基础上修改样式,这样的话就可以保持mui原有的结构)\n\n2 我们现有的技术,据了解就是,使用c#后台,knockout.js用来数据双向绑定,mui布局.会议讨论的时候,就保持性能,做了谈论,所以要尽可能少的引入别的框架,比如jQuery.这样的话可以提高些性能.\n\n3 mui框架的一些事儿\n\t1)mui.plusReady 是调用H5+的内容,除了H5+的内容写在这个方法里面,其他任何内容不允许写到这里面.页面是不支持,mui.plusReady事件的\n\t2)mui.ready与mui.init()类似jQuery.ready事件,mui.ready运行js,mui.init()初始化界面.\n\t3)mui也封装了$,有可能会跟jQuery产生冲突\n\t4)mui的选择器有许多不足之处,可以使用H5的querySelector与querySelectorAll弥补一些.\n\t5)布局写在单独的css文件里面,别写在行内,不容易维护.(Dom个人建议,关于易于维护方面,可以启用sass或者less)\n\t6)列重复的时候使用graid,行重复使用table-view\n\t7)子继承父的一些信息,使用padding margin来调整布局\n\t8)fixed布局不能乱用\n4命名规则\n\t为了避免冲突(个人间,项目之间),使用团队的命名规则.\n\t9)如果要用tap点击事件跳转的话,mui(‘’).on(‘tap’,’选择器’,function(){}),选择器最好是使用,包含a标签的选择器,因为即使这个tap跳转不生效的话,还有其自带的跳转效果.\n\t10)css是一层层覆盖的\n5)CSS基本能够满足布局的需求,特别是CSS3.所以能用css实现的,就别用js实现.\n","html":"<p>1 在使用mui框架开发的时候,文档结构要清晰 <br />\n    在开发的时候,文档结构按照官方的样例,来建文档结构,比如说header 然后就是,<div class =”mui-content”></div>,如果有footer,就加进去\n(Dom个人建议:在对mui框架了解不多的情况下,在写用控件的时候,建议先去官方找到mui里面的控件,copy过来,然后在mui基础上修改样式,这样的话就可以保持mui原有的结构)</p>\n\n<p>2 我们现有的技术,据了解就是,使用c#后台,knockout.js用来数据双向绑定,mui布局.会议讨论的时候,就保持性能,做了谈论,所以要尽可能少的引入别的框架,比如jQuery.这样的话可以提高些性能.</p>\n\n<p>3 mui框架的一些事儿 <br />\n    1)mui.plusReady 是调用H5+的内容,除了H5+的内容写在这个方法里面,其他任何内容不允许写到这里面.页面是不支持,mui.plusReady事件的\n    2)mui.ready与mui.init()类似jQuery.ready事件,mui.ready运行js,mui.init()初始化界面.\n    3)mui也封装了$,有可能会跟jQuery产生冲突\n    4)mui的选择器有许多不足之处,可以使用H5的querySelector与querySelectorAll弥补一些.\n    5)布局写在单独的css文件里面,别写在行内,不容易维护.(Dom个人建议,关于易于维护方面,可以启用sass或者less)\n    6)列重复的时候使用graid,行重复使用table-view\n    7)子继承父的一些信息,使用padding margin来调整布局\n    8)fixed布局不能乱用\n4命名规则 <br />\n    为了避免冲突(个人间,项目之间),使用团队的命名规则.\n    9)如果要用tap点击事件跳转的话,mui(‘’).on(‘tap’,’选择器’,function(){}),选择器最好是使用,包含a标签的选择器,因为即使这个tap跳转不生效的话,还有其自带的跳转效果.\n    10)css是一层层覆盖的\n5)CSS基本能够满足布局的需求,特别是CSS3.所以能用css实现的,就别用js实现.</p>","image":null,"featured":0,"page":0,"status":"published","language":"zh_CN","meta_title":null,"meta_description":null,"author_id":1,"created_at":1458912230654,"created_by":1,"updated_at":1459238897075,"updated_by":1,"published_at":1459173479702,"published_by":1},{"id":12,"uuid":"c76e0b3a-bc8c-4a36-99b7-c49f24ad274d","title":"数组和对象,公用方法,数组对象","slug":"shu-zu-he-dui-xiang","markdown":"获取button的文字,seletor.innerHtm\n\n以前的项目不怎么写公用方法,现在开始写公用方法,挺爽的省去了许多时间.  \n来新公司一个星期了,看公司做的项目里面,在做多语言的时候,都是使用的是JSON对象或者是数组对象.这样的跟以前android开发的内容和样式分离.异曲同工之妙.  \n然后,今天在做一个setting页面的点击跳转事件的时候,模仿用了JSON数组对象,使用一个方法,完成了多个点击调整事件,挺好.","html":"<p>获取button的文字,seletor.innerHtm</p>\n\n<p>以前的项目不怎么写公用方法,现在开始写公用方法,挺爽的省去了许多时间. <br />\n来新公司一个星期了,看公司做的项目里面,在做多语言的时候,都是使用的是JSON对象或者是数组对象.这样的跟以前android开发的内容和样式分离.异曲同工之妙. <br />\n然后,今天在做一个setting页面的点击跳转事件的时候,模仿用了JSON数组对象,使用一个方法,完成了多个点击调整事件,挺好.</p>","image":null,"featured":0,"page":0,"status":"published","language":"zh_CN","meta_title":null,"meta_description":null,"author_id":1,"created_at":1459173541024,"created_by":1,"updated_at":1459173970393,"updated_by":1,"published_at":1459173970394,"published_by":1},{"id":13,"uuid":"ccda823f-b581-48e8-a97e-c85b7c4cca5f","title":"mui事件监听","slug":"muishi-jian","markdown":"###addEventListener\nseletor.addEventListener('事件',function(){\n})\n\n例子:点击打开新页面\ndocument.getElementById('info').addEventListener('tap', function() {\n  //打开关于页面\n  mui.openWindow({\n    url: 'examples/info.html', \n    id:'info'\n  });\n});\n###原生\nmui('父选择器').on('事件','子选择器'function(){\n mui.openWindow({\n    url: 'examples/info.html', \n    id:'info'\n  });\n})\n","html":"<h3 id=\"addeventlistener\">addEventListener</h3>\n\n<p>seletor.addEventListener('事件',function(){ <br />\n})</p>\n\n<p>例子:点击打开新页面\ndocument.getElementById('info').addEventListener('tap', function() { <br />\n  //打开关于页面\n  mui.openWindow({\n    url: 'examples/info.html', \n    id:'info'\n  });\n});</p>\n\n<h3 id=\"\">原生</h3>\n\n<p>mui('父选择器').on('事件','子选择器'function(){ <br />\n mui.openWindow({\n    url: 'examples/info.html', \n    id:'info'\n  });\n})</p>","image":null,"featured":0,"page":0,"status":"published","language":"zh_CN","meta_title":null,"meta_description":null,"author_id":1,"created_at":1459238841673,"created_by":1,"updated_at":1459257524795,"updated_by":1,"published_at":1459257524796,"published_by":1},{"id":15,"uuid":"06123c63-42cb-4435-bc88-456444135602","title":"addEventListener,querySeletor及querySeletorAll的使用","slug":"muishi-jian-2","markdown":"###addEventListener的使用  \n语法:  \n    element.addEventListener(event, function, useCapture) \n有三个参数  \n1) event:事件,很喜欢这个方法就是因为他可以监听太多的事件.  \n比如:JS事件参考 [JS事件参考网址](http://www.w3school.com.cn/jsref/jsref_events.asp  ).   \n再比如: DOM事件[DOM事件参考网址](http://www.w3school.com.cn/jsref/dom_obj_event.asp).  \n注意:需要将所有的on去除,就是监听的事件名.\n2)function,就方法,自己定义就可以了,可以直接写匿名方法function(){}\n3)useCapture,  需要参考下事件捕获和冒泡\n  true - 事件句柄在捕获阶段执行, 从上到下  \n  false- false- 默认。事件句柄在冒泡阶段执行,从下到上\n\n###querySeletor及querySeletorAll的使用\n1)querySelector定义和用法\nquerySelector() 方法返回文档中匹配指定 ==CSS 选择器==的一个元素。\n注意： querySelector() 方法仅仅返回匹配指定选择器的第一个元素。  \n如果你需要返回所有的元素，请使用 querySelectorAll() 方法替代。\n\n非常重要的一点就是他使用了CSS 选择器,基本所有的内容,都可以是用来选择.  \n2)querySelectorAll()的作用是：按文档顺序返回指定元素节点的子树中匹配选择器的元素集合，如果没有匹配返回空集合。\n语气说返回了一个集合,我们也可以认为他返回了一个数组对象.  \n\n\n这段时间开始时,在项目(ipad app 项目)里引用了jQuery,特别影响性能,找一些原生的代替,使用了这几个方法,挺好用.\n\n\n","html":"<h3 id=\"addeventlistener\">addEventListener的使用</h3>\n\n<p>语法: <br />\n    element.addEventListener(event, function, useCapture) \n有三个参数 <br />\n1) event:事件,很喜欢这个方法就是因为他可以监听太多的事件. <br />\n比如:JS事件参考 <a href=\"http://www.w3school.com.cn/jsref/jsref_events.asp\">JS事件参考网址</a>. <br />\n再比如: DOM事件<a href=\"http://www.w3school.com.cn/jsref/dom_obj_event.asp\">DOM事件参考网址</a>. <br />\n注意:需要将所有的on去除,就是监听的事件名.\n2)function,就方法,自己定义就可以了,可以直接写匿名方法function(){} <br />\n3)useCapture,  需要参考下事件捕获和冒泡 <br />\n  true - 事件句柄在捕获阶段执行, 从上到下 <br />\n  false- false- 默认。事件句柄在冒泡阶段执行,从下到上</p>\n\n<h3 id=\"queryseletorqueryseletorall\">querySeletor及querySeletorAll的使用</h3>\n\n<p>1)querySelector定义和用法 <br />\nquerySelector() 方法返回文档中匹配指定 <mark>CSS 选择器</mark>的一个元素。 <br />\n注意： querySelector() 方法仅仅返回匹配指定选择器的第一个元素。 <br />\n如果你需要返回所有的元素，请使用 querySelectorAll() 方法替代。</p>\n\n<p>非常重要的一点就是他使用了CSS 选择器,基本所有的内容,都可以是用来选择. <br />\n2)querySelectorAll()的作用是：按文档顺序返回指定元素节点的子树中匹配选择器的元素集合，如果没有匹配返回空集合。 <br />\n语气说返回了一个集合,我们也可以认为他返回了一个数组对象.  </p>\n\n<p>这段时间开始时,在项目(ipad app 项目)里引用了jQuery,特别影响性能,找一些原生的代替,使用了这几个方法,挺好用.</p>","image":null,"featured":0,"page":0,"status":"published","language":"zh_CN","meta_title":null,"meta_description":null,"author_id":1,"created_at":1459240201784,"created_by":1,"updated_at":1459348027018,"updated_by":1,"published_at":1459348027019,"published_by":1},{"id":16,"uuid":"2337412d-c252-4369-ac30-3dd03be54e45","title":"MUI init 配置集合","slug":"mui-init-pei-zhi-ji-he","markdown":"###右滑关闭\nmui框架封装的页面右滑关闭功能，默认未启用，若要使用右滑关闭功能，需要在mui.init();方法中设置swipeBack参数，如下：\nmui.init({\n\tswipeBack:true //启用右滑关闭功能\n});\n\nmui框架默认会监听Android手机的back按键，然后执行页面关闭逻辑； 若不希望mui自动处理back按键，可通过如下方式关闭mui的back按键监听；\nmui.init({\n\tkeyEventBind: {\n\t\tbackbutton: false  //关闭back按键监听\n\t}\n});\n###beforeback\n若希望在窗口关闭之前再处理一些其它业务逻辑，则可将业务逻辑抽象成一个具体函数，然后注册为mui.init方法的beforeback参数;beforeback的执行逻辑为：\n\n执行beforeback参数对应的函数若返回false，则不再执行mui.back()方法；\n否则（返回true或无返回值），继续执行mui.back()方法；\n示例：从列表打开详情页面，从详情页面再返回后希望刷新列表界面，此时可注册beforeback参数，然后通过自定义事件通知列表页面刷新数据，示例代码如下：\nmui.init({\n\tbeforeback: function(){\n\t\t//获得列表界面的webview\n\t\tvar list = plus.webview.getWebviewById('list');\n\t\t//触发列表界面的自定义事件（refresh）,从而进行数据刷新\n\t\tmui.fire(list,'refresh');\n\t\t//返回true，继续页面关闭逻辑\n\t\treturn true;\n\t}\n});\n\n###预加载\n\n所谓的预加载技术就是在用户尚未触发页面跳转时，提前创建目标页面，这样当用户跳转时，就可以立即进行页面切换，节省创建新页面的时间，提升app使用体验。mui提供两种方式实现页面预加载。\n\n方式一：通过mui.init方法中的preloadPages参数进行配置.\nmui.init({\n  preloadPages:[\n    {\n      url:prelaod-page-url,\n      id:preload-page-id,\n      styles:{},//窗口参数\n      extras:{},//自定义扩展参数\n      subpages:[{},{}]//预加载页面的子页面\n    }\n  ]\n});","html":"<h3 id=\"\">右滑关闭</h3>\n\n<p>mui框架封装的页面右滑关闭功能，默认未启用，若要使用右滑关闭功能，需要在mui.init();方法中设置swipeBack参数，如下： <br />\nmui.init({ <br />\n    swipeBack:true //启用右滑关闭功能\n});</p>\n\n<p>mui框架默认会监听Android手机的back按键，然后执行页面关闭逻辑； 若不希望mui自动处理back按键，可通过如下方式关闭mui的back按键监听； <br />\nmui.init({ <br />\n    keyEventBind: {\n        backbutton: false  //关闭back按键监听\n    }\n});</p>\n\n<h3 id=\"beforeback\">beforeback</h3>\n\n<p>若希望在窗口关闭之前再处理一些其它业务逻辑，则可将业务逻辑抽象成一个具体函数，然后注册为mui.init方法的beforeback参数;beforeback的执行逻辑为：</p>\n\n<p>执行beforeback参数对应的函数若返回false，则不再执行mui.back()方法；\n否则（返回true或无返回值），继续执行mui.back()方法；\n示例：从列表打开详情页面，从详情页面再返回后希望刷新列表界面，此时可注册beforeback参数，然后通过自定义事件通知列表页面刷新数据，示例代码如下：\nmui.init({ <br />\n    beforeback: function(){\n        //获得列表界面的webview\n        var list = plus.webview.getWebviewById('list');\n        //触发列表界面的自定义事件（refresh）,从而进行数据刷新\n        mui.fire(list,'refresh');\n        //返回true，继续页面关闭逻辑\n        return true;\n    }\n});</p>\n\n<h3 id=\"\">预加载</h3>\n\n<p>所谓的预加载技术就是在用户尚未触发页面跳转时，提前创建目标页面，这样当用户跳转时，就可以立即进行页面切换，节省创建新页面的时间，提升app使用体验。mui提供两种方式实现页面预加载。</p>\n\n<p>方式一：通过mui.init方法中的preloadPages参数进行配置.\nmui.init({ <br />\n  preloadPages:[\n    {\n      url:prelaod-page-url,\n      id:preload-page-id,\n      styles:{},//窗口参数\n      extras:{},//自定义扩展参数\n      subpages:[{},{}]//预加载页面的子页面\n    }\n  ]\n});</p>","image":null,"featured":0,"page":0,"status":"published","language":"zh_CN","meta_title":null,"meta_description":null,"author_id":1,"created_at":1459252474059,"created_by":1,"updated_at":1459252626952,"updated_by":1,"published_at":1459252626953,"published_by":1},{"id":17,"uuid":"1130dd7b-1a52-47cc-8767-b5ebefaef4fd","title":"mui 滚动条的使用","slug":"mui-gun-dong-tiao-de-shi-yong","markdown":"mui额外提供了区域滚动组件，使用时需要遵循如下DOM结构\n`<div class=\"mui-scroll-wrapper\">\n\t<div class=\"mui-scroll\">\n\t\t<!--这里放置真实显示的DOM内容-->\n\t</div>\n</div>`\n\n区域滚动组件默认为absolute定位，全屏显示；在实际使用过程中，需要手动设置滚动区域的位置（top和height）\n\n若使用区域滚动组件，需手动初始化scroll控件，代码如下：\n`mui('.mui-scroll-wrapper').scroll({\n\tdeceleration: 0.0005 //flick 减速系数，系数越大，滚动速度越慢，滚动距离越小，默认值0.0006\n});`\n\n在使用中注意:  \n1)默认是absolute定位,要注意这一特性,来计算距离\n比如,在header之下,如果没有包裹一层div,直接使用了以上DOM结构,计算的使使用会默认从文档顶部开始计算距离(因为是absolute定位)  \n2)在header之下使用,有时候滚动条会出现在header里面,这时候我们要买使用父子页面嵌套,要么设置不显示滚动条,要么使用区域滚动.\n  (1)父子页面嵌套,将header写在父页面,子页面写滚动部分.  \n  (2)要么设置不显示滚动条:  参考\n$('#scroll').scroll({indicators: false});\n\nmui.plusReady(function(){ plus.webview.currentWebview().setStyle({ \nscrollIndicator:'none' \n}); })\n3)区域滚动:\n区域滚动的参考我以前的博文:[地址](http://120.25.197.246/2016/03/25/qu-yu/)http://120.25.197.246/2016/03/25/qu-yu/","html":"<p>mui额外提供了区域滚动组件，使用时需要遵循如下DOM结构 <br />\n<code>&lt;div class=\"mui-scroll-wrapper\"&gt;\n    &lt;div class=\"mui-scroll\"&gt;\n        &lt;!--这里放置真实显示的DOM内容--&gt;\n    &lt;/div&gt;\n&lt;/div&gt;</code></p>\n\n<p>区域滚动组件默认为absolute定位，全屏显示；在实际使用过程中，需要手动设置滚动区域的位置（top和height）</p>\n\n<p>若使用区域滚动组件，需手动初始化scroll控件，代码如下：\n<code>mui('.mui-scroll-wrapper').scroll({\n    deceleration: 0.0005 //flick 减速系数，系数越大，滚动速度越慢，滚动距离越小，默认值0.0006\n});</code></p>\n\n<p>在使用中注意: <br />\n1)默认是absolute定位,要注意这一特性,来计算距离 <br />\n比如,在header之下,如果没有包裹一层div,直接使用了以上DOM结构,计算的使使用会默认从文档顶部开始计算距离(因为是absolute定位) <br />\n2)在header之下使用,有时候滚动条会出现在header里面,这时候我们要买使用父子页面嵌套,要么设置不显示滚动条,要么使用区域滚动. <br />\n  (1)父子页面嵌套,将header写在父页面,子页面写滚动部分. <br />\n  (2)要么设置不显示滚动条:  参考\n$('#scroll').scroll({indicators: false});</p>\n\n<p>mui.plusReady(function(){ plus.webview.currentWebview().setStyle({ <br />\nscrollIndicator:'none' <br />\n}); })\n3)区域滚动: <br />\n区域滚动的参考我以前的博文:<a href=\"http://120.25.197.246/2016/03/25/qu-yu/\">地址</a><a href=\"http://120.25.197.246/2016/03/25/qu-yu/\">http://120.25.197.246/2016/03/25/qu-yu/</a></p>","image":null,"featured":0,"page":0,"status":"published","language":"zh_CN","meta_title":null,"meta_description":null,"author_id":1,"created_at":1459348146883,"created_by":1,"updated_at":1459349079440,"updated_by":1,"published_at":1459349079441,"published_by":1},{"id":18,"uuid":"d7da5a21-37bb-4f04-8135-5fe605b71bf8","title":"时间管理","slug":"shi-jian-guan-li","markdown":"最近感觉自己的效率很低,好吧自己的效率一直很低.  \n在时间管理方面,一直断断续续的使用 GTD 时间管理方法,方法挺好,但是,自己老是执行力不行,总是不按照,每天心思多.乱想.  \n计划  管理  总结 循环嵌套,缺一不可.","html":"<p>最近感觉自己的效率很低,好吧自己的效率一直很低. <br />\n在时间管理方面,一直断断续续的使用 GTD 时间管理方法,方法挺好,但是,自己老是执行力不行,总是不按照,每天心思多.乱想. <br />\n计划  管理  总结 循环嵌套,缺一不可.</p>","image":null,"featured":0,"page":0,"status":"published","language":"zh_CN","meta_title":null,"meta_description":null,"author_id":1,"created_at":1459349758144,"created_by":1,"updated_at":1459350034112,"updated_by":1,"published_at":1459350034113,"published_by":1},{"id":19,"uuid":"c81833d2-32ae-4266-bca0-306d1ff5e526","title":"监听键盘事件","slug":"jian-ting-jian-pan-shi-jian","markdown":"###js keyup、keypress和keydown事件 \n以上这三种都是键盘事件,当一个按键被pressed 或released在每一个现代浏览器中，都可能有三种客户端事件。\n\nkeydown event\nkeypress event\nkeyup event\n\nkeydown事件发生在键盘的键被按下的时候，接下来触发keypress事件。 keyup 事件在按键被释放的时候触发。\n\n这三个事件在页面中的使用方法如下例：\n\n`<input id=\"testkeyevent\" name=\"testkeyevent\"  onKeyUp=\"keyup()\" />`\n\n`<input id=\"testkeyevent\" name=\"testkeyevent\" onkeypress=\"keypress()\" />`\n\n`<input id=\"testkeyevent\" name=\"testkeyevent\"   onkeydown=\"keydown()\" />`  \n对应的js函数：\n\nfunction keyup(){ ...}\n\nfunction keypress(){ ...}\n\nfunction keydown(){ ...}\n\n注意:\n\nKeyDown触发后，不一定触发KeyUp，当KeyDown 按下后，拖动鼠标，那么将不会触发KeyUp事件。\nKeyPress主要用来捕获数字(注意：包括Shift+数字的符号)、字母（注意：包括大小写）、小键盘等除了F1-12、SHIFT、Alt、Ctrl、Insert、Home、PgUp、Delete、End、PgDn、ScrollLock、Pause、NumLock、{菜单键}、{开始键}和方向键外的ANSI字符\nKeyDown 和KeyUp 通常可以捕获键盘除了PrScrn所有按键(这里不讨论特殊键盘的特殊键）\nKeyPress 只能捕获单个字符\nKeyDown 和KeyUp 可以捕获组合键。\nKeyPress 可以捕获单个字符的大小写\nKeyDown和KeyUp 对于单个字符捕获的KeyValue 都是一个值，也就是不能判断单个字符的大小写。\nKeyPress 不区分小键盘和主键盘的数字字符。\nKeyDown 和KeyUp 区分小键盘和主键盘的数字字符。\n其中PrScrn 按键KeyPress、KeyDown和KeyUp 都不能捕获。\n在使用键盘的时候，通常会使用到CTRL+SHIFT+ALT 类似的组合键功能。对于此，我们如何来判定？\n\n     通过KeyUp 事件能够来处理（这里说明一下为什么不用KeyDown，因为在判定KeyDown的时候，CTRL、SHIFT和ALT 属于一直按下状态，然后再加另外一个键是不能准确捕获组合键，所以使用KeyDown 是不能准确判断出的，要通过KeyUp 事件来判定 ）\n\n     这里简单的列举出CTRL+其它键的组合判定代码：\n\n\nprivate void Form3_KeyUp(object sender, KeyEventArgs e)\n{\nif (e.Control)\n{\nMessageBox.Show(\"KeyUp:Ctrl+\" + e.KeyValue.ToString());\n}\n}\n捕获PrScrn按键事件\n 通过一种钩子的方式可以判定PrScrn 按键事件，钩子可以获取任何键盘事件。\n\n以下是一些键盘上的键对应的Code：以下是一些键盘上的键对应的Code：.\n\n\n`<script type=\"text/javascript\" language=JavaScript charset=\"UTF-8\">\n      document.onkeydown=function(event){\n            var e = event || window.event || arguments.callee.caller.arguments[0];\n            if(e && e.keyCode==27){ // 按 Esc \n                //要做的事情\n              }\n            if(e && e.keyCode==113){ // 按 F2 \n                 //要做的事情\n               }            \n             if(e && e.keyCode==13){ // enter 键\n                 //要做的事情\n            }\n        }; \n</script>`\n只要你定义了这些键的动作，你在浏览器里按下这些键就会响应，兼容目前所有浏览器。\n> js 里面的键盘事件经常用到，所以收集了键盘事件对应的键码来分享下：\nkeyCode 8 = BackSpace BackSpace\nkeyCode 9 = Tab Tab\nkeyCode 12 = Clear\nkeyCode 13 = Enter\nkeyCode 16 = Shift_L\nkeyCode 17 = Control_L\nkeyCode 18 = Alt_L\nkeyCode 19 = Pause\nkeyCode 20 = Caps_Lock\nkeyCode 27 = Escape Escape\nkeyCode 32 = space\nkeyCode 33 = Prior\nkeyCode 34 = Next\nkeyCode 35 = End\nkeyCode 36 = Home\nkeyCode 37 = Left\nkeyCode 38 = Up\nkeyCode 39 = Right\nkeyCode 40 = Down\nkeyCode 41 = Select\nkeyCode 42 = Print\nkeyCode 43 = Execute\nkeyCode 45 = Insert\nkeyCode 46 = Delete\nkeyCode 47 = Help\nkeyCode 48 = 0 equal braceright\nkeyCode 49 = 1 exclam onesuperior\nkeyCode 50 = 2 quotedbl twosuperior\nkeyCode 51 = 3 section threesuperior\nkeyCode 52 = 4 dollar\nkeyCode 53 = 5 percent\nkeyCode 54 = 6 ampersand\nkeyCode 55 = 7 slash braceleft\nkeyCode 56 = 8 parenleft bracketleft\nkeyCode 57 = 9 parenright bracketright\nkeyCode 65 = a A\nkeyCode 66 = b B\nkeyCode 67 = c C\nkeyCode 68 = d D\nkeyCode 69 = e E EuroSign\nkeyCode 70 = f F\nkeyCode 71 = g G\nkeyCode 72 = h H\nkeyCode 73 = i I\nkeyCode 74 = j J\nkeyCode 75 = k K\nkeyCode 76 = l L\nkeyCode 77 = m M mu\nkeyCode 78 = n N\nkeyCode 79 = o O\nkeyCode 80 = p P\nkeyCode 81 = q Q at\nkeyCode 82 = r R\nkeyCode 83 = s S\nkeyCode 84 = t T\nkeyCode 85 = u U\nkeyCode 86 = v V\nkeyCode 87 = w W\nkeyCode 88 = x X\nkeyCode 89 = y Y\nkeyCode 90 = z Z\nkeyCode 96 = KP_0 KP_0\nkeyCode 97 = KP_1 KP_1\nkeyCode 98 = KP_2 KP_2\nkeyCode 99 = KP_3 KP_3\nkeyCode 100 = KP_4 KP_4\nkeyCode 101 = KP_5 KP_5\nkeyCode 102 = KP_6 KP_6\nkeyCode 103 = KP_7 KP_7\nkeyCode 104 = KP_8 KP_8\nkeyCode 105 = KP_9 KP_9\nkeyCode 106 = KP_Multiply KP_Multiply\nkeyCode 107 = KP_Add KP_Add\nkeyCode 108 = KP_Separator KP_Separator\nkeyCode 109 = KP_Subtract KP_Subtract\nkeyCode 110 = KP_Decimal KP_Decimal\nkeyCode 111 = KP_Divide KP_Divide\nkeyCode 112 = F1\nkeyCode 113 = F2\nkeyCode 114 = F3\nkeyCode 115 = F4\nkeyCode 116 = F5\nkeyCode 117 = F6\nkeyCode 118 = F7\nkeyCode 119 = F8\nkeyCode 120 = F9\nkeyCode 121 = F10\nkeyCode 122 = F11\nkeyCode 123 = F12\nkeyCode 124 = F13\nkeyCode 125 = F14\nkeyCode 126 = F15\nkeyCode 127 = F16\nkeyCode 128 = F17\nkeyCode 129 = F18\nkeyCode 130 = F19\nkeyCode 131 = F20\nkeyCode 132 = F21\nkeyCode 133 = F22\nkeyCode 134 = F23\nkeyCode 135 = F24\nkeyCode 136 = Num_Lock\nkeyCode 137 = Scroll_Lock\nkeyCode 187 = acute grave\nkeyCode 188 = comma semicolon\nkeyCode 189 = minus underscore\nkeyCode 190 = period colon\nkeyCode 192 = numbersign apostrophe\nkeyCode 210 = plusminus hyphen macron\nkeyCode 211 =\nkeyCode 212 = copyright registered\nkeyCode 213 = guillemotleft guillemotright\nkeyCode 214 = masculine ordfeminine\nkeyCode 215 = ae AE\nkeyCode 216 = cent yen\nkeyCode 217 = questiondown exclamdown\nkeyCode 218 = onequarter onehalf threequarters\nkeyCode 220 = less greater bar\nkeyCode 221 = plus asterisk asciitilde\nkeyCode 227 = multiply division\nkeyCode 228 = acircumflex Acircumflex\nkeyCode 229 = ecircumflex Ecircumflex\nkeyCode 230 = icircumflex Icircumflex\nkeyCode 231 = ocircumflex Ocircumflex\nkeyCode 232 = ucircumflex Ucircumflex\nkeyCode 233 = ntilde Ntilde\nkeyCode 234 = yacute Yacute\nkeyCode 235 = oslash Ooblique\nkeyCode 236 = aring Aring\nkeyCode 237 = ccedilla Ccedilla\nkeyCode 238 = thorn THORN\nkeyCode 239 = eth ETH\nkeyCode 240 = diaeresis cedilla currency\nkeyCode 241 = agrave Agrave atilde Atilde\nkeyCode 242 = egrave Egrave\nkeyCode 243 = igrave Igrave\nkeyCode 244 = ograve Ograve otilde Otilde\nkeyCode 245 = ugrave Ugrave\nkeyCode 246 = adiaeresis Adiaeresis\nkeyCode 247 = ediaeresis Ediaeresis\nkeyCode 248 = idiaeresis Idiaeresis\nkeyCode 249 = odiaeresis Odiaeresis\nkeyCode 250 = udiaeresis Udiaeresis\nkeyCode 251 = ssharp question backslash\nkeyCode 252 = asciicircum degree\nkeyCode 253 = 3 sterling\nkeyCode 254 = Mode_switch\n使用event对象的keyCode属性判断输入的键值\neg：if(event.keyCode==13)alert(“enter!”);\n键值对应表\nA　　0X65 　U 　　0X85\nB　　0X66　 V　　 0X86\nC　　0X67　 W　　 0X87\nD　　0X68　 X 　　0X88\nE　　0X69　 Y　　 0X89\nF　　0X70　 Z　　 0X90\nG　　0X71　 0　　 0X48\nH　　0X72　 1　　 0X49\nI　　0X73　 2　　 0X50\nJ　　0X74　 3 　　0X51\nK　　0X75　 4 　　0X52\nL　　0X76　 5 　　0X53\nM　　0X77　 6　　 0X54\nN　　0X78 　7 　　0X55\nO　　0X79 　8 　　0X56\nP　　0X80 　9 　　0X57\nQ　　0X81　ESC　　0X1B\nR　　0X82　CTRL 　0X11\nS　　0X83　SHIFT　0X10\nT　　0X84　ENTER　0XD\n如果要使用组合键，则可以判断是否同时按下了这几个键，比如ctrl键、shift键以及alt键的组合使用就可以判断是否多按下了ctrl键、shift键以及alt键\n","html":"<h3 id=\"jskeyupkeypresskeydown\">js keyup、keypress和keydown事件</h3>\n\n<p>以上这三种都是键盘事件,当一个按键被pressed 或released在每一个现代浏览器中，都可能有三种客户端事件。</p>\n\n<p>keydown event <br />\nkeypress event <br />\nkeyup event</p>\n\n<p>keydown事件发生在键盘的键被按下的时候，接下来触发keypress事件。 keyup 事件在按键被释放的时候触发。</p>\n\n<p>这三个事件在页面中的使用方法如下例：</p>\n\n<p><code>&lt;input id=\"testkeyevent\" name=\"testkeyevent\"  onKeyUp=\"keyup()\" /&gt;</code></p>\n\n<p><code>&lt;input id=\"testkeyevent\" name=\"testkeyevent\" onkeypress=\"keypress()\" /&gt;</code></p>\n\n<p><code>&lt;input id=\"testkeyevent\" name=\"testkeyevent\"   onkeydown=\"keydown()\" /&gt;</code> <br />\n对应的js函数：</p>\n\n<p>function keyup(){ ...}</p>\n\n<p>function keypress(){ ...}</p>\n\n<p>function keydown(){ ...}</p>\n\n<p>注意:</p>\n\n<p>KeyDown触发后，不一定触发KeyUp，当KeyDown 按下后，拖动鼠标，那么将不会触发KeyUp事件。 <br />\nKeyPress主要用来捕获数字(注意：包括Shift+数字的符号)、字母（注意：包括大小写）、小键盘等除了F1-12、SHIFT、Alt、Ctrl、Insert、Home、PgUp、Delete、End、PgDn、ScrollLock、Pause、NumLock、{菜单键}、{开始键}和方向键外的ANSI字符 <br />\nKeyDown 和KeyUp 通常可以捕获键盘除了PrScrn所有按键(这里不讨论特殊键盘的特殊键） <br />\nKeyPress 只能捕获单个字符 <br />\nKeyDown 和KeyUp 可以捕获组合键。 <br />\nKeyPress 可以捕获单个字符的大小写 <br />\nKeyDown和KeyUp 对于单个字符捕获的KeyValue 都是一个值，也就是不能判断单个字符的大小写。 <br />\nKeyPress 不区分小键盘和主键盘的数字字符。 <br />\nKeyDown 和KeyUp 区分小键盘和主键盘的数字字符。 <br />\n其中PrScrn 按键KeyPress、KeyDown和KeyUp 都不能捕获。\n在使用键盘的时候，通常会使用到CTRL+SHIFT+ALT 类似的组合键功能。对于此，我们如何来判定？</p>\n\n<pre><code> 通过KeyUp 事件能够来处理（这里说明一下为什么不用KeyDown，因为在判定KeyDown的时候，CTRL、SHIFT和ALT 属于一直按下状态，然后再加另外一个键是不能准确捕获组合键，所以使用KeyDown 是不能准确判断出的，要通过KeyUp 事件来判定 ）\n\n 这里简单的列举出CTRL+其它键的组合判定代码：\n</code></pre>\n\n<p>private void Form3_KeyUp(object sender, KeyEventArgs e) <br />\n{\nif (e.Control) <br />\n{\nMessageBox.Show(\"KeyUp:Ctrl+\" + e.KeyValue.ToString()); <br />\n}\n}\n捕获PrScrn按键事件\n 通过一种钩子的方式可以判定PrScrn 按键事件，钩子可以获取任何键盘事件。</p>\n\n<p>以下是一些键盘上的键对应的Code：以下是一些键盘上的键对应的Code：.</p>\n\n<p><code>&lt;script type=\"text/javascript\" language=JavaScript charset=\"UTF-8\"&gt;\n      document.onkeydown=function(event){\n            var e = event || window.event || arguments.callee.caller.arguments[0];\n            if(e &amp;&amp; e.keyCode==27){ // 按 Esc \n                //要做的事情\n              }\n            if(e &amp;&amp; e.keyCode==113){ // 按 F2 \n                 //要做的事情\n               } <br />\n             if(e &amp;&amp; e.keyCode==13){ // enter 键\n                 //要做的事情\n            }\n        }; \n&lt;/script&gt;</code> <br />\n只要你定义了这些键的动作，你在浏览器里按下这些键就会响应，兼容目前所有浏览器。</p>\n\n<blockquote>\n  <p>js 里面的键盘事件经常用到，所以收集了键盘事件对应的键码来分享下：\n  keyCode 8 = BackSpace BackSpace <br />\n  keyCode 9 = Tab Tab <br />\n  keyCode 12 = Clear <br />\n  keyCode 13 = Enter <br />\n  keyCode 16 = Shift<em>L <br />\n  keyCode 17 = Control</em>L <br />\n  keyCode 18 = Alt<em>L <br />\n  keyCode 19 = Pause <br />\n  keyCode 20 = Caps</em>Lock <br />\n  keyCode 27 = Escape Escape <br />\n  keyCode 32 = space <br />\n  keyCode 33 = Prior <br />\n  keyCode 34 = Next <br />\n  keyCode 35 = End <br />\n  keyCode 36 = Home <br />\n  keyCode 37 = Left <br />\n  keyCode 38 = Up <br />\n  keyCode 39 = Right <br />\n  keyCode 40 = Down <br />\n  keyCode 41 = Select <br />\n  keyCode 42 = Print <br />\n  keyCode 43 = Execute <br />\n  keyCode 45 = Insert <br />\n  keyCode 46 = Delete <br />\n  keyCode 47 = Help <br />\n  keyCode 48 = 0 equal braceright <br />\n  keyCode 49 = 1 exclam onesuperior <br />\n  keyCode 50 = 2 quotedbl twosuperior <br />\n  keyCode 51 = 3 section threesuperior <br />\n  keyCode 52 = 4 dollar <br />\n  keyCode 53 = 5 percent <br />\n  keyCode 54 = 6 ampersand <br />\n  keyCode 55 = 7 slash braceleft <br />\n  keyCode 56 = 8 parenleft bracketleft <br />\n  keyCode 57 = 9 parenright bracketright <br />\n  keyCode 65 = a A <br />\n  keyCode 66 = b B <br />\n  keyCode 67 = c C <br />\n  keyCode 68 = d D <br />\n  keyCode 69 = e E EuroSign <br />\n  keyCode 70 = f F <br />\n  keyCode 71 = g G <br />\n  keyCode 72 = h H <br />\n  keyCode 73 = i I <br />\n  keyCode 74 = j J <br />\n  keyCode 75 = k K <br />\n  keyCode 76 = l L <br />\n  keyCode 77 = m M mu <br />\n  keyCode 78 = n N <br />\n  keyCode 79 = o O <br />\n  keyCode 80 = p P <br />\n  keyCode 81 = q Q at <br />\n  keyCode 82 = r R <br />\n  keyCode 83 = s S <br />\n  keyCode 84 = t T <br />\n  keyCode 85 = u U <br />\n  keyCode 86 = v V <br />\n  keyCode 87 = w W <br />\n  keyCode 88 = x X <br />\n  keyCode 89 = y Y <br />\n  keyCode 90 = z Z <br />\n  keyCode 96 = KP<em>0 KP</em>0 <br />\n  keyCode 97 = KP<em>1 KP</em>1 <br />\n  keyCode 98 = KP<em>2 KP</em>2 <br />\n  keyCode 99 = KP<em>3 KP</em>3 <br />\n  keyCode 100 = KP<em>4 KP</em>4 <br />\n  keyCode 101 = KP<em>5 KP</em>5 <br />\n  keyCode 102 = KP<em>6 KP</em>6 <br />\n  keyCode 103 = KP<em>7 KP</em>7 <br />\n  keyCode 104 = KP<em>8 KP</em>8 <br />\n  keyCode 105 = KP<em>9 KP</em>9 <br />\n  keyCode 106 = KP<em>Multiply KP</em>Multiply <br />\n  keyCode 107 = KP<em>Add KP</em>Add <br />\n  keyCode 108 = KP<em>Separator KP</em>Separator <br />\n  keyCode 109 = KP<em>Subtract KP</em>Subtract <br />\n  keyCode 110 = KP<em>Decimal KP</em>Decimal <br />\n  keyCode 111 = KP<em>Divide KP</em>Divide <br />\n  keyCode 112 = F1 <br />\n  keyCode 113 = F2 <br />\n  keyCode 114 = F3 <br />\n  keyCode 115 = F4 <br />\n  keyCode 116 = F5 <br />\n  keyCode 117 = F6 <br />\n  keyCode 118 = F7 <br />\n  keyCode 119 = F8 <br />\n  keyCode 120 = F9 <br />\n  keyCode 121 = F10 <br />\n  keyCode 122 = F11 <br />\n  keyCode 123 = F12 <br />\n  keyCode 124 = F13 <br />\n  keyCode 125 = F14 <br />\n  keyCode 126 = F15 <br />\n  keyCode 127 = F16 <br />\n  keyCode 128 = F17 <br />\n  keyCode 129 = F18 <br />\n  keyCode 130 = F19 <br />\n  keyCode 131 = F20 <br />\n  keyCode 132 = F21 <br />\n  keyCode 133 = F22 <br />\n  keyCode 134 = F23 <br />\n  keyCode 135 = F24 <br />\n  keyCode 136 = Num<em>Lock <br />\n  keyCode 137 = Scroll</em>Lock <br />\n  keyCode 187 = acute grave <br />\n  keyCode 188 = comma semicolon <br />\n  keyCode 189 = minus underscore <br />\n  keyCode 190 = period colon <br />\n  keyCode 192 = numbersign apostrophe <br />\n  keyCode 210 = plusminus hyphen macron <br />\n  keyCode 211 = <br />\n  keyCode 212 = copyright registered <br />\n  keyCode 213 = guillemotleft guillemotright <br />\n  keyCode 214 = masculine ordfeminine <br />\n  keyCode 215 = ae AE <br />\n  keyCode 216 = cent yen <br />\n  keyCode 217 = questiondown exclamdown <br />\n  keyCode 218 = onequarter onehalf threequarters <br />\n  keyCode 220 = less greater bar <br />\n  keyCode 221 = plus asterisk asciitilde <br />\n  keyCode 227 = multiply division <br />\n  keyCode 228 = acircumflex Acircumflex <br />\n  keyCode 229 = ecircumflex Ecircumflex <br />\n  keyCode 230 = icircumflex Icircumflex <br />\n  keyCode 231 = ocircumflex Ocircumflex <br />\n  keyCode 232 = ucircumflex Ucircumflex <br />\n  keyCode 233 = ntilde Ntilde <br />\n  keyCode 234 = yacute Yacute <br />\n  keyCode 235 = oslash Ooblique <br />\n  keyCode 236 = aring Aring <br />\n  keyCode 237 = ccedilla Ccedilla <br />\n  keyCode 238 = thorn THORN <br />\n  keyCode 239 = eth ETH <br />\n  keyCode 240 = diaeresis cedilla currency <br />\n  keyCode 241 = agrave Agrave atilde Atilde <br />\n  keyCode 242 = egrave Egrave <br />\n  keyCode 243 = igrave Igrave <br />\n  keyCode 244 = ograve Ograve otilde Otilde <br />\n  keyCode 245 = ugrave Ugrave <br />\n  keyCode 246 = adiaeresis Adiaeresis <br />\n  keyCode 247 = ediaeresis Ediaeresis <br />\n  keyCode 248 = idiaeresis Idiaeresis <br />\n  keyCode 249 = odiaeresis Odiaeresis <br />\n  keyCode 250 = udiaeresis Udiaeresis <br />\n  keyCode 251 = ssharp question backslash <br />\n  keyCode 252 = asciicircum degree <br />\n  keyCode 253 = 3 sterling <br />\n  keyCode 254 = Mode_switch <br />\n  使用event对象的keyCode属性判断输入的键值\n  eg：if(event.keyCode==13)alert(“enter!”); <br />\n  键值对应表\n  A　　0X65 　U 　　0X85 <br />\n  B　　0X66　 V　　 0X86 <br />\n  C　　0X67　 W　　 0X87 <br />\n  D　　0X68　 X 　　0X88 <br />\n  E　　0X69　 Y　　 0X89 <br />\n  F　　0X70　 Z　　 0X90 <br />\n  G　　0X71　 0　　 0X48 <br />\n  H　　0X72　 1　　 0X49 <br />\n  I　　0X73　 2　　 0X50 <br />\n  J　　0X74　 3 　　0X51 <br />\n  K　　0X75　 4 　　0X52 <br />\n  L　　0X76　 5 　　0X53 <br />\n  M　　0X77　 6　　 0X54 <br />\n  N　　0X78 　7 　　0X55 <br />\n  O　　0X79 　8 　　0X56 <br />\n  P　　0X80 　9 　　0X57 <br />\n  Q　　0X81　ESC　　0X1B <br />\n  R　　0X82　CTRL 　0X11 <br />\n  S　　0X83　SHIFT　0X10 <br />\n  T　　0X84　ENTER　0XD <br />\n  如果要使用组合键，则可以判断是否同时按下了这几个键，比如ctrl键、shift键以及alt键的组合使用就可以判断是否多按下了ctrl键、shift键以及alt键</p>\n</blockquote>","image":null,"featured":0,"page":0,"status":"published","language":"zh_CN","meta_title":null,"meta_description":null,"author_id":1,"created_at":1459428007558,"created_by":1,"updated_at":1459428851017,"updated_by":1,"published_at":1459428851021,"published_by":1},{"id":20,"uuid":"3e547072-b4f7-43d6-9908-25203c080029","title":"改变软键盘上显示的字,return 改为中文search,英文search","slug":"gai-bian-j","markdown":"这是利用了表单属性,一般系统会识别用以下结构  \n`<form>\n<input type=\"search\" class=\"mui-input-clear\" placeholder=\"搜索课题名称\" id=\"search_keywords\">\n</form>`\n\n必须要在form表单里面,但是这样又出现了一个问题,点击搜索按钮,会刷新页面  \n这是因为,form的发展历史在ajax之前,以前数据交互都是通过表单,然后刷新真个页面,随着ajax的发展,局部刷新的使用,这种逐渐减少使用.  \n我们不需要这种自动提交,在form 添加`onsubmit=\"return false;\"`,这样就不会提交刷新页面了","html":"<p>这是利用了表单属性,一般系统会识别用以下结构 <br />\n<code>&lt;form&gt;\n&lt;input type=\"search\" class=\"mui-input-clear\" placeholder=\"搜索课题名称\" id=\"search_keywords\"&gt; <br />\n&lt;/form&gt;</code></p>\n\n<p>必须要在form表单里面,但是这样又出现了一个问题,点击搜索按钮,会刷新页面 <br />\n这是因为,form的发展历史在ajax之前,以前数据交互都是通过表单,然后刷新真个页面,随着ajax的发展,局部刷新的使用,这种逐渐减少使用. <br />\n我们不需要这种自动提交,在form 添加<code>onsubmit=\"return false;\"</code>,这样就不会提交刷新页面了</p>","image":null,"featured":0,"page":0,"status":"published","language":"zh_CN","meta_title":null,"meta_description":null,"author_id":1,"created_at":1459428950072,"created_by":1,"updated_at":1459429379723,"updated_by":1,"published_at":1459429379725,"published_by":1},{"id":21,"uuid":"5225d8a6-4773-47cc-ac4d-c82913a816dc","title":"mui页面传值","slug":"muiye-mian-chuan-zhi","markdown":"mui目前传值的话有两种,官方一直没有总结\n两种都可以用于打开窗口的时候传值.  \n####1 extras传值    \n需要传值的页面  \n`mui.openWindow({\n    url:'info.html',\n    id:'info.html',\n    extras:{\n        name:'mui',\n        version:'0.5.8'\n    }\n});`  \n接收值页面,需要plusReady事件之后  \n`mui.plusRadey(function(){\nvar self = plus.webview.currentWebview();\nvar name = self.name;\nvar version = self.version;\n})`\n\n####2   自定义事件\n需要传值的页面  \n这里面接收值的页面通过H5+获得,同样是在plusReady事件内写此方法,比如:('customEvent'就是自定义事件的名称)\n`\nmui.plusRadey(function(){\nvar targetPage =  plus.webview.getWebviewById('detail.html');\nmui.fire(targetPage,'customEvent',{\n  //自定义事件参数\n  id:id//传值\n});\n})`  \n接收值页面  \n`window.addEventListener('customEvent',function(event){\n  //通过event.detail可获得传递过来的参数内容\n   var id = event.detail.id;//接收值\n});`  \n自定义事件,同样可以用于页面之间传递触发方法,通过监听事件即可\n","html":"<p>mui目前传值的话有两种,官方一直没有总结 <br />\n两种都可以用于打开窗口的时候传值.  </p>\n\n<h4 id=\"1extras\">1 extras传值</h4>\n\n<p>需要传值的页面 <br />\n<code>mui.openWindow({\n    url:'info.html',\n    id:'info.html',\n    extras:{\n        name:'mui',\n        version:'0.5.8'\n    }\n});</code> <br />\n接收值页面,需要plusReady事件之后 <br />\n<code>mui.plusRadey(function(){\nvar self = plus.webview.currentWebview(); <br />\nvar name = self.name; <br />\nvar version = self.version; <br />\n})</code></p>\n\n<h4 id=\"2\">2   自定义事件</h4>\n\n<p>需要传值的页面 <br />\n这里面接收值的页面通过H5+获得,同样是在plusReady事件内写此方法,比如:('customEvent'就是自定义事件的名称)\n<code>\nmui.plusRadey(function(){ <br />\nvar targetPage =  plus.webview.getWebviewById('detail.html'); <br />\nmui.fire(targetPage,'customEvent',{ <br />\n  //自定义事件参数\n  id:id//传值\n});\n})</code> <br />\n接收值页面 <br />\n<code>window.addEventListener('customEvent',function(event){\n  //通过event.detail可获得传递过来的参数内容\n   var id = event.detail.id;//接收值\n});</code> <br />\n自定义事件,同样可以用于页面之间传递触发方法,通过监听事件即可</p>","image":null,"featured":0,"page":0,"status":"published","language":"zh_CN","meta_title":null,"meta_description":null,"author_id":1,"created_at":1459429411327,"created_by":1,"updated_at":1469447798337,"updated_by":1,"published_at":1459430444098,"published_by":1},{"id":22,"uuid":"77a3c890-8c10-49f3-a2e5-120ec758af3a","title":"异步函数","slug":"yi-bu-han-shu","markdown":"原生的异步函数只有settimeout,setInternal\n其他的有ajax异步函数","html":"<p>原生的异步函数只有settimeout,setInternal\n其他的有ajax异步函数</p>","image":null,"featured":0,"page":0,"status":"published","language":"zh_CN","meta_title":null,"meta_description":null,"author_id":1,"created_at":1459506028703,"created_by":1,"updated_at":1459506079496,"updated_by":1,"published_at":1459506076996,"published_by":1},{"id":23,"uuid":"06449f11-a690-4b31-b5da-13b595bbb90d","title":"沉浸模式,以及沉浸模式状态栏颜色改变","slug":"chen-jin-mo-shi-yi-ji-chen-jin-mo-shi-zhuang-tai-lan-yan-se-gai-bian","markdown":"沉浸模式只需要设置下就可以  \nios:  \n打开应用的manifest.json文件，切换到代码视图，在plus -> distribute -> apple 下添加UIReserveStatusbarOffset节点并设置值为false。   \n注意：  \n1. 真机运行不生效，需提交App云端打包后才生效；\n2. 此功能仅在iOS7及以上系统有效。\nandroid:  \n打开应用的manifest.json文件，切换到代码视图，在plus -> distribute -> google 下添加ImmersedStatusbar节点并设置值为true。  \n注意：  \n1. 真机运行不生效，需提交App云端打包后才生效；\n2. 此功能仅在Android4.4及以上系统有效。\n\n使用之后要注意沉浸模式所带来的样式的改变,如果要使用沉浸模式,最好在开发之初就设置好.","html":"<p>沉浸模式只需要设置下就可以 <br />\nios: <br />\n打开应用的manifest.json文件，切换到代码视图，在plus -> distribute -> apple 下添加UIReserveStatusbarOffset节点并设置值为false。 <br />\n注意： <br />\n1. 真机运行不生效，需提交App云端打包后才生效； <br />\n2. 此功能仅在iOS7及以上系统有效。 <br />\nandroid: <br />\n打开应用的manifest.json文件，切换到代码视图，在plus -> distribute -> google 下添加ImmersedStatusbar节点并设置值为true。 <br />\n注意： <br />\n1. 真机运行不生效，需提交App云端打包后才生效； <br />\n2. 此功能仅在Android4.4及以上系统有效。</p>\n\n<p>使用之后要注意沉浸模式所带来的样式的改变,如果要使用沉浸模式,最好在开发之初就设置好.</p>","image":null,"featured":0,"page":0,"status":"published","language":"zh_CN","meta_title":null,"meta_description":null,"author_id":1,"created_at":1459860043209,"created_by":1,"updated_at":1460096527946,"updated_by":1,"published_at":1460096353818,"published_by":1},{"id":24,"uuid":"bd24b9e9-0070-4404-b904-85e40f3f7590","title":"2016/4/11凌晨,杂想","slug":"2016-4-11ling-chen-za-xiang","markdown":"凌晨了,已经星期一了,回想下前2个星期,记下来吧  \n清明节,自己一个人去爬了泰山,看了日出,全程步行,上下山走了不同的道路,看了沿途的风景,对于我来说这次泰山之行,堪称一个人的完美.这个过程真的很美好,不知道用什么语言来形容她,总之,很美好,就明天吧,写个旅游日志出来.  \n然后就上个星期吧,上了四天班,\"肯家订课宝\"项目进入deadline,很顺利的收尾,轻松了许多.在进入了新的公司,忙碌了太多太多,不敢想象以前的工作是那么轻松,有点后怕,再像以前那样空闲地工作下去.忙碌点,才踏实  \n现在的团队我感觉是处于起步阶段,存在很多问题,但是整个团队的氛围真的很好,做项目的积极性挺好,对项目的追求也挺好.在这里需要好好学习一下对编程,团队的理解.  \n说到对编程的理解,算是对前端的理解,感觉自己缺少的太多太多.需要好好整理一下.需要追溯下计算机的发展,需要探寻下语言运行的背后原理...专注,但不拘泥于一门语言,专注前端,课余时间,学习后端.成为全栈工程师  \n跟朋友一起建了个\"Aladdin技术团队\",已经接了小单,正在做,出现了许多问题.但都还好慢慢的都解决了.  \n周六去看了下堂姐,堂姐在一家房地产公司上班,带我参观了他们的项目,\"翡翠甲第\",感觉这样的房子才像国际化大都是应有的房子,才像上海该有的房子,地理位置真的很好,内环以内,9万左右一平,挺高.压力挺大.    \n周日,特想去看一个人,但是,她太忙了,忙得让人.....,自己又感觉太无力,太无力,这种感觉不好受啊.  \n一直相信技术能改变世界,一直相信自己能改变这个世界,一直想改变我自己,但是,似乎从高二开始,自己就沉浸在自己的世界了,与整个世界脱节了,丧失了自己的理想,丧失了自己的骄傲,丧失了自我......自己就像一个迷途不知返的羔羊,在原地徘徊,彷徨,惶恐......去年来到上海之后,慢慢的这种迷茫,彷徨,惶恐渐渐消退,自我渐渐寻回,骄傲?没什么可以骄傲的了.  \n不关注一辆好车,不相信自己以后会买不了现在看起来很好的车;不关注上海的房价,不相信自己以后只能买一套上海的房子;不关注那些零零碎碎,那些已经阻碍你的发展.  \nfocus你的时间管理,focus你的健康,focus你的亲朋好友,focus你爱的人,focus你的技术,focus你的处人处事,focus你自身的发展......  \n你若盛开......  \n            孙志勇于二零一六年四月十一日凌晨\n\n","html":"<p>凌晨了,已经星期一了,回想下前2个星期,记下来吧 <br />\n清明节,自己一个人去爬了泰山,看了日出,全程步行,上下山走了不同的道路,看了沿途的风景,对于我来说这次泰山之行,堪称一个人的完美.这个过程真的很美好,不知道用什么语言来形容她,总之,很美好,就明天吧,写个旅游日志出来. <br />\n然后就上个星期吧,上了四天班,\"肯家订课宝\"项目进入deadline,很顺利的收尾,轻松了许多.在进入了新的公司,忙碌了太多太多,不敢想象以前的工作是那么轻松,有点后怕,再像以前那样空闲地工作下去.忙碌点,才踏实 <br />\n现在的团队我感觉是处于起步阶段,存在很多问题,但是整个团队的氛围真的很好,做项目的积极性挺好,对项目的追求也挺好.在这里需要好好学习一下对编程,团队的理解. <br />\n说到对编程的理解,算是对前端的理解,感觉自己缺少的太多太多.需要好好整理一下.需要追溯下计算机的发展,需要探寻下语言运行的背后原理...专注,但不拘泥于一门语言,专注前端,课余时间,学习后端.成为全栈工程师 <br />\n跟朋友一起建了个\"Aladdin技术团队\",已经接了小单,正在做,出现了许多问题.但都还好慢慢的都解决了. <br />\n周六去看了下堂姐,堂姐在一家房地产公司上班,带我参观了他们的项目,\"翡翠甲第\",感觉这样的房子才像国际化大都是应有的房子,才像上海该有的房子,地理位置真的很好,内环以内,9万左右一平,挺高.压力挺大. <br />\n周日,特想去看一个人,但是,她太忙了,忙得让人.....,自己又感觉太无力,太无力,这种感觉不好受啊. <br />\n一直相信技术能改变世界,一直相信自己能改变这个世界,一直想改变我自己,但是,似乎从高二开始,自己就沉浸在自己的世界了,与整个世界脱节了,丧失了自己的理想,丧失了自己的骄傲,丧失了自我......自己就像一个迷途不知返的羔羊,在原地徘徊,彷徨,惶恐......去年来到上海之后,慢慢的这种迷茫,彷徨,惶恐渐渐消退,自我渐渐寻回,骄傲?没什么可以骄傲的了. <br />\n不关注一辆好车,不相信自己以后会买不了现在看起来很好的车;不关注上海的房价,不相信自己以后只能买一套上海的房子;不关注那些零零碎碎,那些已经阻碍你的发展. <br />\nfocus你的时间管理,focus你的健康,focus你的亲朋好友,focus你爱的人,focus你的技术,focus你的处人处事,focus你自身的发展...... <br />\n你若盛开...... <br />\n            孙志勇于二零一六年四月十一日凌晨</p>","image":null,"featured":0,"page":0,"status":"published","language":"zh_CN","meta_title":null,"meta_description":null,"author_id":1,"created_at":1460304582439,"created_by":1,"updated_at":1460307347824,"updated_by":1,"published_at":1460307347825,"published_by":1},{"id":25,"uuid":"a698bb78-5e74-4624-aaf0-0ba95e97bdae","title":"泰山游记","slug":"tai-shan-lu-you","markdown":"清明小长假第一天找好了房子,然后就去跟朋友乘车去了日照,转道去泰安,登山旅游.  朋友们都忙,一根人想出去走走,排解下...就太泰山了.  \n3号下午2点左右到的泰安,乘公交到岱庙,吃了个午饭(最好就在车站附近吃饭,岱庙那边真没什么吃的,我吃的麦当劳).买了张票,就去了岱庙.现场买票,网上没有得卖,还好队伍不是很长,等了几分钟.  \n大门,牌匾高高挂起,\"岱庙\"二字,有种古代城市大门的感觉.楼台挺高,听古朴.进去了之后,会有种历史沧桑感,亭榭院落,院落里面有神兽玄武,我看出来了,据说有四方神兽,只看出来一种,印象最为深刻的是,铜亭,古树,丁香花,整个亭子都是铜做出来的,听古朴,挺有历史感;古树,古侧柏数,得几人合抱才能抱的过来.历史的印记,活生生的印记,依旧绿意盎然.丁香花,盛开了,飘满整个岱庙,溢出岱庙......,对于皇帝居住的行宫,仙神,壁画之类的没什么太大的感触.不过有一点壁画损坏的太严重.看了一会儿之后,就感觉没有多么大的意思,然后就走路过去取了红门那边,准备登山.本来是准备夜爬泰山的,感觉夜爬泰山有点危险,自己是一个人,而且逛岱庙用的时间太少,就准备直接爬泰山.  \n从岱庙走到红门,花了点时间,到达红门的时候已经4点左右了.其中,路上买了2瓶红牛,2袋饼干,包里还有2瓶农夫三拳 ,就登山了,还买了件一次性雨衣,4元,被坑了,上山之后,一元一件.  \n想挑战下自己,全程步行登山,也体验下登山的乐趣.预备的路线是红门-->斗母宫-->中天门-->十八盘-->南天门-->天街-->玉皇顶-->日观峰看日出.  \n4点从红门触发,开始登山,这时候上下山的人挺多,一路上爬上去,人多就不说了,关键是灰尘怎么也这么多,四面的山光秃秃的,跟个荒山似的.顿时让人有点心灰意冷.没办法继续爬吧.网上买的票,直接刷身份证就过去了.  \n这一路上,感觉挺荒凉,都是有原因的,这种荒凉让你感觉的柳暗花明,豁然开朗,开始走的还挺快的,不一会儿就到了中天门,很多人是坐车到中天门,然后从中天门开始爬山了,如果仅仅是为了欣赏泰山的壮阔,美景......不喜欢泰山的荒凉,不喜欢挑战自己,可以考虑这条路线.简直是泰山人海.中天门,这里对于一些人来说是起点,有许多商家,可以在这里修整下.我直接就继续爬山了  \n中天门可以说是泰山风景的一个分界点,中天门以上,你会发现那种壮阔,巍峨,不能说美丽,可以用雄伟来形容.看着那如通天般的阶梯,真是让人热血澎湃.中天门之后,就感觉到挺累了,而且,台阶特别的陡峭,这时候,就是这种专挑,15分钟左右休息了一次,大约就休息二三分钟吧,然后继续网上爬.快爬到十八盘的时候,天快黑了,可以在半山腰欣赏到泰山的那一抹晚霞,真是壮阔美丽.一路上奇石奇树挺多,有一条小溪,从天上来......  \n到达南天门的时候,天已经黑了,然后,从南天门往下看,你会看到,整个泰安市都在脚下,那种感觉真是飘飘然,真有种会当凌绝顶.一览城市小的感觉.  \n达到南天门,7点10分,从红门到南天门,用了3个小时10分钟,看网络上的攻略,夜爬需要5到6个小时.天已经黑了,然后就往天街那边去,准备吃点东西,奇怪的是,后来也没感觉到饿,就没吃,往前走,然后达到日观峰,有许多人搭起了帐篷,有更多的人租了军大衣冻得缩在一角闲聊.我达到日观峰之后,就到了日观峰一个店里,50元,一个座位,一晚上,里面有空调.我看许多人在那儿坐着,也就进去了.可能人多,老板忘了收我费.一晚上人来人往,楼上楼下,这个店接待了有一百多号人.这营业堪比几星级酒店.或许是爬上了泰山,太过兴奋,或许是人来往的,或许是门开开合合的,冷空气冻得,一个晚上没有什么睡意.跟来自五湖四海的朋友谈天说地,胡侃海谈.就这样熬了一晚上.(真应该去住旅馆,需要休息下)    \n第二天,凌晨5点多的时候,天已经蒙蒙亮了,也差不多是看日出的时候了,然后,带上口罩,背上包,就去了看日出了.真是人山人海,出来的时候,天边刚刚出现一条线,朝霞的颜色,异常漂亮.旁边的人,都租了军大衣,缩在大衣里面看日出,我穿的就是见小大衣,就没租军大衣,戴着口罩,背着包,就这样还是感觉到寒冷.  \n酝酿了许久,太阳露出了她的该有的形态,那一刻,整个泰山都沸腾了.为了这一刻,一夜没睡觉,我也是挺激动的.一切的美好都在这一刻.  \n看完泰山日出后,就往玉皇顶看看,人山人海,真是人挤人.半山腰,看见一群人围着\"五岳独尊\"那个石碑子在拍照,无语.  \n然后,吃了点东西,喝点水,就下山了.下山,但却,不知道路怎么走,本来计划的是不走原路返回,走桃花源到桃花峪那条路下山.一路走回去,一路问过去,走到天街那儿,许多从索道直接到达中天门,一部分人从索道知道桃花源,我沿着桃花源索道的方向,向前走去,一路上走走问问,走上路一条人烟稀少的路,走上路一条,我不敢相信这是一条上下山的路,走上了一条,我后来还想再走一次的路.下山的路分为两段,一段从天街到达桃花源停车场,可以坐车出去,一段从桃花源停车场到达桃花峪.从天街到达桃花源停车场,一段山路,人真的挺少,就见着三位下山的人,看见索道上倒是来来往往的.走在山间,空气真的挺好,吸了一个小时的氧气.到达桃花源停车之后,8点钟,还有4公里左右吧,达到桃花峪,算下时间,12点开往上海的车.来得及,就没用坐车去桃花峪,真是真确的选择,这一路上,是山间公路,两面都是山,公路旁边有条小溪,算是小河了,一路山清水秀,桃花盛开,真是美不胜收.走在路上,左脚跟鞋子有摩擦,感觉两只脚都快废了.还有在山间一个人狼嚎了一会儿,真是爽~  \n快到桃花峪的时候,哪儿的桃花更是美不胜收,人间仙境,从山上流下的溪水,形成了一个小湖,真想跳下去,洗个澡,哈哈...  \n桃花峪出来之后,也才10点多,休息了下,达不到车,就做公交,往泰安站去,实在太累了,在公交车上睡着了,睡得是真香,差点错过了站.到了站之后,需要转下公交,要到马路对面坐车,走到叫什么皇宫的对面,就看见我要做的车飘了过来.然后,叫了个滴滴,在等的时候,站着睡觉了.醉了~  \n好吧,顺利的到达泰安站,饿,看了一圈,也就肯德基吧,吃了个汉堡,真他妈难吃,去了趟泰山,吃了顿麦当劳,吃了顿肯德基,人才~  \n回去的高铁,睡了2个多小时就睡不着了,看着沿途的风景,听听歌,微微一笑~  \n到住的地方,一个人没有,洗了个澡,衣服往洗衣机一塞,看着也差不多吃饭了,吃了个便饭,看着时间还早,定了个电影票,看了\"蝙蝠袖大战超人\",烂片,差评.  \n就这样,清明,泰山之旅结束了,但是当天身上一点都不疼.第二天,我去,全身酸痛,走一步就疼,骑车上班去,就比人家走路快一丁点,看着别人一个一个地把我超了,超我自行车,擦.坐在办公司,走一步,疼一步,真是瘸了.那几天还是项目结尾阶段,事儿还不少吧.不过恢复能力超强的,三天后就没有痛感了.  \n好吧就这样吧,给自己好评\n\n","html":"<p>清明小长假第一天找好了房子,然后就去跟朋友乘车去了日照,转道去泰安,登山旅游.  朋友们都忙,一根人想出去走走,排解下...就太泰山了. <br />\n3号下午2点左右到的泰安,乘公交到岱庙,吃了个午饭(最好就在车站附近吃饭,岱庙那边真没什么吃的,我吃的麦当劳).买了张票,就去了岱庙.现场买票,网上没有得卖,还好队伍不是很长,等了几分钟. <br />\n大门,牌匾高高挂起,\"岱庙\"二字,有种古代城市大门的感觉.楼台挺高,听古朴.进去了之后,会有种历史沧桑感,亭榭院落,院落里面有神兽玄武,我看出来了,据说有四方神兽,只看出来一种,印象最为深刻的是,铜亭,古树,丁香花,整个亭子都是铜做出来的,听古朴,挺有历史感;古树,古侧柏数,得几人合抱才能抱的过来.历史的印记,活生生的印记,依旧绿意盎然.丁香花,盛开了,飘满整个岱庙,溢出岱庙......,对于皇帝居住的行宫,仙神,壁画之类的没什么太大的感触.不过有一点壁画损坏的太严重.看了一会儿之后,就感觉没有多么大的意思,然后就走路过去取了红门那边,准备登山.本来是准备夜爬泰山的,感觉夜爬泰山有点危险,自己是一个人,而且逛岱庙用的时间太少,就准备直接爬泰山. <br />\n从岱庙走到红门,花了点时间,到达红门的时候已经4点左右了.其中,路上买了2瓶红牛,2袋饼干,包里还有2瓶农夫三拳 ,就登山了,还买了件一次性雨衣,4元,被坑了,上山之后,一元一件. <br />\n想挑战下自己,全程步行登山,也体验下登山的乐趣.预备的路线是红门-->斗母宫-->中天门-->十八盘-->南天门-->天街-->玉皇顶-->日观峰看日出. <br />\n4点从红门触发,开始登山,这时候上下山的人挺多,一路上爬上去,人多就不说了,关键是灰尘怎么也这么多,四面的山光秃秃的,跟个荒山似的.顿时让人有点心灰意冷.没办法继续爬吧.网上买的票,直接刷身份证就过去了. <br />\n这一路上,感觉挺荒凉,都是有原因的,这种荒凉让你感觉的柳暗花明,豁然开朗,开始走的还挺快的,不一会儿就到了中天门,很多人是坐车到中天门,然后从中天门开始爬山了,如果仅仅是为了欣赏泰山的壮阔,美景......不喜欢泰山的荒凉,不喜欢挑战自己,可以考虑这条路线.简直是泰山人海.中天门,这里对于一些人来说是起点,有许多商家,可以在这里修整下.我直接就继续爬山了 <br />\n中天门可以说是泰山风景的一个分界点,中天门以上,你会发现那种壮阔,巍峨,不能说美丽,可以用雄伟来形容.看着那如通天般的阶梯,真是让人热血澎湃.中天门之后,就感觉到挺累了,而且,台阶特别的陡峭,这时候,就是这种专挑,15分钟左右休息了一次,大约就休息二三分钟吧,然后继续网上爬.快爬到十八盘的时候,天快黑了,可以在半山腰欣赏到泰山的那一抹晚霞,真是壮阔美丽.一路上奇石奇树挺多,有一条小溪,从天上来...... <br />\n到达南天门的时候,天已经黑了,然后,从南天门往下看,你会看到,整个泰安市都在脚下,那种感觉真是飘飘然,真有种会当凌绝顶.一览城市小的感觉. <br />\n达到南天门,7点10分,从红门到南天门,用了3个小时10分钟,看网络上的攻略,夜爬需要5到6个小时.天已经黑了,然后就往天街那边去,准备吃点东西,奇怪的是,后来也没感觉到饿,就没吃,往前走,然后达到日观峰,有许多人搭起了帐篷,有更多的人租了军大衣冻得缩在一角闲聊.我达到日观峰之后,就到了日观峰一个店里,50元,一个座位,一晚上,里面有空调.我看许多人在那儿坐着,也就进去了.可能人多,老板忘了收我费.一晚上人来人往,楼上楼下,这个店接待了有一百多号人.这营业堪比几星级酒店.或许是爬上了泰山,太过兴奋,或许是人来往的,或许是门开开合合的,冷空气冻得,一个晚上没有什么睡意.跟来自五湖四海的朋友谈天说地,胡侃海谈.就这样熬了一晚上.(真应该去住旅馆,需要休息下) <br />\n第二天,凌晨5点多的时候,天已经蒙蒙亮了,也差不多是看日出的时候了,然后,带上口罩,背上包,就去了看日出了.真是人山人海,出来的时候,天边刚刚出现一条线,朝霞的颜色,异常漂亮.旁边的人,都租了军大衣,缩在大衣里面看日出,我穿的就是见小大衣,就没租军大衣,戴着口罩,背着包,就这样还是感觉到寒冷. <br />\n酝酿了许久,太阳露出了她的该有的形态,那一刻,整个泰山都沸腾了.为了这一刻,一夜没睡觉,我也是挺激动的.一切的美好都在这一刻. <br />\n看完泰山日出后,就往玉皇顶看看,人山人海,真是人挤人.半山腰,看见一群人围着\"五岳独尊\"那个石碑子在拍照,无语. <br />\n然后,吃了点东西,喝点水,就下山了.下山,但却,不知道路怎么走,本来计划的是不走原路返回,走桃花源到桃花峪那条路下山.一路走回去,一路问过去,走到天街那儿,许多从索道直接到达中天门,一部分人从索道知道桃花源,我沿着桃花源索道的方向,向前走去,一路上走走问问,走上路一条人烟稀少的路,走上路一条,我不敢相信这是一条上下山的路,走上了一条,我后来还想再走一次的路.下山的路分为两段,一段从天街到达桃花源停车场,可以坐车出去,一段从桃花源停车场到达桃花峪.从天街到达桃花源停车场,一段山路,人真的挺少,就见着三位下山的人,看见索道上倒是来来往往的.走在山间,空气真的挺好,吸了一个小时的氧气.到达桃花源停车之后,8点钟,还有4公里左右吧,达到桃花峪,算下时间,12点开往上海的车.来得及,就没用坐车去桃花峪,真是真确的选择,这一路上,是山间公路,两面都是山,公路旁边有条小溪,算是小河了,一路山清水秀,桃花盛开,真是美不胜收.走在路上,左脚跟鞋子有摩擦,感觉两只脚都快废了.还有在山间一个人狼嚎了一会儿,真是爽~ <br />\n快到桃花峪的时候,哪儿的桃花更是美不胜收,人间仙境,从山上流下的溪水,形成了一个小湖,真想跳下去,洗个澡,哈哈... <br />\n桃花峪出来之后,也才10点多,休息了下,达不到车,就做公交,往泰安站去,实在太累了,在公交车上睡着了,睡得是真香,差点错过了站.到了站之后,需要转下公交,要到马路对面坐车,走到叫什么皇宫的对面,就看见我要做的车飘了过来.然后,叫了个滴滴,在等的时候,站着睡觉了.醉了~ <br />\n好吧,顺利的到达泰安站,饿,看了一圈,也就肯德基吧,吃了个汉堡,真他妈难吃,去了趟泰山,吃了顿麦当劳,吃了顿肯德基,人才~ <br />\n回去的高铁,睡了2个多小时就睡不着了,看着沿途的风景,听听歌,微微一笑~ <br />\n到住的地方,一个人没有,洗了个澡,衣服往洗衣机一塞,看着也差不多吃饭了,吃了个便饭,看着时间还早,定了个电影票,看了\"蝙蝠袖大战超人\",烂片,差评. <br />\n就这样,清明,泰山之旅结束了,但是当天身上一点都不疼.第二天,我去,全身酸痛,走一步就疼,骑车上班去,就比人家走路快一丁点,看着别人一个一个地把我超了,超我自行车,擦.坐在办公司,走一步,疼一步,真是瘸了.那几天还是项目结尾阶段,事儿还不少吧.不过恢复能力超强的,三天后就没有痛感了. <br />\n好吧就这样吧,给自己好评</p>","image":null,"featured":0,"page":0,"status":"published","language":"zh_CN","meta_title":null,"meta_description":null,"author_id":1,"created_at":1460372779875,"created_by":1,"updated_at":1460380292158,"updated_by":1,"published_at":1460380280507,"published_by":1},{"id":26,"uuid":"4cd7bbe7-f43d-4ebc-8722-241b523c6eb5","title":"google开发者工具使用","slug":"googlekai-fa-zhe-gong-ju-shi-yong","markdown":"自己对于google开发者工具使用的也是很浅显,主要是调整样式,调整bug是用它  \n在调整样式方面,你用google打开文件的时候,F12或ctrl+shift+i(j)或者右键审查元素,就可以进入.你可以在这里实时查看样式,然后打开elemets选项,右侧修改样式,可以实时看到样式的改变,同时,选中样式,右键可以有多重选项,在computed中,可以看见计算之后的样式的属性值.  \n调整bug的话,在sourse里面选择文件设置断点  \n可以把google当成一个编辑器或者ide,在sourse选项里面,可以再左侧右键,添加到workspace,然后添加的文件变色之后,就可以打开编辑,省去了调整样式之后,切换的步骤,可以提高些效率.在这里修改保存之后,相应的源文件,就会改变","html":"<p>自己对于google开发者工具使用的也是很浅显,主要是调整样式,调整bug是用它 <br />\n在调整样式方面,你用google打开文件的时候,F12或ctrl+shift+i(j)或者右键审查元素,就可以进入.你可以在这里实时查看样式,然后打开elemets选项,右侧修改样式,可以实时看到样式的改变,同时,选中样式,右键可以有多重选项,在computed中,可以看见计算之后的样式的属性值. <br />\n调整bug的话,在sourse里面选择文件设置断点 <br />\n可以把google当成一个编辑器或者ide,在sourse选项里面,可以再左侧右键,添加到workspace,然后添加的文件变色之后,就可以打开编辑,省去了调整样式之后,切换的步骤,可以提高些效率.在这里修改保存之后,相应的源文件,就会改变</p>","image":null,"featured":0,"page":0,"status":"published","language":"zh_CN","meta_title":null,"meta_description":null,"author_id":1,"created_at":1460380460511,"created_by":1,"updated_at":1460381118490,"updated_by":1,"published_at":1460381118490,"published_by":1},{"id":27,"uuid":"7c79bdc0-7002-41b1-b844-74c09896ad9a","title":"用css 添加手状样式,鼠标移上去变小手,变小手","slug":"yong-css-tian-jia-shou-zhuang-yang-shi-shu-biao-yi-shang-qu-bian-xiao-shou-bian-xiao-shou","markdown":"用css 添加手状样式,鼠标移上去变小手,变小手\n\ncursor:pointer;\n\n用JS使鼠标变小手onmouseover(鼠标越过的时候)\nonmouseover=\"this.style.cursor='hand'\"\n\ncursor其他取值  \nauto                    ：标准光标  \ndefault                 ：标准箭头  \npointer, hand                   ：手形光标  \nwait                     ：等待光标  \ntext                      ：I形光标  \nvertical-text          ：水平I形光标  \nno-drop                ：不可拖动光标  \nnot-allowed           ：无效光标  \nhelp                     ：帮助光标  \nall-scroll         ：三角方向标  \nmove                     ：移动标  \ncrosshair           ：十字标 \n\ne-resize  \nn-resize  \nnw-resize  \nw-resize  \ns-resize  \nse-resize  \nsw-resize\n\n来源:http://www.cnblogs.com/henw/archive/2011/04/29/2032516.html","html":"<p>用css 添加手状样式,鼠标移上去变小手,变小手</p>\n\n<p>cursor:pointer;</p>\n\n<p>用JS使鼠标变小手onmouseover(鼠标越过的时候)\nonmouseover=\"this.style.cursor='hand'\"</p>\n\n<p>cursor其他取值 <br />\nauto                    ：标准光标 <br />\ndefault                 ：标准箭头 <br />\npointer, hand                   ：手形光标 <br />\nwait                     ：等待光标 <br />\ntext                      ：I形光标 <br />\nvertical-text          ：水平I形光标 <br />\nno-drop                ：不可拖动光标 <br />\nnot-allowed           ：无效光标 <br />\nhelp                     ：帮助光标 <br />\nall-scroll         ：三角方向标 <br />\nmove                     ：移动标 <br />\ncrosshair           ：十字标 </p>\n\n<p>e-resize <br />\nn-resize <br />\nnw-resize <br />\nw-resize <br />\ns-resize <br />\nse-resize <br />\nsw-resize</p>\n\n<p>来源:<a href=\"http://www.cnblogs.com/henw/archive/2011/04/29/2032516.html\">http://www.cnblogs.com/henw/archive/2011/04/29/2032516.html</a></p>","image":null,"featured":0,"page":0,"status":"published","language":"zh_CN","meta_title":null,"meta_description":null,"author_id":1,"created_at":1461162818257,"created_by":1,"updated_at":1461162931229,"updated_by":1,"published_at":1461162924061,"published_by":1},{"id":28,"uuid":"107ac35e-305a-4827-8b42-a2dfe3ad776e","title":"行内元素与块级元素","slug":"xing-nei","markdown":"一、各种元素的width height margin padding 特性（具体css元素的分来参看二）\n1.块级元素\nwidth、 height、 margin的四个方向、 padding的四个方向都正常显示，遵循标准的css盒模型。例如：div\n\n2.行内替换元素\nwidth、 height、 margin的四个方向、 padding的四个方向都正常显示，遵循标准的css盒模型。 例如：img\n\n2.行内非替换元素（重点）\nwidth、 height不起作用，用line-height来控制高度。\n\npadding左右起作用，上下不会影响行高，但是对于有背景色和内边距的行内非替换元素，背景可以向元素上下延伸，但是行高没有改变。因此视觉效果就是与前面的行重叠。(《css权威指南》 P249)\n\nmargin左右作用起作用，上下不起作用，原因在于：行内非替换元素的外边距不会改变一个元素的行高（《css权威指南》 P227）。\n\n \n\n","html":"<p>一、各种元素的width height margin padding 特性（具体css元素的分来参看二）\n1.块级元素 <br />\nwidth、 height、 margin的四个方向、 padding的四个方向都正常显示，遵循标准的css盒模型。例如：div</p>\n\n<p>2.行内替换元素 <br />\nwidth、 height、 margin的四个方向、 padding的四个方向都正常显示，遵循标准的css盒模型。 例如：img</p>\n\n<p>2.行内非替换元素（重点） <br />\nwidth、 height不起作用，用line-height来控制高度。</p>\n\n<p>padding左右起作用，上下不会影响行高，但是对于有背景色和内边距的行内非替换元素，背景可以向元素上下延伸，但是行高没有改变。因此视觉效果就是与前面的行重叠。(《css权威指南》 P249)</p>\n\n<p>margin左右作用起作用，上下不起作用，原因在于：行内非替换元素的外边距不会改变一个元素的行高（《css权威指南》 P227）。</p>","image":null,"featured":0,"page":0,"status":"published","language":"zh_CN","meta_title":null,"meta_description":null,"author_id":1,"created_at":1461163594179,"created_by":1,"updated_at":1461163740650,"updated_by":1,"published_at":1461163740652,"published_by":1},{"id":29,"uuid":"ca818e42-b81a-4f7a-afbe-816cd9b40b07","title":"行内元素的特点","slug":"xing-nei-yuan-su-de-te-dian","markdown":"行内元素的特点：\n\n①和其他元素都在一行上；  \n②高，行高及外边距和内边距部分可改变；  \n③宽度只与内容有关；  \n④行内元素只能容纳文本或者其他行内元素。  \n\n不可以设置宽高，其宽度随着内容增加，高度随字体大小而改变，  \n内联元素可以设置外边界，但是外边界不对上下起作用，只能对左右起作用，  \n也可以设置内边界，但是内边界在ie6中不对上下起作用，只能对左右起作用","html":"<p>行内元素的特点：</p>\n\n<p>①和其他元素都在一行上； <br />\n②高，行高及外边距和内边距部分可改变； <br />\n③宽度只与内容有关； <br />\n④行内元素只能容纳文本或者其他行内元素。  </p>\n\n<p>不可以设置宽高，其宽度随着内容增加，高度随字体大小而改变， <br />\n内联元素可以设置外边界，但是外边界不对上下起作用，只能对左右起作用， <br />\n也可以设置内边界，但是内边界在ie6中不对上下起作用，只能对左右起作用</p>","image":null,"featured":0,"page":0,"status":"published","language":"zh_CN","meta_title":null,"meta_description":null,"author_id":1,"created_at":1461232872156,"created_by":1,"updated_at":1461556633037,"updated_by":1,"published_at":1461556633038,"published_by":1},{"id":30,"uuid":"835c4810-00f4-4cbb-af48-62b0eb94bdc9","title":"rem简洁的自适应使用","slug":"remde-shi-yong","markdown":"rem的一句话,使用它可以让你使用长度的地方,基于html的fontsize的值  \n比如说html的font-size:100px;你再次页面使用设置其他的为1rem,长度即为\n1*100px   \n所有说,我们改变在不同的设备,窗口使用不同的html的font-size就可以实现了自适应,而不需要使用media query来实现自适应  \n我们配合一段js,来使用,此段js就是设置html的font-size根据屏幕的宽度来自适应     `document.documentElement.style.fontSize=window.innerWidth/3.75 + 'px';  `  \n \n可能会有疑问,为什么设置为100px?为什么不设置为1px或者10px之类的?   \n这是因为,在html中,font-size值最小为12px,12px不方便计算,所有设置了100px,只要设置成12px以上就可以(包含12px)","html":"<p>rem的一句话,使用它可以让你使用长度的地方,基于html的fontsize的值 <br />\n比如说html的font-size:100px;你再次页面使用设置其他的为1rem,长度即为\n1*100px <br />\n所有说,我们改变在不同的设备,窗口使用不同的html的font-size就可以实现了自适应,而不需要使用media query来实现自适应 <br />\n我们配合一段js,来使用,此段js就是设置html的font-size根据屏幕的宽度来自适应     <code>document.documentElement.style.fontSize=window.innerWidth/3.75 + 'px';</code>  </p>\n\n<p>可能会有疑问,为什么设置为100px?为什么不设置为1px或者10px之类的? <br />\n这是因为,在html中,font-size值最小为12px,12px不方便计算,所有设置了100px,只要设置成12px以上就可以(包含12px)</p>","image":null,"featured":0,"page":0,"status":"published","language":"zh_CN","meta_title":null,"meta_description":null,"author_id":1,"created_at":1461677133255,"created_by":1,"updated_at":1461678299033,"updated_by":1,"published_at":1461678299034,"published_by":1},{"id":31,"uuid":"2b71db63-f8da-45eb-8e8f-9e75c33c8cfe","title":"前后端分离的理解,mvc,mvvm的理解","slug":"qian-hou-duan-fen-chi-de-li-jie-mvc-mvvmde-li-jie","markdown":"今天,请教了这些理解,立刻记下来  \n前后端分离:  \n在以前的写法中,比如说,在c#写后台的时候,前端的文件是asp文件,后端的文件有aspx文件,而且还有个类可以操纵前端的页面,具体的我对c#理解不深,不大清楚,按照此逻辑的话,前后端就没用实现分离.  \n前后端分离的话,前端跟后端只交互model也就是数据对象,不交互页面的一些东西.后端不控制前端的页面,后端写后端的页面,前端写前端的页面.他们之间仅仅交互数据实现前后端分离,不知道理解正不正确.  \nMVC  \nM:model  数据对象,就理解成数据就可以\nV:view   视图,可以理解成页面的模板,但是没有数据,有了model就可以成为页面\nC:controler  控制器,可以理解成把哪个model和显示在哪个view里面,再把页面的数据传递给model,view和model是不打交道的  \n在这里面最重要的就是,controler  具体关系如下图\n![](/content/images/2016/04/241345585123980.png)  \nmvvm,在前端,我们基本只和view model打交道,在这里,vm实现的是,如何让model更好的在view里面显示,可以定义多个model,可以定义多个view,新的view可以是其他的view组合而成的,这好像就是angularjs里面的注入依赖了. vm一句话就是处理数据","html":"<p>今天,请教了这些理解,立刻记下来 <br />\n前后端分离: <br />\n在以前的写法中,比如说,在c#写后台的时候,前端的文件是asp文件,后端的文件有aspx文件,而且还有个类可以操纵前端的页面,具体的我对c#理解不深,不大清楚,按照此逻辑的话,前后端就没用实现分离. <br />\n前后端分离的话,前端跟后端只交互model也就是数据对象,不交互页面的一些东西.后端不控制前端的页面,后端写后端的页面,前端写前端的页面.他们之间仅仅交互数据实现前后端分离,不知道理解正不正确. <br />\nMVC <br />\nM:model  数据对象,就理解成数据就可以 <br />\nV:view   视图,可以理解成页面的模板,但是没有数据,有了model就可以成为页面 <br />\nC:controler  控制器,可以理解成把哪个model和显示在哪个view里面,再把页面的数据传递给model,view和model是不打交道的 <br />\n在这里面最重要的就是,controler  具体关系如下图\n<img src=\"/content/images/2016/04/241345585123980.png\" alt=\"\" title=\"\" /> <br />\nmvvm,在前端,我们基本只和view model打交道,在这里,vm实现的是,如何让model更好的在view里面显示,可以定义多个model,可以定义多个view,新的view可以是其他的view组合而成的,这好像就是angularjs里面的注入依赖了. vm一句话就是处理数据</p>","image":null,"featured":0,"page":0,"status":"published","language":"zh_CN","meta_title":null,"meta_description":null,"author_id":1,"created_at":1461835315641,"created_by":1,"updated_at":1462203870916,"updated_by":1,"published_at":1462203870917,"published_by":1},{"id":32,"uuid":"d78ed0f3-da9a-45c6-bd73-d9eb1f3ac5e3","title":"2016 4月结束,5月开始","slug":"2016-4yue-jie-shu-5yue-kai-shi","markdown":"四月结束了,总体来说这一个月的状态挺好的,有目标,有计划.基本的一些也实现了,关于下个月以下想法  \n完善GTD时间管理,提高自己的效率.  \n完全熟悉knockout.js,自己能够独立书写mvvm,尽量让vm 与v分离.  \n完全进入 英文文档状态,查看所有的资料,直接看英文文档,提升自己的文档能力,永远看第一手资料  \n继续坚持走路  慢跑上下班,强健体魄,夏天来了,跟上来.  \n坚持每天一篇博客,及时更新,每天在22点钟写博客  \n使用GTD时间管理,在博客上写每日计划","html":"<p>四月结束了,总体来说这一个月的状态挺好的,有目标,有计划.基本的一些也实现了,关于下个月以下想法 <br />\n完善GTD时间管理,提高自己的效率. <br />\n完全熟悉knockout.js,自己能够独立书写mvvm,尽量让vm 与v分离. <br />\n完全进入 英文文档状态,查看所有的资料,直接看英文文档,提升自己的文档能力,永远看第一手资料 <br />\n继续坚持走路  慢跑上下班,强健体魄,夏天来了,跟上来. <br />\n坚持每天一篇博客,及时更新,每天在22点钟写博客 <br />\n使用GTD时间管理,在博客上写每日计划</p>","image":null,"featured":0,"page":0,"status":"published","language":"zh_CN","meta_title":null,"meta_description":null,"author_id":1,"created_at":1462203969809,"created_by":1,"updated_at":1462204693032,"updated_by":1,"published_at":1462204693033,"published_by":1},{"id":33,"uuid":"11dec164-a3ce-453b-9fee-be73478f08c0","title":"html基础补缺","slug":"htmlji-chu-bu-que","markdown":"1.注释,很少用,一般直接快捷键//  \n\n`<!-- html 注释 -->`  \n`/* css 注释 */`\n\n2 上下外边距会叠压  \n   最近遇到了这个无问题,相邻原色一个边距设置了margin-bottom:10px,一个设置了margin-top:10px;在开发者工具里面查看,只是2个元素间的距离只有10px;\n\n3.浅析SEO\nSEO ：搜索引擎优化；\n\n部分方法：\n\n　　a、页面标签语义化；\n\n　　b、使用对SEO有利的标签：h1/h2/h3/strong/em……\n\n　　c、提高页面关键词密度；\n\n　　d、……等等；\n\nSEM：搜索引擎营销；（包含SEO）\n\n4.块级元素和行内元素（block\\inline）\n\n　　块的特征：\n\n　　　　　　独占一行\n\n　　　　　　不设定宽度，宽度将撑满整行\n\n　　　　　　能设置所有样式\n\n　　行内原色的特征：\n\n　　　　　　默认同行可以继续跟同类型标签\n\n　　　　　　内容撑开宽度\n\n　　　　　　不支持宽高\n\n　　　　　　不支持上下的margin和padding\n\n　　　　　　空格或换行时，会出现空格，并且间隙不兼容（解决方案：给全局设置：font-size、font-family）\n\n　　块标签：div,h1-h6,p,ul,ol,li,dl,dd,dt\n\n　　内嵌标签：span,a,strong,em\n\n5 inline-block的特点和问题\n\n　　　　　　使块元素在一行显示\n\n　　　　　　使内嵌支持宽高\n\n　　　　　　换行被解析了\n\n　　　　　　不设置宽度的时候宽度由内容撑开\n\n           简单来说就是将对象呈现为inline对象，但是对象的内容作为block对象呈现。之后的内联对象会被排列在同一行内。比如我们可以给一个link（a元素）inline-block属性值，使其既具有block的宽度高度特性又具有inline的同行特性。\n6 前端规范\n　1）a标签不能嵌套a；爬过的坑,千万别嵌套,不然a标签闭合不收控制,文档结构会改变\n\n　2）内联元素不能嵌套块；\n\n　3）p,dt,h标签 里面不能嵌套块属性标签；有待验证??","html":"<p>1.注释,很少用,一般直接快捷键//  </p>\n\n<p><code>&lt;!-- html 注释 --&gt;</code> <br />\n<code>/* css 注释 */</code></p>\n\n<p>2 上下外边距会叠压 <br />\n   最近遇到了这个无问题,相邻原色一个边距设置了margin-bottom:10px,一个设置了margin-top:10px;在开发者工具里面查看,只是2个元素间的距离只有10px;</p>\n\n<p>3.浅析SEO <br />\nSEO ：搜索引擎优化；</p>\n\n<p>部分方法：</p>\n\n<p>　　a、页面标签语义化；</p>\n\n<p>　　b、使用对SEO有利的标签：h1/h2/h3/strong/em……</p>\n\n<p>　　c、提高页面关键词密度；</p>\n\n<p>　　d、……等等；</p>\n\n<p>SEM：搜索引擎营销；（包含SEO）</p>\n\n<p>4.块级元素和行内元素（block\\inline）</p>\n\n<p>　　块的特征：</p>\n\n<p>　　　　　　独占一行</p>\n\n<p>　　　　　　不设定宽度，宽度将撑满整行</p>\n\n<p>　　　　　　能设置所有样式</p>\n\n<p>　　行内原色的特征：</p>\n\n<p>　　　　　　默认同行可以继续跟同类型标签</p>\n\n<p>　　　　　　内容撑开宽度</p>\n\n<p>　　　　　　不支持宽高</p>\n\n<p>　　　　　　不支持上下的margin和padding</p>\n\n<p>　　　　　　空格或换行时，会出现空格，并且间隙不兼容（解决方案：给全局设置：font-size、font-family）</p>\n\n<p>　　块标签：div,h1-h6,p,ul,ol,li,dl,dd,dt</p>\n\n<p>　　内嵌标签：span,a,strong,em</p>\n\n<p>5 inline-block的特点和问题</p>\n\n<p>　　　　　　使块元素在一行显示</p>\n\n<p>　　　　　　使内嵌支持宽高</p>\n\n<p>　　　　　　换行被解析了</p>\n\n<p>　　　　　　不设置宽度的时候宽度由内容撑开</p>\n\n<pre><code>       简单来说就是将对象呈现为inline对象，但是对象的内容作为block对象呈现。之后的内联对象会被排列在同一行内。比如我们可以给一个link（a元素）inline-block属性值，使其既具有block的宽度高度特性又具有inline的同行特性。\n</code></pre>\n\n<p>6 前端规范 <br />\n　1）a标签不能嵌套a；爬过的坑,千万别嵌套,不然a标签闭合不收控制,文档结构会改变</p>\n\n<p>　2）内联元素不能嵌套块；</p>\n\n<p>　3）p,dt,h标签 里面不能嵌套块属性标签；有待验证??</p>","image":null,"featured":0,"page":0,"status":"published","language":"zh_CN","meta_title":null,"meta_description":null,"author_id":1,"created_at":1462275357340,"created_by":1,"updated_at":1462277964986,"updated_by":1,"published_at":1462277964987,"published_by":1},{"id":34,"uuid":"a158c7fa-b26e-4d4f-81b9-9401daaf7b3b","title":"如何写控件?如何达到控件的复用?","slug":"ru-he-xie-kong-jian-bing-qie-da-dao-kong-jian-de-fu-yong","markdown":"最近一段时间,由于项目的需要,一直在重构mui库,需要考虑到界面的实现,控件复用等;  \n写一个控件,首先需要对这个控件的dom节点弄清楚,先搭建好控件的整个dom节点,然后再根据已有的dom节点来一步一步从总体到细节,由上至下来实现你的控件.   \n由总体到细节的实现有个好处就是可以直接设置总体的样式,而不用设置细节的样式,减少代码,比如说使用padding或者margin直接设置包裹层的样式,而不用设置内部的样式,这样更容易维护以及不容易出错    \n使用的是scss来写的,先写能够在任何地方复用的部分,我称这些能够全部复用的为整体结构,然后再整体结构的基础上定义模式,比如我在重构mui的过程中定义了knx-li-line1,knx-li-line2,knx-li-line3一二三行模式,以后可以直接复用整体的结构,在复用整体的结构之后,如果已经有了符合你项目的模式,直接套用这个模式,如果没有,自己再定义一个模式  \n最后,到具体的内容的实现,比如说字体大小,可以定义全局的类,然后可以在任何地方使用,减少css代码,但是比如说float,margin,padding之类这些就写在模式里面,不用写在全局的类中影响复用,而且开发者对于没有经过定义的样式是熟悉的.","html":"<p>最近一段时间,由于项目的需要,一直在重构mui库,需要考虑到界面的实现,控件复用等; <br />\n写一个控件,首先需要对这个控件的dom节点弄清楚,先搭建好控件的整个dom节点,然后再根据已有的dom节点来一步一步从总体到细节,由上至下来实现你的控件. <br />\n由总体到细节的实现有个好处就是可以直接设置总体的样式,而不用设置细节的样式,减少代码,比如说使用padding或者margin直接设置包裹层的样式,而不用设置内部的样式,这样更容易维护以及不容易出错 <br />\n使用的是scss来写的,先写能够在任何地方复用的部分,我称这些能够全部复用的为整体结构,然后再整体结构的基础上定义模式,比如我在重构mui的过程中定义了knx-li-line1,knx-li-line2,knx-li-line3一二三行模式,以后可以直接复用整体的结构,在复用整体的结构之后,如果已经有了符合你项目的模式,直接套用这个模式,如果没有,自己再定义一个模式 <br />\n最后,到具体的内容的实现,比如说字体大小,可以定义全局的类,然后可以在任何地方使用,减少css代码,但是比如说float,margin,padding之类这些就写在模式里面,不用写在全局的类中影响复用,而且开发者对于没有经过定义的样式是熟悉的.</p>","image":null,"featured":0,"page":0,"status":"published","language":"zh_CN","meta_title":null,"meta_description":null,"author_id":1,"created_at":1462278903514,"created_by":1,"updated_at":1462280323609,"updated_by":1,"published_at":1462280323637,"published_by":1},{"id":35,"uuid":"dcd7b980-b396-4ff1-aff9-3b0b49f9e537","title":"left right使用","slug":"left-rightshi-yong","markdown":"left 和 top 只有在<strong>定位元素</strong>上才会起作用。\n定位：\nposition：static | relative | absolute | fixed\n默认值：static\n适用于：除display属性定义为table-column-group | table-column之外的所有元素。\nstatic：\n对象遵循常规流。此时4个定位偏移属性不会被应用。\nrelative：\n对象遵循常规流，并且参照自身在常规流中的位置通过top，right，bottom，left这4个定位偏移属性进行偏移时不会影响常规流中的任何元素。\nabsolute：\n对象脱离常规流，此时偏移属性参照的是离自身最近的定位祖先元素，如果没有定位的祖先元素，则一直回溯到body元素。盒子的偏移位置不影响常规流中的任何元素，其margin不与其他任何margin折叠。\nfixed：\n与absolute一致，但偏移定位是以窗口为参考。当出现滚动条时，对象不会随着滚动。\n当元素定位后，left就是修改到定位父级左边的距离，top就是修改到定位父级顶部的距离。","html":"<p>left 和 top 只有在<strong>定位元素</strong>上才会起作用。 <br />\n定位：\nposition：static | relative | absolute | fixed <br />\n默认值：static\n适用于：除display属性定义为table-column-group | table-column之外的所有元素。\nstatic： <br />\n对象遵循常规流。此时4个定位偏移属性不会被应用。\nrelative： <br />\n对象遵循常规流，并且参照自身在常规流中的位置通过top，right，bottom，left这4个定位偏移属性进行偏移时不会影响常规流中的任何元素。\nabsolute： <br />\n对象脱离常规流，此时偏移属性参照的是离自身最近的定位祖先元素，如果没有定位的祖先元素，则一直回溯到body元素。盒子的偏移位置不影响常规流中的任何元素，其margin不与其他任何margin折叠。\nfixed： <br />\n与absolute一致，但偏移定位是以窗口为参考。当出现滚动条时，对象不会随着滚动。\n当元素定位后，left就是修改到定位父级左边的距离，top就是修改到定位父级顶部的距离。</p>","image":null,"featured":0,"page":0,"status":"published","language":"zh_CN","meta_title":null,"meta_description":null,"author_id":1,"created_at":1462282346374,"created_by":1,"updated_at":1462370326317,"updated_by":1,"published_at":1462370326319,"published_by":1},{"id":36,"uuid":"51ab1ff5-2a22-4ff4-9e03-81a75489c382","title":"效率有点低下","slug":"xiao-lu-you-dian-di-xia","markdown":"很低下,怎么办.不知道脑子怎么想的,效率就是提不上去,有时候脑袋经常放空,经常想到哪儿做到哪儿  \ngtd时间管理,focus集中一件事做\n","html":"<p>很低下,怎么办.不知道脑子怎么想的,效率就是提不上去,有时候脑袋经常放空,经常想到哪儿做到哪儿 <br />\ngtd时间管理,focus集中一件事做</p>","image":null,"featured":0,"page":0,"status":"published","language":"zh_CN","meta_title":null,"meta_description":null,"author_id":1,"created_at":1462370512655,"created_by":1,"updated_at":1462370784329,"updated_by":1,"published_at":1462370784330,"published_by":1},{"id":37,"uuid":"7b8af22b-2d02-483e-9382-274f853f03be","title":"关于布局上的一些思考","slug":"guan-yu-bu-ju-shang-de-yi-xie-si-kao","markdown":"最近做的项目,其实一直都是UI方面的,零零碎碎的,回顾下整个页面的布局思路   \n第一 草图  \n   拿到设计稿之后第一步,根据设计稿画出大致的草图,先横向看,分为几个大致的div,比如div分为 header main footer,然后在这三个再进行横向或者纵向看,具体根据设计图来定,以此反复进行,再复杂的页面都可以使用,然后绘制出草图.  \n第二 内部排序  \n草图绘制完成之后,我们需要对各自的div内部进行排序,这时候最好尽可能多的使用margin padding属性来对齐,内容如果在正中心,不要设定特定的值,比如设定margin-left padding-left之类的来确定位置,可以使用margin:0 auto;来设置div居中,这需要给div设置一个固定宽度,如果是内容的话,可以使用line-height和父标签的height相同,可以使用align text-align vertical-align center属性来设置   \n第三 div自动撑起来  \ndiv随着内容的高度自动撑起来,好像不用设置高度,div自动撑起来,可以设置min-height,height:auto,然后注意float的影响.应该就可以了","html":"<p>最近做的项目,其实一直都是UI方面的,零零碎碎的,回顾下整个页面的布局思路 <br />\n第一 草图 <br />\n   拿到设计稿之后第一步,根据设计稿画出大致的草图,先横向看,分为几个大致的div,比如div分为 header main footer,然后在这三个再进行横向或者纵向看,具体根据设计图来定,以此反复进行,再复杂的页面都可以使用,然后绘制出草图. <br />\n第二 内部排序 <br />\n草图绘制完成之后,我们需要对各自的div内部进行排序,这时候最好尽可能多的使用margin padding属性来对齐,内容如果在正中心,不要设定特定的值,比如设定margin-left padding-left之类的来确定位置,可以使用margin:0 auto;来设置div居中,这需要给div设置一个固定宽度,如果是内容的话,可以使用line-height和父标签的height相同,可以使用align text-align vertical-align center属性来设置 <br />\n第三 div自动撑起来 <br />\ndiv随着内容的高度自动撑起来,好像不用设置高度,div自动撑起来,可以设置min-height,height:auto,然后注意float的影响.应该就可以了</p>","image":null,"featured":0,"page":0,"status":"published","language":"zh_CN","meta_title":null,"meta_description":null,"author_id":1,"created_at":1462452765855,"created_by":1,"updated_at":1462454034818,"updated_by":1,"published_at":1462454034819,"published_by":1},{"id":38,"uuid":"a9abcbf3-94ac-4d85-8969-e8658bba655e","title":"关于使用mvvm,konckoutjs初体验","slug":"guan-yu-shi-yong-mvvm-konckoutjschu-ti-yan","markdown":"knockoutjs具体的使用方法就不介绍了,可以直接看http://knockoutjs.com/documentation/style-binding.html 官方文档 \n对于整个页面如果使用了类似的mvvm框架,这样对于全球化,数据绑定等功能的使用有大益处  \n对于第一次使用knockoutjs有许多不懂的地方,请求带我的人,思维思路很清晰.  \n首先,你要把所有的数据准备好,如果不符合你的数据,请使用方法把数据处理好,整理好放在一个数组里面  \n其次你要写好所有的功能,比如事件,把所有的都模块化,一个模块一个模块的分好类,最好你先测试功能,看功能是否正常.  \n最后你才开始绑定数据.\n ","html":"<p>knockoutjs具体的使用方法就不介绍了,可以直接看<a href=\"http://knockoutjs.com/documentation/style-binding.html\">http://knockoutjs.com/documentation/style-binding.html</a> 官方文档 <br />\n对于整个页面如果使用了类似的mvvm框架,这样对于全球化,数据绑定等功能的使用有大益处 <br />\n对于第一次使用knockoutjs有许多不懂的地方,请求带我的人,思维思路很清晰. <br />\n首先,你要把所有的数据准备好,如果不符合你的数据,请使用方法把数据处理好,整理好放在一个数组里面 <br />\n其次你要写好所有的功能,比如事件,把所有的都模块化,一个模块一个模块的分好类,最好你先测试功能,看功能是否正常. <br />\n最后你才开始绑定数据.</p>","image":null,"featured":0,"page":0,"status":"published","language":"zh_CN","meta_title":null,"meta_description":null,"author_id":1,"created_at":1462540785401,"created_by":1,"updated_at":1462541398090,"updated_by":1,"published_at":1462541398091,"published_by":1},{"id":39,"uuid":"21a95e56-8e23-4512-a6d4-c99a24ac577d","title":"opacity透明度,margin 负值,","slug":"opacitytou-ming-du-margin-fu-zhi","markdown":"透明度:值0-1之间,默认为1,值与透明度成反比.  \nmargin负值,可以让此元素脱离原位置.","html":"<p>透明度:值0-1之间,默认为1,值与透明度成反比. <br />\nmargin负值,可以让此元素脱离原位置.</p>","image":null,"featured":0,"page":0,"status":"published","language":"zh_CN","meta_title":null,"meta_description":null,"author_id":1,"created_at":1462795540220,"created_by":1,"updated_at":1462795661704,"updated_by":1,"published_at":1462795661705,"published_by":1},{"id":40,"uuid":"8d160ca0-48d4-4811-809e-387bff5fc846","title":"效率太低","slug":"xiao-lu-tai-di","markdown":"是在是无法形容我的效率了,是在是太低了;  \n1 逻辑写下来\n2 将页面 html 与css js分离开,有必要的话,把 css js再细分,现在在一个上千行的页面里面找内容是在是太痛苦了.\n3 步骤写下来一步一步来,脑袋太容易开小差了.","html":"<p>是在是无法形容我的效率了,是在是太低了; <br />\n1 逻辑写下来 <br />\n2 将页面 html 与css js分离开,有必要的话,把 css js再细分,现在在一个上千行的页面里面找内容是在是太痛苦了. <br />\n3 步骤写下来一步一步来,脑袋太容易开小差了.</p>","image":null,"featured":0,"page":0,"status":"published","language":"zh_CN","meta_title":null,"meta_description":null,"author_id":1,"created_at":1463410272009,"created_by":1,"updated_at":1463410695366,"updated_by":1,"published_at":1463410677781,"published_by":1},{"id":41,"uuid":"dc28d63b-63b8-4d4d-a767-4c2382dbf507","title":"行内元素的问题","slug":"a","markdown":"今天遇到a标签有的长度和宽度,但使用调试工具,就是看不见里面的区域大小  \n最后解决,没有给a设置display:block;或者display:inline-block;  \n这是没有理解行内元素的特性,行内元素其width随着内容改变而改变,不能设置高度.","html":"<p>今天遇到a标签有的长度和宽度,但使用调试工具,就是看不见里面的区域大小 <br />\n最后解决,没有给a设置display:block;或者display:inline-block; <br />\n这是没有理解行内元素的特性,行内元素其width随着内容改变而改变,不能设置高度.</p>","image":null,"featured":0,"page":0,"status":"published","language":"zh_CN","meta_title":null,"meta_description":null,"author_id":1,"created_at":1463410703028,"created_by":1,"updated_at":1463411229503,"updated_by":1,"published_at":1463411229504,"published_by":1},{"id":42,"uuid":"f740b609-8ba2-4930-a8ff-2a5198b75069","title":"关于css选择器使用的思考","slug":"guan-yu-cssxuan-ze-qi-shi-yong-de-si-kao","markdown":"今天在做项目的时候,遇到这种情况: 动态生成代码如下  \n`<div>`  \n`<div></div>` \n`<div></div>`  \n`</div>`  \n这段代码会在多个对应的父元素`<div clas=\"a\"></div>`里面循环创建,创建的一次或二次数不定.根据条件来变,当创建二次的时候,需要再第一次创建的里面加一个boder:solid red 1px;  \n.a>div:first-type-of{  \nboder:solid red 1px;    \n}  \n.a>div:last-type-of{  \nboder:solid red 1px;    \n}  \n这样的话就会实现.  \n我们要知道,css样式布局背后的思维,css层叠样式,所有的样式是层叠的.后面的样式会覆盖前面的样式,我们在前面加了样式,在后面再移除,就可以达到这种效果.我们一般的思维都是给他加样式,而不会加了样式在移除.\n","html":"<p>今天在做项目的时候,遇到这种情况: 动态生成代码如下 <br />\n<code>&lt;div&gt;</code> <br />\n<code>&lt;div&gt;&lt;/div&gt;</code> \n<code>&lt;div&gt;&lt;/div&gt;</code> <br />\n<code>&lt;/div&gt;</code> <br />\n这段代码会在多个对应的父元素<code>&lt;div clas=\"a\"&gt;&lt;/div&gt;</code>里面循环创建,创建的一次或二次数不定.根据条件来变,当创建二次的时候,需要再第一次创建的里面加一个boder:solid red 1px; <br />\n.a>div:first-type-of{ <br />\nboder:solid red 1px; <br />\n} <br />\n.a>div:last-type-of{ <br />\nboder:solid red 1px; <br />\n} <br />\n这样的话就会实现. <br />\n我们要知道,css样式布局背后的思维,css层叠样式,所有的样式是层叠的.后面的样式会覆盖前面的样式,我们在前面加了样式,在后面再移除,就可以达到这种效果.我们一般的思维都是给他加样式,而不会加了样式在移除.</p>","image":null,"featured":0,"page":0,"status":"published","language":"zh_CN","meta_title":null,"meta_description":null,"author_id":1,"created_at":1463494656511,"created_by":1,"updated_at":1463497246690,"updated_by":1,"published_at":1463497246691,"published_by":1},{"id":43,"uuid":"aaf5701b-d982-4f7f-9545-1e8aeda3f7af","title":"css选择器,强大的css3选择器","slug":"css3qiang-da-de-xuan-ze-qi","markdown":"一 css1,css2选择器  \n1 CSS element+element 选择器: \n选择紧接在 `<div>` 元素之后的所有 `<p>` 元素。  \n实例:选择 `<div>` 元素之后紧跟的每个 `<p>` 元素，并设置其背景色：\ndiv+p\n{ \nbackground-color:yellow;\n}\n\n2 CSS [attribute] 选择器  \n[target] 选择带有 target 属性所有元素。  \na[target]\n{ \nbackground-color:yellow;\n}\n\n3 [attribute=value]  \n[target=_blank] 选择 target=\"_blank\" 的所有元素。 \n\n4 [attribute~=value]\t\n[title~=flower] 选择 title 属性包含单词 \"flower\" 的所有元素。\n\n5[attribute|=value] [lang|=en] 选择 lang 属性值以 \"en\" 开头的所有元素。  \n\n6:first-letter p:first-letter  选择每个` <p>` 元素的首字母。  \n\n7:first-line  \tp:first-line   \t选择每个 `<p>` 元素的首行。\n\n8:first-child  \tp:first-child  选择属于`父元素`的第一个子元素的每个 `<p> `元素。  注意是 p的父元素  \n\n9 :before  \tp:before \t在每个 `<p>` 元素的内容之前插入内容。\np:before\n{ \ncontent:\"台词：\";\n}  \n\n10:after p:after \t在每个 `<p>` 元素的内容之后插入内容。\n\n11:lang(language)\np:lang(en)\n{ \nbackground:yellow;\n}  \n`<p lang=\"en\">I live in Duckburg.</p>`\n\n二 CSS3 选择器\n1 element1~element2 p~ul 选择`<p> `元素后的每个 `<ul>` 元素。\n\n2[attribute^=value] \ta[src^=\"https\"] 选择其 src 属性值以 \"https\" 开头的每个 `<a>` 元素。\n\n3[attribute$=value]      a[src$=\".pdf\"]  选择其 src 属性以 \".pdf\" 结尾的所有 `<a>` 元素。\n\n4[attribute*=value]   a[src*=\"abc\"]     选择其 src 属性中包含 \"abc\" 子串的每个 `<a>` 元素。\n\n5:first-of-type  p:first-of-type  选择属于其父元素的首个 <p> 元素的每个 `<p>` 元素。\n\n6:last-of-type :only-of-type  :only-child\n\n7 :nth-child(n)  \tp:nth-child(2)  选择属于其父元素的第二个子元素的每个 `<p>` 元素。\n这个很重要如果根据计算来确定,基本可以多选特定的  \np:nth-child(2)\n{\nbackground:#ff0000;\n}\n\n在这里，我们为奇数和偶数 p 元素指定两种不同的背景色：\np:nth-child(odd)\n{\nbackground:#ff0000;\n}\np:nth-child(even)\n{\nbackground:#0000ff;\n}\n\n使用公式 (an + b)。描述：表示周期的长度，n 是计数器（从 0 开始），b 是偏移值。\n\np:nth-child(3n+0)\n{\nbackground:#ff0000;\n}\n\n8:nth-last-child(n)\n\n9:last-child\n\n10:root   :root  选择文档的根元素。\n\n11 :empty  \tp:empty  选择没有子元素的每个 <p> 元素（包括文本节点）。\n\n12 :target  \t#news:target  \t选择当前活动的 #news 元素。\n[w3c 介绍](http://www.w3school.com.cn/cssref/selector_target.asp)  \n\n13 :enabled \tinput:enabled  选择每个启用的`<input>` 元素。\n[w3c 介绍](http://www.w3school.com.cn/cssref/selector_enabled.asp)  \n\n14:disabled input:disabled 选择每个禁用的 `<input>` 元素 \n[w3c 介绍](http://www.w3school.com.cn/tiy/t.asp?f=css_sel_enabled_disabled)  \n\n15 :checked input:checked 选择每个被选中的 `<input> 元素`。只支持opera 浏览器\n\n16:not(selector) \t:not(p)  选择非 <p> 元素的每个元素。\n\n17::selection  \t::selection  选择被用户选取的元素部分。\n  \n\n\n\n","html":"<p>一 css1,css2选择器 <br />\n1 CSS element+element 选择器: <br />\n选择紧接在 <code>&lt;div&gt;</code> 元素之后的所有 <code>&lt;p&gt;</code> 元素。 <br />\n实例:选择 <code>&lt;div&gt;</code> 元素之后紧跟的每个 <code>&lt;p&gt;</code> 元素，并设置其背景色：\ndiv+p <br />\n{ \nbackground-color:yellow; <br />\n}</p>\n\n<p>2 CSS [attribute] 选择器 <br />\n[target] 选择带有 target 属性所有元素。 <br />\na[target] <br />\n{ \nbackground-color:yellow; <br />\n}</p>\n\n<p>3 [attribute=value] <br />\n[target=<em>blank] 选择 target=\"</em>blank\" 的所有元素。 </p>\n\n<p>4 [attribute~=value] <br />\n[title~=flower] 选择 title 属性包含单词 \"flower\" 的所有元素。</p>\n\n<p>5[attribute|=value] [lang|=en] 选择 lang 属性值以 \"en\" 开头的所有元素。  </p>\n\n<p>6:first-letter p:first-letter  选择每个<code>&lt;p&gt;</code> 元素的首字母。  </p>\n\n<p>7:first-line      p:first-line    选择每个 <code>&lt;p&gt;</code> 元素的首行。</p>\n\n<p>8:first-child      p:first-child  选择属于<code>父元素</code>的第一个子元素的每个 <code>&lt;p&gt;</code>元素。  注意是 p的父元素  </p>\n\n<p>9 :before      p:before    在每个 <code>&lt;p&gt;</code> 元素的内容之前插入内容。 <br />\np:before <br />\n{ \ncontent:\"台词：\"; <br />\n}  </p>\n\n<p>10:after p:after     在每个 <code>&lt;p&gt;</code> 元素的内容之后插入内容。</p>\n\n<p>11:lang(language) <br />\np:lang(en) <br />\n{ \nbackground:yellow; <br />\n} <br />\n<code>&lt;p lang=\"en\"&gt;I live in Duckburg.&lt;/p&gt;</code></p>\n\n<p>二 CSS3 选择器\n1 element1~element2 p~ul 选择<code>&lt;p&gt;</code>元素后的每个 <code>&lt;ul&gt;</code> 元素。</p>\n\n<p>2[attribute^=value]     a[src^=\"https\"] 选择其 src 属性值以 \"https\" 开头的每个 <code>&lt;a&gt;</code> 元素。</p>\n\n<p>3[attribute$=value]      a[src$=\".pdf\"]  选择其 src 属性以 \".pdf\" 结尾的所有 <code>&lt;a&gt;</code> 元素。</p>\n\n<p>4[attribute<em>=value]   a[src</em>=\"abc\"]     选择其 src 属性中包含 \"abc\" 子串的每个 <code>&lt;a&gt;</code> 元素。</p>\n\n<p>5:first-of-type  p:first-of-type  选择属于其父元素的首个 <p> 元素的每个 <code>&lt;p&gt;</code> 元素。</p>\n\n<p>6:last-of-type :only-of-type  :only-child</p>\n\n<p>7 :nth-child(n)      p:nth-child(2)  选择属于其父元素的第二个子元素的每个 <code>&lt;p&gt;</code> 元素。 <br />\n这个很重要如果根据计算来确定,基本可以多选特定的 <br />\np:nth-child(2) <br />\n{\nbackground:#ff0000; <br />\n}</p>\n\n<p>在这里，我们为奇数和偶数 p 元素指定两种不同的背景色：\np:nth-child(odd) <br />\n{\nbackground:#ff0000; <br />\n}\np:nth-child(even) <br />\n{\nbackground:#0000ff; <br />\n}</p>\n\n<p>使用公式 (an + b)。描述：表示周期的长度，n 是计数器（从 0 开始），b 是偏移值。</p>\n\n<p>p:nth-child(3n+0) <br />\n{\nbackground:#ff0000; <br />\n}</p>\n\n<p>8:nth-last-child(n)</p>\n\n<p>9:last-child</p>\n\n<p>10:root   :root  选择文档的根元素。</p>\n\n<p>11 :empty      p:empty  选择没有子元素的每个 <p> 元素（包括文本节点）。</p>\n\n<p>12 :target      #news:target    选择当前活动的 #news 元素。 <br />\n<a href=\"http://www.w3school.com.cn/cssref/selector_target.asp\">w3c 介绍</a>  </p>\n\n<p>13 :enabled     input:enabled  选择每个启用的<code>&lt;input&gt;</code> 元素。 <br />\n<a href=\"http://www.w3school.com.cn/cssref/selector_enabled.asp\">w3c 介绍</a>  </p>\n\n<p>14:disabled input:disabled 选择每个禁用的 <code>&lt;input&gt;</code> 元素 <br />\n<a href=\"http://www.w3school.com.cn/tiy/t.asp?f=css_sel_enabled_disabled\">w3c 介绍</a>  </p>\n\n<p>15 :checked input:checked 选择每个被选中的 <code>&lt;input&gt; 元素</code>。只支持opera 浏览器</p>\n\n<p>16:not(selector)     :not(p)  选择非 <p> 元素的每个元素。</p>\n\n<p>17::selection      ::selection  选择被用户选取的元素部分。</p>","image":null,"featured":0,"page":0,"status":"published","language":"zh_CN","meta_title":null,"meta_description":null,"author_id":1,"created_at":1463563912878,"created_by":1,"updated_at":1463569873409,"updated_by":1,"published_at":1463569873412,"published_by":1},{"id":44,"uuid":"2361d9c8-85fb-45e2-9830-67b3fae1707e","title":"knockoutjs","slug":"knockoutjs","markdown":"1 first example  \nHTML:\nThe name is `<span data-bind=\"text: personName\"></span>`  \nView Model:\n`var myViewModel = {\n    personName: 'Bob',\n    personAge: 123\n};`  \nScript:\n`ko.applyBindings(myViewModel,document.getElementById('someElementId'))`  \n This restricts the activation to the element with ID someElementId and its descendants, which is useful if you want to have multiple view models and associate each with a different region of the page.\n\n2 Observables\nHow can KO know when parts of your view model change? Answer: you need to declare your model properties as observables, because these are special JavaScript objects that can notify subscribers about changes, and can automatically detect dependencies.\n\n2.1 Reading and writing observables\nView Model:\n`var myViewModel = {\n    personName: ko.observable('Bob'),\n    personAge: ko.observable(123)\n};`  \n2.1.1 read\nTo read the observable’s current value, just call the observable with no parameters. \nIn this example, `myViewModel.personName()` will return 'Bob', and `myViewModel.personAge()` will return 123.  \n2.1.2 write  \nTo write a new value to the observable, call the observable and pass the new value as a parameter. For example, calling `myViewModel.personName('Mary')` will change the name value to 'Mary'.\n2.1.3  write values\nTo write values to multiple observable properties on a model object, you can use chaining syntax. For example, `myViewModel.personName('Mary').personAge(50)` will change the name value to 'Mary' and the age value to 50.  \n\n3 Explicitly subscribing to observables\n`myViewModel.personName.subscribe(function(newValue) {\n    alert(\"The person's new name is \" + newValue);\n});`  \nThe subscribe function accepts three parameters: callback is the function that is called whenever the notification happens, target (optional) defines the value of this in the callback function, and event (optional; default is \"change\") is the name of the event to receive notification for.\n\nYou can also terminate a subscription if you wish: first capture the return value as a variable, then you can call its dispose function, e.g.:\n`var subscription = myViewModel.personName.subscribe(function(newValue) { /* do stuff */ });// ...then later...\nsubscription.dispose(); // I no longer want notifications`\n\n4 Forcing observables to always notify subscribers\n However, it is possible to use the built-in notify extender to ensure that an observable’s subscribers are always notified on a write, even if the value is the same. You would apply the extender to an observable like this:\n`myViewModel.personName.extend({ notify: 'always' });`\n\n5 Delaying and/or suppressing change notifications\n`// Ensure it notifies about changes no more than once per 50-millisecond period\nmyViewModel.personName.extend({ rateLimit: 50 });`\n","html":"<p>1 first example <br />\nHTML: <br />\nThe name is <code>&lt;span data-bind=\"text: personName\"&gt;&lt;/span&gt;</code> <br />\nView Model: <br />\n<code>var myViewModel = {\n    personName: 'Bob',\n    personAge: 123\n};</code> <br />\nScript: <br />\n<code>ko.applyBindings(myViewModel,document.getElementById('someElementId'))</code> <br />\n This restricts the activation to the element with ID someElementId and its descendants, which is useful if you want to have multiple view models and associate each with a different region of the page.</p>\n\n<p>2 Observables <br />\nHow can KO know when parts of your view model change? Answer: you need to declare your model properties as observables, because these are special JavaScript objects that can notify subscribers about changes, and can automatically detect dependencies.</p>\n\n<p>2.1 Reading and writing observables <br />\nView Model: <br />\n<code>var myViewModel = {\n    personName: ko.observable('Bob'),\n    personAge: ko.observable(123)\n};</code> <br />\n2.1.1 read <br />\nTo read the observable’s current value, just call the observable with no parameters. <br />\nIn this example, <code>myViewModel.personName()</code> will return 'Bob', and <code>myViewModel.personAge()</code> will return 123. <br />\n2.1.2 write <br />\nTo write a new value to the observable, call the observable and pass the new value as a parameter. For example, calling <code>myViewModel.personName('Mary')</code> will change the name value to 'Mary'. <br />\n2.1.3  write values <br />\nTo write values to multiple observable properties on a model object, you can use chaining syntax. For example, <code>myViewModel.personName('Mary').personAge(50)</code> will change the name value to 'Mary' and the age value to 50.  </p>\n\n<p>3 Explicitly subscribing to observables <br />\n<code>myViewModel.personName.subscribe(function(newValue) {\n    alert(\"The person's new name is \" + newValue);\n});</code> <br />\nThe subscribe function accepts three parameters: callback is the function that is called whenever the notification happens, target (optional) defines the value of this in the callback function, and event (optional; default is \"change\") is the name of the event to receive notification for.</p>\n\n<p>You can also terminate a subscription if you wish: first capture the return value as a variable, then you can call its dispose function, e.g.: <br />\n<code>var subscription = myViewModel.personName.subscribe(function(newValue) { /* do stuff */ });// ...then later...\nsubscription.dispose(); // I no longer want notifications</code></p>\n\n<p>4 Forcing observables to always notify subscribers <br />\n However, it is possible to use the built-in notify extender to ensure that an observable’s subscribers are always notified on a write, even if the value is the same. You would apply the extender to an observable like this:\n<code>myViewModel.personName.extend({ notify: 'always' });</code></p>\n\n<p>5 Delaying and/or suppressing change notifications <br />\n<code>// Ensure it notifies about changes no more than once per 50-millisecond period\nmyViewModel.personName.extend({ rateLimit: 50 });</code></p>","image":null,"featured":0,"page":0,"status":"published","language":"zh_CN","meta_title":null,"meta_description":null,"author_id":1,"created_at":1463637354122,"created_by":1,"updated_at":1463754306418,"updated_by":1,"published_at":1463754306420,"published_by":1},{"id":45,"uuid":"9aa0f255-71d6-442a-b1de-7d44d07987a7","title":"border-radius","slug":"borde-radius","markdown":"遇到ul设置了border-radius,但是没有效果,后来发现是li里面的给覆盖了\n,把li也设置相同的border-radius就可以了","html":"<p>遇到ul设置了border-radius,但是没有效果,后来发现是li里面的给覆盖了\n,把li也设置相同的border-radius就可以了</p>","image":null,"featured":0,"page":0,"status":"published","language":"zh_CN","meta_title":null,"meta_description":null,"author_id":1,"created_at":1463664842287,"created_by":1,"updated_at":1463664893820,"updated_by":1,"published_at":1463664893821,"published_by":1},{"id":46,"uuid":"0030af71-3335-41c6-bf9c-747e99f27d44","title":"Working with observable arrays","slug":"working-with-observable-arrays","markdown":" KO’s observableArray has equivalent functions of its own, and they’re more useful because:  \n\n1 They work on all targeted browsers. (For example, the native JavaScript indexOf function doesn’t work on IE 8 or earlier, but KO’s indexOf works everywhere.)  \n2 For functions that modify the contents of the array, such as push and splice, KO’s methods automatically trigger the dependency tracking mechanism so that all registered listeners are notified of the change, and your UI is automatically updated.  \n3 The syntax is more convenient. To call KO’s push method, just write myObservableArray.push(...). This is slightly nicer than calling the underlying array’s push method by writing myObservableArray().push(...).\n\nindexOf\n\nThe indexOf function returns the index of the first array item that equals your parameter. For example, myObservableArray.indexOf('Blah') will return the zero-based index of the first array entry that equals Blah, or the value -1 if no matching value was found.","html":"<p>KO’s observableArray has equivalent functions of its own, and they’re more useful because:  </p>\n\n<p>1 They work on all targeted browsers. (For example, the native JavaScript indexOf function doesn’t work on IE 8 or earlier, but KO’s indexOf works everywhere.) <br />\n2 For functions that modify the contents of the array, such as push and splice, KO’s methods automatically trigger the dependency tracking mechanism so that all registered listeners are notified of the change, and your UI is automatically updated. <br />\n3 The syntax is more convenient. To call KO’s push method, just write myObservableArray.push(...). This is slightly nicer than calling the underlying array’s push method by writing myObservableArray().push(...).</p>\n\n<p>indexOf</p>\n\n<p>The indexOf function returns the index of the first array item that equals your parameter. For example, myObservableArray.indexOf('Blah') will return the zero-based index of the first array entry that equals Blah, or the value -1 if no matching value was found.</p>","image":null,"featured":0,"page":0,"status":"published","language":"zh_CN","meta_title":null,"meta_description":null,"author_id":1,"created_at":1463970102619,"created_by":1,"updated_at":1463974768707,"updated_by":1,"published_at":1463974768708,"published_by":1},{"id":47,"uuid":"35a76a28-05d5-4571-9f8d-443021e47374","title":"Computed Observables","slug":"computed-observables","markdown":"For example, given the following view model class,  \n`function AppViewModel() {\n    this.firstName = ko.observable('Bob');\n    this.lastName = ko.observable('Smith');\n}`  \n… you could add a computed observable to return the full name:  \n`function AppViewModel() {\n   // ... leave firstName and lastName unchanged ...\n   this.fullName = ko.computed(function() {\n        return this.firstName() + \" \" + this.lastName();\n    }, this);\n}`\n\nPure computed observables  \n`this.fullName = ko.pureComputed(function() {\n    return this.firstName() + \" \" + this.lastName();\n}, this);`\n\nForcing computed observables to always notify subscribers \n\nWhen a computed observable returns a primitive value (a number, string, boolean, or null), the dependencies of the observable are normally only notified if the value actually changed. However, it is possible to use the built-in notify extender to ensure that a computed observable’s subscribers are always notified on an update, even if the value is the same. You would apply the extender like this:\n\n`myViewModel.fullName = ko.pureComputed(function() {\n    return myViewModel.firstName() + \" \" + myViewModel.lastName();\n}).extend({ notify: 'always' });`","html":"<p>For example, given the following view model class, <br />\n<code>function AppViewModel() {\n    this.firstName = ko.observable('Bob');\n    this.lastName = ko.observable('Smith');\n}</code> <br />\n… you could add a computed observable to return the full name: <br />\n<code>function AppViewModel() {\n   // ... leave firstName and lastName unchanged ...\n   this.fullName = ko.computed(function() {\n        return this.firstName() + \" \" + this.lastName();\n    }, this);\n}</code></p>\n\n<p>Pure computed observables <br />\n<code>this.fullName = ko.pureComputed(function() {\n    return this.firstName() + \" \" + this.lastName();\n}, this);</code></p>\n\n<p>Forcing computed observables to always notify subscribers </p>\n\n<p>When a computed observable returns a primitive value (a number, string, boolean, or null), the dependencies of the observable are normally only notified if the value actually changed. However, it is possible to use the built-in notify extender to ensure that a computed observable’s subscribers are always notified on an update, even if the value is the same. You would apply the extender like this:</p>\n\n<p><code>myViewModel.fullName = ko.pureComputed(function() {\n    return myViewModel.firstName() + \" \" + myViewModel.lastName();\n}).extend({ notify: 'always' });</code></p>","image":null,"featured":0,"page":0,"status":"published","language":"zh_CN","meta_title":null,"meta_description":null,"author_id":1,"created_at":1463986329130,"created_by":1,"updated_at":1463993856251,"updated_by":1,"published_at":1463993856253,"published_by":1},{"id":48,"uuid":"9fb16078-e06b-4232-92a3-ba2e3c3fdafd","title":"The \"visible\" binding","slug":"bindings","markdown":"1 The \"visible\" binding\n`<div data-bind=\"visible: shouldShowMessage\">`  \nparameter:  \n false-like value (e.g., the boolean value false, or the numeric value 0, or null, or undefined), the binding sets yourElement.style.display to none  \ntrue-like value (e.g., the boolean value true, or a non-null object or array), the binding removes the yourElement.style.display value, causing it to become visible.\n\n\n`<div data-bind=\"visible: myValues().length > 0\">\n    You will see this message only when 'myValues' has at least one member.\n</div>\n <script type=\"text/javascript\">\n    var viewModel = {\n        myValues: ko.observableArray([]) // Initially empty, so message hidden\n    };\n    viewModel.myValues.push(\"some value\"); // Now visible\n</script>`","html":"<p>1 The \"visible\" binding <br />\n<code>&lt;div data-bind=\"visible: shouldShowMessage\"&gt;</code> <br />\nparameter: <br />\n false-like value (e.g., the boolean value false, or the numeric value 0, or null, or undefined), the binding sets yourElement.style.display to none <br />\ntrue-like value (e.g., the boolean value true, or a non-null object or array), the binding removes the yourElement.style.display value, causing it to become visible.</p>\n\n<p><code>&lt;div data-bind=\"visible: myValues().length &gt; 0\"&gt;\n    You will see this message only when 'myValues' has at least one member.\n&lt;/div&gt; <br />\n &lt;script type=\"text/javascript\"&gt;\n    var viewModel = {\n        myValues: ko.observableArray([]) // Initially empty, so message hidden\n    };\n    viewModel.myValues.push(\"some value\"); // Now visible\n&lt;/script&gt;</code></p>","image":null,"featured":0,"page":0,"status":"published","language":"zh_CN","meta_title":null,"meta_description":null,"author_id":1,"created_at":1464004780776,"created_by":1,"updated_at":1464005025746,"updated_by":1,"published_at":1464005025747,"published_by":1},{"id":49,"uuid":"7522d583-3c6f-461c-8c73-193cab2e8eb0","title":"The \"text\" binding","slug":"the-text-binding","markdown":"`Today's message is: <span data-bind=\"text: myMessage\"></span>\n<script type=\"text/javascript\">\n    var viewModel = {\n        myMessage: ko.observable() // Initially blank\n    };\n     viewModel.applyBindings(viewModel);//Initially view model\n    viewModel.myMessage(\"Hello, world!\"); // Text appears\n</script>`\n\nIf you supply something other than a number or a string (e.g., you pass an object or an array), the displayed text will be equivalent to yourParameter.toString()","html":"<p><code>Today's message is: &lt;span data-bind=\"text: myMessage\"&gt;&lt;/span&gt;\n&lt;script type=\"text/javascript\"&gt; <br />\n    var viewModel = {\n        myMessage: ko.observable() // Initially blank\n    };\n     viewModel.applyBindings(viewModel);//Initially view model\n    viewModel.myMessage(\"Hello, world!\"); // Text appears\n&lt;/script&gt;</code></p>\n\n<p>If you supply something other than a number or a string (e.g., you pass an object or an array), the displayed text will be equivalent to yourParameter.toString()</p>","image":null,"featured":0,"page":0,"status":"published","language":"zh_CN","meta_title":null,"meta_description":null,"author_id":1,"created_at":1464005923231,"created_by":1,"updated_at":1464009351427,"updated_by":1,"published_at":1464009351428,"published_by":1},{"id":50,"uuid":"aad83d43-84b4-4fac-9cc4-d18190af281d","title":"The \"css\" binding","slug":"the-css-binding","markdown":"Example with static classes  \n`<div data-bind=\"css: { profitWarning: currentProfit() < 0 }\">\n   Profit Information\n</div> \n<script type=\"text/javascript\">\n    var viewModel = {\n        currentProfit: ko.observable(150000) // Positive value, so initially we don't apply the \"profitWarning\" class\n    };\n    viewModel.currentProfit(-50); // Causes the \"profitWarning\" class to be applied\n</script>`\n\n\nExample with dynamic classes\n`<div data-bind=\"css: profitStatus\">\n   Profit Information\n</div>\n<script type=\"text/javascript\">\n    var viewModel = {\n        currentProfit: ko.observable(150000)\n    }; \n    // Evalutes to a positive value, so initially we apply the \"profitPositive\" class\n    viewModel.profitStatus = ko.pureComputed(function() {\n        return this.currentProfit() < 0 ? \"profitWarning\" : \"profitPositive\";\n    }, viewModel);\n    // Causes the \"profitPositive\" class to be removed and \"profitWarning\" class to be added\n    viewModel.currentProfit(-50);\n</script>`\n","html":"<p>Example with static classes <br />\n<code>&lt;div data-bind=\"css: { profitWarning: currentProfit() &lt; 0 }\"&gt;\n   Profit Information\n&lt;/div&gt; <br />\n&lt;script type=\"text/javascript\"&gt; <br />\n    var viewModel = {\n        currentProfit: ko.observable(150000) // Positive value, so initially we don't apply the \"profitWarning\" class\n    };\n    viewModel.currentProfit(-50); // Causes the \"profitWarning\" class to be applied\n&lt;/script&gt;</code></p>\n\n<p>Example with dynamic classes <br />\n<code>&lt;div data-bind=\"css: profitStatus\"&gt;\n   Profit Information\n&lt;/div&gt; <br />\n&lt;script type=\"text/javascript\"&gt; <br />\n    var viewModel = {\n        currentProfit: ko.observable(150000)\n    }; \n    // Evalutes to a positive value, so initially we apply the \"profitPositive\" class\n    viewModel.profitStatus = ko.pureComputed(function() {\n        return this.currentProfit() &lt; 0 ? \"profitWarning\" : \"profitPositive\";\n    }, viewModel);\n    // Causes the \"profitPositive\" class to be removed and \"profitWarning\" class to be added\n    viewModel.currentProfit(-50);\n&lt;/script&gt;</code></p>","image":null,"featured":0,"page":0,"status":"published","language":"zh_CN","meta_title":null,"meta_description":null,"author_id":1,"created_at":1464009358451,"created_by":1,"updated_at":1464010265874,"updated_by":1,"published_at":1464010265875,"published_by":1},{"id":51,"uuid":"24350438-3123-4268-931d-651ca5b022ee","title":"The \"html\" binding","slug":"the-html-binding","markdown":"`<div data-bind=\"html: details\"></div>\n<script type=\"text/javascript\">\n    var viewModel = {\n        details: ko.observable() // Initially blank\n    };\n    viewModel.details(\"<em>For further details, view the report <a href='report.html'>here</a>.</em>\"); // HTML content appears\n</script>`","html":"<p><code>&lt;div data-bind=\"html: details\"&gt;&lt;/div&gt;\n&lt;script type=\"text/javascript\"&gt; <br />\n    var viewModel = {\n        details: ko.observable() // Initially blank\n    };\n    viewModel.details(\"&lt;em&gt;For further details, view the report &lt;a href='report.html'&gt;here&lt;/a&gt;.&lt;/em&gt;\"); // HTML content appears\n&lt;/script&gt;</code></p>","image":null,"featured":0,"page":0,"status":"published","language":"zh_CN","meta_title":null,"meta_description":null,"author_id":1,"created_at":1464054322897,"created_by":1,"updated_at":1464054340608,"updated_by":1,"published_at":1464054340609,"published_by":1},{"id":52,"uuid":"13546ba6-708f-4d05-9d04-7fb70f6b1494","title":"The \"style\" binding","slug":"the-style-binding","markdown":"You can set multiple style values at once. For example, if  your view model already has a property called currentProfit, you viem model also want to has a property called isSevere.\n\n`<div data-bind=\"style: { color: currentProfit() < 0 ? 'red' : 'black', fontWeight: isSevere() ? 'bold' : '' }\">...</div>`\n\nNote: Applying styles whose names aren’t legal JavaScript variable names\n\nIf you want to apply a font-weight or text-decoration style, or any other style whose name isn’t a legal JavaScript identifier (e.g., because it contains a hyphen), you must use the JavaScript name for that style. For example,\n\n`Don’t write { font-weight: someValue }; do write { fontWeight: someValue }\nDon’t write { text-decoration: someValue }; do write { textDecoration: someValue }`","html":"<p>You can set multiple style values at once. For example, if  your view model already has a property called currentProfit, you viem model also want to has a property called isSevere.</p>\n\n<p><code>&lt;div data-bind=\"style: { color: currentProfit() &lt; 0 ? 'red' : 'black', fontWeight: isSevere() ? 'bold' : '' }\"&gt;...&lt;/div&gt;</code></p>\n\n<p>Note: Applying styles whose names aren’t legal JavaScript variable names</p>\n\n<p>If you want to apply a font-weight or text-decoration style, or any other style whose name isn’t a legal JavaScript identifier (e.g., because it contains a hyphen), you must use the JavaScript name for that style. For example,</p>\n\n<p><code>Don’t write { font-weight: someValue }; do write { fontWeight: someValue }\nDon’t write { text-decoration: someValue }; do write { textDecoration: someValue }</code></p>","image":null,"featured":0,"page":0,"status":"published","language":"zh_CN","meta_title":null,"meta_description":null,"author_id":1,"created_at":1464054769164,"created_by":1,"updated_at":1464055678525,"updated_by":1,"published_at":1464055678526,"published_by":1},{"id":53,"uuid":"9d5b134b-c91f-479c-9f4d-e9a9a52348e3","title":"The \"attr\" binding","slug":"the-attr-binding","markdown":"`<a data-bind=\"attr: { href: url, title: details }\">\n    Report\n</a>\n<script type=\"text/javascript\">\n    var viewModel = {\n        url: ko.observable(\"year-end.html\"),\n        details: ko.observable(\"Report including final year-end statistics\")\n    };\n</script>`\n\nNote: Applying attributes whose names aren’t legal JavaScript variable names\n\nIf you want to apply the attribute data-something, you can’t write this:\n`<div data-bind=\"attr: { data-something: someValue }\">...</div>`\n\n… because data-something isn’t a legal identifier name at that point. The solution is simple: just wrap the identifier name in quotes so that it becomes a string literal, which is legal in a JavaScript object literal. For example,  \n`<div data-bind=\"attr: { 'data-something': someValue }\">...</div>`\n","html":"<p><code>&lt;a data-bind=\"attr: { href: url, title: details }\"&gt;\n    Report\n&lt;/a&gt; <br />\n&lt;script type=\"text/javascript\"&gt; <br />\n    var viewModel = {\n        url: ko.observable(\"year-end.html\"),\n        details: ko.observable(\"Report including final year-end statistics\")\n    };\n&lt;/script&gt;</code></p>\n\n<p>Note: Applying attributes whose names aren’t legal JavaScript variable names</p>\n\n<p>If you want to apply the attribute data-something, you can’t write this: <br />\n<code>&lt;div data-bind=\"attr: { data-something: someValue }\"&gt;...&lt;/div&gt;</code></p>\n\n<p>… because data-something isn’t a legal identifier name at that point. The solution is simple: just wrap the identifier name in quotes so that it becomes a string literal, which is legal in a JavaScript object literal. For example, <br />\n<code>&lt;div data-bind=\"attr: { 'data-something': someValue }\"&gt;...&lt;/div&gt;</code></p>","image":null,"featured":0,"page":0,"status":"published","language":"zh_CN","meta_title":null,"meta_description":null,"author_id":1,"created_at":1464055991570,"created_by":1,"updated_at":1464058786567,"updated_by":1,"published_at":1464058786568,"published_by":1},{"id":54,"uuid":"be8486b5-b8ad-4dca-990b-46968019d6ed","title":"The \"foreach\" binding","slug":"the-foreach-binding","markdown":"Of course, you can arbitrarily nest any number of foreach bindings along with other control-flow bindings such as if and with.\nview:\n`<h4>People</h4><ul data-bind=\"foreach: people\">\n    <li>\n        Name at position <span data-bind=\"text: $index\"> </span>:\n       <span data-bind=\"text: name\"> </span>\n        <a href=\"#\" data-bind=\"click:                     $parent.removePerson\">Remove</a>\n    </li>\n</ul>\n<button data-bind=\"click: addPerson\">Add</button>`\n\nView model\n`function AppViewModel() {\n    var self = this; \n    self.people = ko.observableArray([\n        { name: 'Bert' },\n        { name: 'Charles' },\n        { name: 'Denise' }\n    ]);\n    self.addPerson = function() {\n        self.people.push({ name: \"New at \" + new Date() });\n    };\n    self.removePerson = function() {\n        self.people.remove(this);\n    }\n}\nko.applyBindings(new AppViewModel());`\n\n\nNote 3: Using “as” to give an alias to “foreach” items\n`<ul data-bind=\"foreach: { data: categories, as: 'category' }\">\n    <li>\n        <ul data-bind=\"foreach: { data: items, as: 'item' }\">\n            <li>\n                <span data-bind=\"text: category.name\"></span>:\n                <span data-bind=\"text: item\"></span>\n            </li>\n        </ul>\n    </li>\n</ul>\n<script>\n    var viewModel = {\n        categories: ko.observableArray([\n            { name: 'Fruit', items: [ 'Apple', 'Orange', 'Banana' ] },\n            { name: 'Vegetables', items: [ 'Celery', 'Corn', 'Spinach' ] }\n        ])\n    };\n    ko.applyBindings(viewModel);\n</script>`\n","html":"<p>Of course, you can arbitrarily nest any number of foreach bindings along with other control-flow bindings such as if and with. <br />\nview: <br />\n<code>&lt;h4&gt;People&lt;/h4&gt;&lt;ul data-bind=\"foreach: people\"&gt;\n    &lt;li&gt;\n        Name at position &lt;span data-bind=\"text: $index\"&gt; &lt;/span&gt;:\n       &lt;span data-bind=\"text: name\"&gt; &lt;/span&gt;\n        &lt;a href=\"#\" data-bind=\"click:                     $parent.removePerson\"&gt;Remove&lt;/a&gt;\n    &lt;/li&gt;\n&lt;/ul&gt; <br />\n&lt;button data-bind=\"click: addPerson\"&gt;Add&lt;/button&gt;</code></p>\n\n<p>View model <br />\n<code>function AppViewModel() {\n    var self = this; \n    self.people = ko.observableArray([\n        { name: 'Bert' },\n        { name: 'Charles' },\n        { name: 'Denise' }\n    ]);\n    self.addPerson = function() {\n        self.people.push({ name: \"New at \" + new Date() });\n    };\n    self.removePerson = function() {\n        self.people.remove(this);\n    }\n}\nko.applyBindings(new AppViewModel());</code></p>\n\n<p>Note 3: Using “as” to give an alias to “foreach” items <br />\n<code>&lt;ul data-bind=\"foreach: { data: categories, as: 'category' }\"&gt;\n    &lt;li&gt;\n        &lt;ul data-bind=\"foreach: { data: items, as: 'item' }\"&gt;\n            &lt;li&gt;\n                &lt;span data-bind=\"text: category.name\"&gt;&lt;/span&gt;:\n                &lt;span data-bind=\"text: item\"&gt;&lt;/span&gt;\n            &lt;/li&gt;\n        &lt;/ul&gt;\n    &lt;/li&gt;\n&lt;/ul&gt; <br />\n&lt;script&gt; <br />\n    var viewModel = {\n        categories: ko.observableArray([\n            { name: 'Fruit', items: [ 'Apple', 'Orange', 'Banana' ] },\n            { name: 'Vegetables', items: [ 'Celery', 'Corn', 'Spinach' ] }\n        ])\n    };\n    ko.applyBindings(viewModel);\n&lt;/script&gt;</code></p>","image":null,"featured":0,"page":0,"status":"published","language":"zh_CN","meta_title":null,"meta_description":null,"author_id":1,"created_at":1464058788949,"created_by":1,"updated_at":1464071861830,"updated_by":1,"published_at":1464071861832,"published_by":1},{"id":55,"uuid":"8d73ad35-fafb-4697-b83a-d8699c2391b4","title":"gulp 使用","slug":"gulp-shi-yong","markdown":"请直接看官网:  \nhttp://www.gulpjs.com.cn/\n","html":"<p>请直接看官网: <br />\n<a href=\"http://www.gulpjs.com.cn/\">http://www.gulpjs.com.cn/</a></p>","image":null,"featured":0,"page":0,"status":"published","language":"zh_CN","meta_title":null,"meta_description":null,"author_id":1,"created_at":1464163559314,"created_by":1,"updated_at":1464184675085,"updated_by":1,"published_at":1464184675085,"published_by":1},{"id":56,"uuid":"ba496e24-d421-45d3-8b49-0bb2186defbc","title":"底部对齐,水平居中","slug":"di-bu-chui-zhi-ju-zhong","markdown":"1 底部对齐,父元素position:relative;,子元素position:absolut;bottom:0;\n2 底部居中:看如下类: Absolute-Center\n<!DOCTYPE html>\n<html>\n\n\t<head>\n\t\t<meta charset=\"UTF-8\">\n\t\t<title></title>\n\t\t<style type=\"text/css\">\n\t\t\t.Absolute-Center {\n\t\t\t\tmargin: auto;\n\t\t\t\tposition: absolute;\n\t\t\t\tleft: 0;\n\t\t\t\tbottom: 0;\n\t\t\t\tright: 0;\n\t\t\t}\n\t\t</style>\n\t</head>\n\n\t<body>\n\t\t<div class=\"a\" style=\"width: 100%; height: 100px; background:blue;position:relative;align:bottom;\">\n\t\t\t<div class=\"Absolute-Center\" style=\" width: 50px; height: 50px; background: red;\"></div>\n\t\t</div>\n\t</body>\n\n</html>","html":"<p>1 底部对齐,父元素position:relative;,子元素position:absolut;bottom:0; <br />\n2 底部居中:看如下类: Absolute-Center <br />\n<!DOCTYPE html> <br />\n<html></p>\n\n<pre><code>&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;&lt;/title&gt;\n    &lt;style type=\"text/css\"&gt;\n        .Absolute-Center {\n            margin: auto;\n            position: absolute;\n            left: 0;\n            bottom: 0;\n            right: 0;\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n    &lt;div class=\"a\" style=\"width: 100%; height: 100px; background:blue;position:relative;align:bottom;\"&gt;\n        &lt;div class=\"Absolute-Center\" style=\" width: 50px; height: 50px; background: red;\"&gt;&lt;/div&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n</code></pre>\n\n<p></html></p>","image":null,"featured":0,"page":0,"status":"published","language":"zh_CN","meta_title":null,"meta_description":null,"author_id":1,"created_at":1464184697816,"created_by":1,"updated_at":1464185956870,"updated_by":1,"published_at":1464185250415,"published_by":1},{"id":57,"uuid":"54f200f9-e4c1-4706-b64f-c32e864a8d6b","title":"infosys毕业生进入流程","slug":"infosysbi-ye-sheng-jin-ru-liu-cheng","markdown":"根据同事所说记录:  \n1 考试,各个方面的考试\n2 英文面试\n3 有经验的leader来领导他们\n4 模拟项目一个月,流程 制度\n5 结束后,全英文考试合格之后,进入岗位,不合格重复或者被淘汰\n\n`百度百科\n员工培训\n第一部分是员工素养（Soft Skills）的培训。目的是提高员工的交流沟通能力，团队合作精神。SoftSkills的技能培训包括：如何建立有效的人际关系；社会伦理道德；社交礼仪和服饰；沟通技巧。\n第二部分是技术方面（TechnicalTraining）的培训。技术培训在第一部分培训的基础上进行，教学目标(Learning In The Stream)非常明确，通过技术流的学习使学员掌握。\nlnfosys把课程叫做Stream Courses，每一个Stream的课程分得很细，从基础到提高，课程前后顺序明确，连贯性很强。每个课程、课程的每个环节都有具体的考核点。课程体系从整体到部分，从宏观的构架到具体的程序、文档都有明确具体的规范。\nlnfosys的培训过程，是一个理论和实践相结合的过程，是Step By Step.时间顺序层层深入掌握知识的过程。在整个的教学过程中包含5种教学方式：\n课堂教学(Classroom Session)教学PPT由公司统一制作，教案的改进需担任该课程的所有教师一起讨论后制定出新的版本。\n*实验、作业教学(Lab Session)内部网上统一定制作业系统、项目试验体系和考试系统。\n*答疑(Problem based learning)。以教师现场答疑和在内部网论坛答疑等形式进行。\n*成功案例教学(Expert model)。以公司已完成的经典成功案例为题材，由教师在实践课上引导学生完成。\n*实际项目实践(POST project)。以公司已完成的经典成功案例为素材原型，学生在老师指导下团队完成。`\n\n","html":"<p>根据同事所说记录: <br />\n1 考试,各个方面的考试 <br />\n2 英文面试 <br />\n3 有经验的leader来领导他们 <br />\n4 模拟项目一个月,流程 制度 <br />\n5 结束后,全英文考试合格之后,进入岗位,不合格重复或者被淘汰</p>\n\n<p><code>百度百科\n员工培训\n第一部分是员工素养（Soft Skills）的培训。目的是提高员工的交流沟通能力，团队合作精神。SoftSkills的技能培训包括：如何建立有效的人际关系；社会伦理道德；社交礼仪和服饰；沟通技巧。\n第二部分是技术方面（TechnicalTraining）的培训。技术培训在第一部分培训的基础上进行，教学目标(Learning In The Stream)非常明确，通过技术流的学习使学员掌握。\nlnfosys把课程叫做Stream Courses，每一个Stream的课程分得很细，从基础到提高，课程前后顺序明确，连贯性很强。每个课程、课程的每个环节都有具体的考核点。课程体系从整体到部分，从宏观的构架到具体的程序、文档都有明确具体的规范。 <br />\nlnfosys的培训过程，是一个理论和实践相结合的过程，是Step By Step.时间顺序层层深入掌握知识的过程。在整个的教学过程中包含5种教学方式： <br />\n课堂教学(Classroom Session)教学PPT由公司统一制作，教案的改进需担任该课程的所有教师一起讨论后制定出新的版本。\n*实验、作业教学(Lab Session)内部网上统一定制作业系统、项目试验体系和考试系统。\n*答疑(Problem based learning)。以教师现场答疑和在内部网论坛答疑等形式进行。\n*成功案例教学(Expert model)。以公司已完成的经典成功案例为题材，由教师在实践课上引导学生完成。\n*实际项目实践(POST project)。以公司已完成的经典成功案例为素材原型，学生在老师指导下团队完成。</code></p>","image":null,"featured":0,"page":0,"status":"published","language":"zh_CN","meta_title":null,"meta_description":null,"author_id":1,"created_at":1464190199337,"created_by":1,"updated_at":1464190381183,"updated_by":1,"published_at":1464190381184,"published_by":1},{"id":58,"uuid":"a51d73d1-b722-408f-883d-9fab9deaa95f","title":"最近的一些思考","slug":"zui-jin-de-yi-xie-si-kao","markdown":"最近,团队方面出现了许多问题  \n1 开发流程严重滞后\n2 开发质量低下  \n3 工作量较大\n4 工具不会使用(后端开发前端),包括sass gulp 语法检查工具等\n5 测试工作量比开发大\n6 流程严重不规范\n\n建议:  \n1  规范流程\n2  放手,让下面的人去做,谁负责的部分,谁负责到底\n3  工具使用,控件使用,scss\n\n","html":"<p>最近,团队方面出现了许多问题 <br />\n1 开发流程严重滞后 <br />\n2 开发质量低下 <br />\n3 工作量较大 <br />\n4 工具不会使用(后端开发前端),包括sass gulp 语法检查工具等 <br />\n5 测试工作量比开发大 <br />\n6 流程严重不规范</p>\n\n<p>建议: <br />\n1  规范流程 <br />\n2  放手,让下面的人去做,谁负责的部分,谁负责到底 <br />\n3  工具使用,控件使用,scss</p>","image":null,"featured":0,"page":0,"status":"published","language":"zh_CN","meta_title":null,"meta_description":null,"author_id":1,"created_at":1464190392130,"created_by":1,"updated_at":1467194514874,"updated_by":1,"published_at":1467194514875,"published_by":1},{"id":59,"uuid":"4cc08528-6db1-4404-ae82-dedcf4a87e9c","title":"flex","slug":"flex","markdown":"一、Flex布局是什么？\nFlex是Flexible Box的缩写，意为\"弹性布局\"，用来为盒状模型提供最大的灵活性。\n注意，设为Flex布局以后，子元素的float、clear和vertical-align属性将失效。\n\n二、基本概念\n采用Flex布局的元素，称为Flex容器（flex container），简称\"容器\"。它的所有子元素自动成为容器成员，称为Flex项目（flex item），简称\"项目\"。\n![](/content/images/2016/06/bg2015071004.png)\n\n容器默认存在两根轴：水平的主轴（`main axis`）和垂直的交叉轴（`cross axis`）。主轴的开始位置（与边框的交叉点）叫做`main start`，结束位置叫做`main end`；交叉轴的开始位置叫做`cross start`，结束位置叫做`cross end`。\n项目默认沿主轴排列。单个项目占据的主轴空间叫做`main size`，占据的交叉轴空间叫做`cross size`。\n\n三、容器的属性\nflex-direction\nflex-wrap\nflex-flow\njustify-content\nalign-items\nalign-content\n\n3.1 flex-direction属性\nflex-direction属性决定主轴的方向（即项目的排列方向）。","html":"<p>一、Flex布局是什么？\nFlex是Flexible Box的缩写，意为\"弹性布局\"，用来为盒状模型提供最大的灵活性。 <br />\n注意，设为Flex布局以后，子元素的float、clear和vertical-align属性将失效。</p>\n\n<p>二、基本概念\n采用Flex布局的元素，称为Flex容器（flex container），简称\"容器\"。它的所有子元素自动成为容器成员，称为Flex项目（flex item），简称\"项目\"。\n<img src=\"/content/images/2016/06/bg2015071004.png\" alt=\"\" /></p>\n\n<p>容器默认存在两根轴：水平的主轴（<code>main axis</code>）和垂直的交叉轴（<code>cross axis</code>）。主轴的开始位置（与边框的交叉点）叫做<code>main start</code>，结束位置叫做<code>main end</code>；交叉轴的开始位置叫做<code>cross start</code>，结束位置叫做<code>cross end</code>。\n项目默认沿主轴排列。单个项目占据的主轴空间叫做<code>main size</code>，占据的交叉轴空间叫做<code>cross size</code>。</p>\n\n<p>三、容器的属性\nflex-direction <br />\nflex-wrap <br />\nflex-flow <br />\njustify-content <br />\nalign-items <br />\nalign-content</p>\n\n<p>3.1 flex-direction属性 <br />\nflex-direction属性决定主轴的方向（即项目的排列方向）。</p>","image":null,"featured":0,"page":0,"status":"published","language":"zh_CN","meta_title":null,"meta_description":null,"author_id":1,"created_at":1464942507169,"created_by":1,"updated_at":1467194529082,"updated_by":1,"published_at":1467194529084,"published_by":1},{"id":60,"uuid":"fa7b9d2a-b98c-4161-900d-47d0b2f95003","title":"JavaScript的作用域和块级作用域概念理解","slug":"javascriptde-zuo-yong-yu-he-kuai-ji-zuo-yong-yu-gai-nian-li-jie","markdown":"任何一对花括号中的语句集都属于一个块，在这之中定义的所有变量在代码块外都是不可见的，我们称之为块级作用域  \n\n\n作用域永远都是任何一门编程语言中的重中之重，因为它控制着变量与参数的可见性与生命周期。讲到这里，首先理解两个概念：块级作用域与函数作用域。\n什么是块级作用域呢？\n任何一对花括号（｛和｝）中的语句集都属于一个块，在这之中定义的所有变量在代码块外都是不可见的，我们称之为块级作用域。\n函数作用域就好理解了(*^__^*) ，定义在函数中的参数和变量在函数外部是不可见的。\n大多数类C语言都拥有块级作用域，JS却没有。请看下文demo:  \n//C语言   \n`#include <stdio.h> \nvoid main() \n{ \nint i=2; \ni--; \nif(i) \n{ \nint j=3; \n} \nprintf(\"%d/n\",j); \n} `\n\n运行这段代码，会出现“use an undefined variable:j”的错误。可以看到，C语言拥有块级作用域，因为j是在if的语句块中定义的，因此，它在块外是无法访问的。\n\n而JS是如何表现的呢，再看另一个demo:  \n`functin test(){ \nfor(var i=0;i<3;i++){ \n} \nalert(i); \n} \ntest();`\n\n运行这段代码，弹出\"3\"，可见，在块外，块中定义的变量i仍然是可以访问的。也就是说，JS并不支持块级作用域，它只支持函数作用域，而且在一个函数中的任何位置定义的变量在该函数中的任何地方都是可见的。\n\n那么我们该如何使JS拥有块级作用域呢？是否还记得，在一个函数中定义的变量，当这个函数调用完后，变量会被销毁，我们是否可以用这个特性来模拟出JS的块级作用域呢？看下面这个DEMO：\n`function test(){ \n(function (){ \nfor(var i=0;i<4;i++){ \n} \n})(); \nalert(i); \n} \ntest();`\n\n这时候再次运行，会弹出\"i\"未定义的错误，哈哈，实现了吧~~~这里，我们把for语句块放到了一个闭包之中，然后调用这个函数，当函数调用完毕，变量i自动销毁，因此，我们在块外便无法访问了。  \nJS的闭包特性is the most important feature((*^__^*) 大家懂的)。在JS中，为了防止命名冲突，我们应该尽量避免使用全局变量和全局函数。那么，该如何避免呢？不错，正如上文demo所示，我们可以把要定义的所有内容放入到一个\n`(function (){ \n//内容 \n})();`  \n之中，这时候，我们是不是相当于给它们的外层添加了一个函数作用域呢？该作用域之外的程序是无法访问它们的。\n\n函数作用域特性:变量声明提前, 初始化在原位置","html":"<p>任何一对花括号中的语句集都属于一个块，在这之中定义的所有变量在代码块外都是不可见的，我们称之为块级作用域  </p>\n\n<p>作用域永远都是任何一门编程语言中的重中之重，因为它控制着变量与参数的可见性与生命周期。讲到这里，首先理解两个概念：块级作用域与函数作用域。\n什么是块级作用域呢？\n任何一对花括号（｛和｝）中的语句集都属于一个块，在这之中定义的所有变量在代码块外都是不可见的，我们称之为块级作用域。\n函数作用域就好理解了(<em>^__^</em>) ，定义在函数中的参数和变量在函数外部是不可见的。\n大多数类C语言都拥有块级作用域，JS却没有。请看下文demo: <br />\n//C语言 <br />\n<code>#include &lt;stdio.h&gt; \nvoid main() <br />\n{ \nint i=2; <br />\ni--; <br />\nif(i) <br />\n{ \nint j=3; <br />\n} \nprintf(\"%d/n\",j); <br />\n}</code></p>\n\n<p>运行这段代码，会出现“use an undefined variable:j”的错误。可以看到，C语言拥有块级作用域，因为j是在if的语句块中定义的，因此，它在块外是无法访问的。</p>\n\n<p>而JS是如何表现的呢，再看另一个demo: <br />\n<code>functin test(){ \nfor(var i=0;i&lt;3;i++){ <br />\n} \nalert(i); <br />\n} \ntest();</code></p>\n\n<p>运行这段代码，弹出\"3\"，可见，在块外，块中定义的变量i仍然是可以访问的。也就是说，JS并不支持块级作用域，它只支持函数作用域，而且在一个函数中的任何位置定义的变量在该函数中的任何地方都是可见的。</p>\n\n<p>那么我们该如何使JS拥有块级作用域呢？是否还记得，在一个函数中定义的变量，当这个函数调用完后，变量会被销毁，我们是否可以用这个特性来模拟出JS的块级作用域呢？看下面这个DEMO：\n<code>function test(){ \n(function (){ \nfor(var i=0;i&lt;4;i++){ <br />\n} \n})(); \nalert(i); <br />\n} \ntest();</code></p>\n\n<p>这时候再次运行，会弹出\"i\"未定义的错误，哈哈，实现了吧~~~这里，我们把for语句块放到了一个闭包之中，然后调用这个函数，当函数调用完毕，变量i自动销毁，因此，我们在块外便无法访问了。 <br />\nJS的闭包特性is the most important feature((<em>^__^</em>) 大家懂的)。在JS中，为了防止命名冲突，我们应该尽量避免使用全局变量和全局函数。那么，该如何避免呢？不错，正如上文demo所示，我们可以把要定义的所有内容放入到一个 <br />\n<code>(function (){ \n//内容 \n})();</code> <br />\n之中，这时候，我们是不是相当于给它们的外层添加了一个函数作用域呢？该作用域之外的程序是无法访问它们的。</p>\n\n<p>函数作用域特性:变量声明提前, 初始化在原位置</p>","image":null,"featured":0,"page":0,"status":"published","language":"zh_CN","meta_title":null,"meta_description":null,"author_id":1,"created_at":1465692995411,"created_by":1,"updated_at":1501602183314,"updated_by":1,"published_at":1465693269713,"published_by":1},{"id":61,"uuid":"33e2b7b7-43e7-4009-940a-2b7ca9e4241f","title":"霍达《穆斯林的葬礼》","slug":"huo-da-mu-si-lin-de-zang-li","markdown":"已经是凌晨了，昨天刚刚看完了《穆斯林的葬礼》。  \n久久对于新月的死不能释怀。与其说是一部关于“玉”的历史（我是不赞同的），不如说是这是一部关于许多悲剧的故事，只能说在特定的历史时期，回回这个民族的矛盾、悲剧生活。战争的悲剧（抗日战争、第二次世界大战），穆斯林恶习的悲剧（回回只能嫁回回？），思维观念的悲剧（门当户对？），社会的悲剧（文化大革命）。  \n在这些悲剧的同时，也可以看见梁冰玉、韩新月、 楚雁潮三位鲜明的人物对于爱情的认知，对于探索人生的意义，对于自我价值实现等方面迸发出令人激动的火花。  \n在旅途中，观念总是在不断去完善。现在的路谈不上艰难，愿意付出全部的精力与努力，去拼搏一个自己想要过上的生活，去实现自己的人生价值，努力去改变世界上的一些事，心中想的一些梦想，如果可以做到，此生无憾。莫要被环境所影响，过一种简单的生活。对于爱情、婚姻、自我实现，期而遇。  \n人生挺短，且行且珍惜。","html":"<p>已经是凌晨了，昨天刚刚看完了《穆斯林的葬礼》。 <br />\n久久对于新月的死不能释怀。与其说是一部关于“玉”的历史（我是不赞同的），不如说是这是一部关于许多悲剧的故事，只能说在特定的历史时期，回回这个民族的矛盾、悲剧生活。战争的悲剧（抗日战争、第二次世界大战），穆斯林恶习的悲剧（回回只能嫁回回？），思维观念的悲剧（门当户对？），社会的悲剧（文化大革命）。 <br />\n在这些悲剧的同时，也可以看见梁冰玉、韩新月、 楚雁潮三位鲜明的人物对于爱情的认知，对于探索人生的意义，对于自我价值实现等方面迸发出令人激动的火花。 <br />\n在旅途中，观念总是在不断去完善。现在的路谈不上艰难，愿意付出全部的精力与努力，去拼搏一个自己想要过上的生活，去实现自己的人生价值，努力去改变世界上的一些事，心中想的一些梦想，如果可以做到，此生无憾。莫要被环境所影响，过一种简单的生活。对于爱情、婚姻、自我实现，期而遇。 <br />\n人生挺短，且行且珍惜。</p>","image":null,"featured":0,"page":0,"status":"published","language":"zh_CN","meta_title":null,"meta_description":null,"author_id":1,"created_at":1466155040601,"created_by":1,"updated_at":1468946773430,"updated_by":1,"published_at":1468946773431,"published_by":1},{"id":62,"uuid":"97c39bfc-524b-4032-b772-1f2dcc4144eb","title":"canvas 进度圆","slug":"canvas-hua-jin-du-tiao","markdown":"以前使用css3画了一个进度条,挺复杂的,而且有点瑕疵,使用canvas从新写了个,挺简单的,打那么如下:    \nHTML:\n`<canvas id=\"canvas\"></canvas>`\n\nJS:\n\n\n\t\t\tfunction process(canvasid, legth, process, innerLength,color) {\n\t\t\t\tvar canvas = document.getElementById(canvasid);\n\t\t\t\tvar context = canvas.getContext('2d');\n\t\t\t\tvar scale = window.devicePixelRatio;\n\t\t\t\tvar center = [legth / 2 * scale, legth / 2 * scale];\n\t\t\t\tcanvas.style.width = legth + \"px\";\n\t\t\t\tcanvas.style.height = legth + \"px\";\n\t\t\t\tcanvas.width = legth * scale;\n\t\t\t\tcanvas.height = legth * scale;\n\t\t\t\t//开始画一个灰色的圆\n\t\t\t\tcontext.beginPath();\n\t\t\t\tcontext.moveTo(center[0], center[1]);\n\t\t\t\tcontext.arc(center[0], center[1], center[0], 0, Math.PI * 2, false);\n\t\t\t\tcontext.closePath();\n\t\t\t\tcontext.fillStyle = '#e6e5e5';\n\t\t\t\tcontext.fill();\n\n\t\t\t\t/*画进度条*/\n\t\t\t\tif (process != 0 && process != 100) {\n\t\t\t\t\tcontext.beginPath();\n\t\t\t\t\tcontext.moveTo(center[0], center[1]);\n\t\t\t\t\tif (process < 25) {\n\t\t\t\t\t\tcontext.arc(center[0], center[1], center[0], Math.PI * 1.5, Math.PI * (1.5 + 0.5 * (process / 25)), false); //设置圆弧的起始于终止点\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcontext.arc(center[0], center[1], center[0], Math.PI * 1.5, Math.PI * 2 * ((process / 100) - 0.25), false); //设置圆弧的起始于终止点\n\t\t\t\t\t}\n\t\t\t\t\tcontext.closePath();\n\t\t\t\t\tcontext.fillStyle = color;\n\t\t\t\t\tcontext.fill();\n\t\t\t\t} else if (process == 100) {\n\t\t\t\t\tcontext.beginPath();\n\t\t\t\t\tcontext.moveTo(center[0], center[1]);\n\t\t\t\t\tcontext.arc(center[0], center[1], center[0], 0, Math.PI * 2, false); //设置圆弧的起始于终止点\n\t\t\t\t\tcontext.closePath();\n\t\t\t\t\tcontext.fillStyle = color;\n\t\t\t\t\tcontext.fill();\n\t\t\t\t}\n\t\t\t\t/*画中心空白*/\n\t\t\t\tcontext.beginPath();\n\t\t\t\tcontext.moveTo(center[0], center[1]);\n\t\t\t\tcontext.arc(center[0], center[1], innerLength / 2, 0, Math.PI * 2, true);\n\t\t\t\tcontext.closePath();\n\t\t\t\tcontext.fillStyle = 'rgba(255,255,255,1)';\n\t\t\t\tcontext.fill();\n\t\t\t}\n\t\t\tprocess(\"canvas\", 76, 59, 60,\"deepskyblue\");\n`","html":"<p>以前使用css3画了一个进度条,挺复杂的,而且有点瑕疵,使用canvas从新写了个,挺简单的,打那么如下: <br />\nHTML: <br />\n<code>&lt;canvas id=\"canvas\"&gt;&lt;/canvas&gt;</code></p>\n\n<p>JS:</p>\n\n<pre><code>        function process(canvasid, legth, process, innerLength,color) {\n            var canvas = document.getElementById(canvasid);\n            var context = canvas.getContext('2d');\n            var scale = window.devicePixelRatio;\n            var center = [legth / 2 * scale, legth / 2 * scale];\n            canvas.style.width = legth + \"px\";\n            canvas.style.height = legth + \"px\";\n            canvas.width = legth * scale;\n            canvas.height = legth * scale;\n            //开始画一个灰色的圆\n            context.beginPath();\n            context.moveTo(center[0], center[1]);\n            context.arc(center[0], center[1], center[0], 0, Math.PI * 2, false);\n            context.closePath();\n            context.fillStyle = '#e6e5e5';\n            context.fill();\n\n            /*画进度条*/\n            if (process != 0 &amp;&amp; process != 100) {\n                context.beginPath();\n                context.moveTo(center[0], center[1]);\n                if (process &lt; 25) {\n                    context.arc(center[0], center[1], center[0], Math.PI * 1.5, Math.PI * (1.5 + 0.5 * (process / 25)), false); //设置圆弧的起始于终止点\n                } else {\n                    context.arc(center[0], center[1], center[0], Math.PI * 1.5, Math.PI * 2 * ((process / 100) - 0.25), false); //设置圆弧的起始于终止点\n                }\n                context.closePath();\n                context.fillStyle = color;\n                context.fill();\n            } else if (process == 100) {\n                context.beginPath();\n                context.moveTo(center[0], center[1]);\n                context.arc(center[0], center[1], center[0], 0, Math.PI * 2, false); //设置圆弧的起始于终止点\n                context.closePath();\n                context.fillStyle = color;\n                context.fill();\n            }\n            /*画中心空白*/\n            context.beginPath();\n            context.moveTo(center[0], center[1]);\n            context.arc(center[0], center[1], innerLength / 2, 0, Math.PI * 2, true);\n            context.closePath();\n            context.fillStyle = 'rgba(255,255,255,1)';\n            context.fill();\n        }\n        process(\"canvas\", 76, 59, 60,\"deepskyblue\");\n</code></pre>\n\n<p>`</p>","image":null,"featured":0,"page":0,"status":"published","language":"zh_CN","meta_title":null,"meta_description":null,"author_id":1,"created_at":1466511750463,"created_by":1,"updated_at":1466512222984,"updated_by":1,"published_at":1466512089297,"published_by":1},{"id":63,"uuid":"1b9e811c-9442-47bd-a4e7-59c6128250c4","title":"写技术博客","slug":"xie-ji-zhu-bo-ke","markdown":"\n最近一直在思考如何去写技术性的博客,不知道给如何入手,以前写的博客都算是对自己的知识点的一些儿整合.现在,静下心来想想怎么写技术博客    \n### 一、写博客的原则\n只写有用的东西。\n### 二、写博客步骤。     \n* 思维清晰，有思维导图或者流程图\n* 根据导图流程图来实现博客的内容，做到条例清晰，内容明了，不增加读者的阅读成本\n* 最后贴出代码地址，为读者搭建好代码的环境，代码下载之后就可以使用。\n\n\n\n","html":"<p>最近一直在思考如何去写技术性的博客,不知道给如何入手,以前写的博客都算是对自己的知识点的一些儿整合.现在,静下心来想想怎么写技术博客    </p>\n\n<h3 id=\"\">一、写博客的原则</h3>\n\n<p>只写有用的东西。</p>\n\n<h3 id=\"\">二、写博客步骤。</h3>\n\n<ul>\n<li>思维清晰，有思维导图或者流程图</li>\n<li>根据导图流程图来实现博客的内容，做到条例清晰，内容明了，不增加读者的阅读成本</li>\n<li>最后贴出代码地址，为读者搭建好代码的环境，代码下载之后就可以使用。</li>\n</ul>","image":null,"featured":0,"page":0,"status":"published","language":"zh_CN","meta_title":null,"meta_description":null,"author_id":1,"created_at":1474462146552,"created_by":1,"updated_at":1480606758770,"updated_by":1,"published_at":1480606575742,"published_by":1},{"id":64,"uuid":"7a353ac8-0bce-480b-add0-865b2f5bc0fa","title":"对同一元素设置overflow-x:hidden,overflow-y:visible;属性值不生效","slug":"over","markdown":"作者：[孙志勇](http://www.sunzhiyong.cn) [微博](http://weibo.com/ysbpysbp)  \n日期：2016年12月5日      \n\n## 一、时效性\n所有信息都具有时效性。文章的价值，往往跟时间有很大关联。特别是技术类文章，请注意本文创建时间，如果本文过于久远，请读者酌情考量，莫要浪费时间。\n## 二、背景\n在一次开发过程中，对一个元素设置CSS `overflow-x: hidden;` and `overflow-y: visible;` ，理想状况下，在X轴超出部分隐藏，Y轴超出部分显示。然而，元素属性并没有生效。\n## 三、原因\n根据[W3C](https://www.w3.org/TR/css3-box/#overflow-x)的说法，如下\n> The computed values of ‘overflow-x’ and ‘overflow-y’ are the same as their specified values, except that some combinations with ‘visible’ are not possible: if one is specified as ‘visible’ and the other is ‘scroll’ or ‘auto’, then ‘visible’ is set to ‘auto’. The computed value of ‘overflow’ is equal to the computed value of ‘overflow-x’ if ‘overflow-y’ is the same; otherwise it is the pair of computed values of ‘overflow-x’ and ‘overflow-y’. \n   \n也就是说，如果同一个元素X,Y轴上，其中一个设置了`visible`，例外一个设置了`scoll`或者`auto`，这时候，`visible`属性自动转变为`auto`。\n\n## 四、解决方法\n在目标属性外，嵌套父层，一个设置`overflow-x: hidden;`另外一个设置， `overflow-y: visible;` 即可。\n\n\n## 五、参考链接 \n1. http://stackoverflow.com/questions/6421966/css-overflow-x-visible-and-overflow-y-hidden-causing-scrollbar-issue\n2. http://www.brunildo.org/test/Overflowxy2.html\n## 六、转载分享\n版权声明：自由转载-非商用-非衍生-保持署名[（创意共享3.0许可证](https://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh)）\n## 七、如果你觉得此文章对你有帮助，并且想为我买杯咖啡，请扫一扫下面，谢谢。\n微信  \n![微信](http://www.sunzhiyong.cn/content/images/2016/11/-----2016-11-28-22-39-16-2.png)\n支付宝  \n![支付宝](http://www.sunzhiyong.cn/content/images/2016/11/-----2016-11-28-22-39-37-1.png)\n","html":"<p>作者：<a href=\"http://www.sunzhiyong.cn\">孙志勇</a> <a href=\"http://weibo.com/ysbpysbp\">微博</a> <br />\n日期：2016年12月5日      </p>\n\n<h2 id=\"\">一、时效性</h2>\n\n<p>所有信息都具有时效性。文章的价值，往往跟时间有很大关联。特别是技术类文章，请注意本文创建时间，如果本文过于久远，请读者酌情考量，莫要浪费时间。</p>\n\n<h2 id=\"\">二、背景</h2>\n\n<p>在一次开发过程中，对一个元素设置CSS <code>overflow-x: hidden;</code> and <code>overflow-y: visible;</code> ，理想状况下，在X轴超出部分隐藏，Y轴超出部分显示。然而，元素属性并没有生效。</p>\n\n<h2 id=\"\">三、原因</h2>\n\n<p>根据<a href=\"https://www.w3.org/TR/css3-box/#overflow-x\">W3C</a>的说法，如下</p>\n\n<blockquote>\n  <p>The computed values of ‘overflow-x’ and ‘overflow-y’ are the same as their specified values, except that some combinations with ‘visible’ are not possible: if one is specified as ‘visible’ and the other is ‘scroll’ or ‘auto’, then ‘visible’ is set to ‘auto’. The computed value of ‘overflow’ is equal to the computed value of ‘overflow-x’ if ‘overflow-y’ is the same; otherwise it is the pair of computed values of ‘overflow-x’ and ‘overflow-y’. </p>\n</blockquote>\n\n<p>也就是说，如果同一个元素X,Y轴上，其中一个设置了<code>visible</code>，例外一个设置了<code>scoll</code>或者<code>auto</code>，这时候，<code>visible</code>属性自动转变为<code>auto</code>。</p>\n\n<h2 id=\"\">四、解决方法</h2>\n\n<p>在目标属性外，嵌套父层，一个设置<code>overflow-x: hidden;</code>另外一个设置， <code>overflow-y: visible;</code> 即可。</p>\n\n<h2 id=\"\">五、参考链接</h2>\n\n<ol>\n<li><a href=\"http://stackoverflow.com/questions/6421966/css-overflow-x-visible-and-overflow-y-hidden-causing-scrollbar-issue\">http://stackoverflow.com/questions/6421966/css-overflow-x-visible-and-overflow-y-hidden-causing-scrollbar-issue</a>  </li>\n<li><a href=\"http://www.brunildo.org/test/Overflowxy2.html\">http://www.brunildo.org/test/Overflowxy2.html</a>  </li>\n</ol>\n\n<h2 id=\"\">六、转载分享</h2>\n\n<p>版权声明：自由转载-非商用-非衍生-保持署名<a href=\"https://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh\">（创意共享3.0许可证</a>）</p>\n\n<h2 id=\"\">七、如果你觉得此文章对你有帮助，并且想为我买杯咖啡，请扫一扫下面，谢谢。</h2>\n\n<p>微信 <br />\n<img src=\"http://www.sunzhiyong.cn/content/images/2016/11/-----2016-11-28-22-39-16-2.png\" alt=\"微信\" />\n支付宝 <br />\n<img src=\"http://www.sunzhiyong.cn/content/images/2016/11/-----2016-11-28-22-39-37-1.png\" alt=\"支付宝\" /></p>","image":null,"featured":0,"page":0,"status":"published","language":"zh_CN","meta_title":null,"meta_description":null,"author_id":1,"created_at":1476064727587,"created_by":1,"updated_at":1481008739845,"updated_by":1,"published_at":1480948473387,"published_by":1},{"id":65,"uuid":"d27a608a-11de-4de3-81ea-e7aced21d3b3","title":"props 和 state的区别","slug":"the-difference-between-props-and-state","markdown":"作者：[孙志勇](http://www.sunzhiyong.cn) [微博](http://weibo.com/ysbpysbp)  \n日期：2016年11月29日      \n\n## 一、时效性\n所有信息都具有时效性。文章的价值，往往跟时间有很大关联。特别是技术类文章，请注意本文创建时间，如果本文过于久远，请读者酌情考量，莫要浪费时间。\n## 二、背景\n在学习React的过程中，频繁的跟props和state打交道，对于初学者来说，不知道什么情况下来使用它们有时候不知道在什么情况下来使用它们。\n## 三、区别\nprops和state之间是紧密相关的。**父组件的state**常常转变**子组件的props**成下面我们通过一个父子组件从上至下来分析它们。\n  \n假如我们有个父组件，可以在父组件的state里定义子组件的数据比如：  \n``` \nthis.setState({ childData: 'Child Data' });  \n```  \n紧接着，在父组件的`render()`方法里面，可以将父组件的`state`，作为子组件的`props`传递下去，如下\n```\n<Child data = {this.state.childData}/>\n```\n这样就可以父组件的`state`传递给子组件的`props`。从子组件的角度来看，`props`是不可变的。如何改变子组件的props？我们仅仅需要改变父组件内部的`state`即可，父组件的`state`改变之后，引起父组件重新渲染，在渲染的过程中，子组件的`data`变成父组件`this.state.childDtat`的值。这样父组件内部`state`改变，就会引起子组件的改变。\n\n这样就形成里从上而下的数据流，也就是React常说的单向数据流，这个“向”是向下。  \n我们常常利用这个原理更新子组件，从而衍生出一种模式，父组件：处理复杂的业务逻辑、交互以及数据等。子组件：称它为`Stateless`组件即无状态组件，只用作展示。在我们开发过程中，尽可能多个使用无状态组件，可以缕清业务之间的逻辑关系,提高渲染效率。\n\n如果子组件想要改变自身的`data`，这时候需要，父组件传递给子组件一个方法，改变父组件自身的`state`。  \n父组件：\n```\n<Child data={this.state.childData} handleChange={this.handelChildChange}></Child>\n```\n子组件接收父组件方法\n```\nlet Chilid = ({data,handleChange}) =>\n    <div onClick={handleChange}>{data.name}</div>\n```\n## 四、小结\n==props：==一般用于父组件向子组件通信，在组件之间通信使用。  \n==state：==一般用于组件内部的状态维护，更新组建内部的数据，状态，更新子组件的props等。\n## 五、完整代码\n父组件\n```\nimport React, {Component} from 'react';\n\nimport Child from './components/child'\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            childData: {name: 'child'}\n        };\n        this.handelChildChange = this.handelChildChange.bind(this);\n    }\n\n    handelChildChange(){\n        this.setState({\n            childData: {name: 'newChild'}\n        })\n    }\n    render() {\n        return (\n            <div style={{textAlign:'center'}}>\n                <Child data={this.state.childData} handleChange={this.handelChildChange}></Child>\n            </div>\n        );\n    }\n}\n\nexport default App;\n```\n\n子组件:这里使用无状态组件，解构赋值以及无状态组件使用父组件方法\n```\nimport React from 'react';\n\nlet Chilid = ({data,handleChange}) =>\n    <div onClick={handleChange}>{data.name}</div>\n\nexport default Chilid\n```\n\n\n\n## 六、参考链接 \n1. http://stackoverflow.com/questions/27991366/what-is-the-difference-between-state-and-props-in-react\n2. https://facebook.github.io/react/docs/state-and-lifecycle.html#the-data-flows-down\n\n## 七、转载分享\n版权声明：自由转载-非商用-非衍生-保持署名[（创意共享3.0许可证](https://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh)）\n## 八、如果你觉得此文章对你有帮助，并且想为我买杯咖啡，请扫一扫下面，谢谢。\n微信  \n![微信](http://www.sunzhiyong.cn/content/images/2016/11/-----2016-11-28-22-39-16-2.png)\n支付宝  \n![支付宝](http://www.sunzhiyong.cn/content/images/2016/11/-----2016-11-28-22-39-37-1.png)\n","html":"<p>作者：<a href=\"http://www.sunzhiyong.cn\">孙志勇</a> <a href=\"http://weibo.com/ysbpysbp\">微博</a> <br />\n日期：2016年11月29日      </p>\n\n<h2 id=\"\">一、时效性</h2>\n\n<p>所有信息都具有时效性。文章的价值，往往跟时间有很大关联。特别是技术类文章，请注意本文创建时间，如果本文过于久远，请读者酌情考量，莫要浪费时间。</p>\n\n<h2 id=\"\">二、背景</h2>\n\n<p>在学习React的过程中，频繁的跟props和state打交道，对于初学者来说，不知道什么情况下来使用它们有时候不知道在什么情况下来使用它们。</p>\n\n<h2 id=\"\">三、区别</h2>\n\n<p>props和state之间是紧密相关的。<strong>父组件的state</strong>常常转变<strong>子组件的props</strong>成下面我们通过一个父子组件从上至下来分析它们。</p>\n\n<p>假如我们有个父组件，可以在父组件的state里定义子组件的数据比如：  </p>\n\n<pre><code class=\"language- \">this.setState({ childData: 'Child Data' });  \n</code></pre>\n\n<p><br />\n紧接着，在父组件的<code>render()</code>方法里面，可以将父组件的<code>state</code>，作为子组件的<code>props</code>传递下去，如下</p>\n\n<pre><code>&lt;Child data = {this.state.childData}/&gt;  \n</code></pre>\n\n<p>这样就可以父组件的<code>state</code>传递给子组件的<code>props</code>。从子组件的角度来看，<code>props</code>是不可变的。如何改变子组件的props？我们仅仅需要改变父组件内部的<code>state</code>即可，父组件的<code>state</code>改变之后，引起父组件重新渲染，在渲染的过程中，子组件的<code>data</code>变成父组件<code>this.state.childDtat</code>的值。这样父组件内部<code>state</code>改变，就会引起子组件的改变。</p>\n\n<p>这样就形成里从上而下的数据流，也就是React常说的单向数据流，这个“向”是向下。 <br />\n我们常常利用这个原理更新子组件，从而衍生出一种模式，父组件：处理复杂的业务逻辑、交互以及数据等。子组件：称它为<code>Stateless</code>组件即无状态组件，只用作展示。在我们开发过程中，尽可能多个使用无状态组件，可以缕清业务之间的逻辑关系,提高渲染效率。</p>\n\n<p>如果子组件想要改变自身的<code>data</code>，这时候需要，父组件传递给子组件一个方法，改变父组件自身的<code>state</code>。 <br />\n父组件：</p>\n\n<pre><code>&lt;Child data={this.state.childData} handleChange={this.handelChildChange}&gt;&lt;/Child&gt;  \n</code></pre>\n\n<p>子组件接收父组件方法</p>\n\n<pre><code>let Chilid = ({data,handleChange}) =&gt;  \n    &lt;div onClick={handleChange}&gt;{data.name}&lt;/div&gt;\n</code></pre>\n\n<h2 id=\"\">四、小结</h2>\n\n<p><mark>props：</mark>一般用于父组件向子组件通信，在组件之间通信使用。 <br />\n<mark>state：</mark>一般用于组件内部的状态维护，更新组建内部的数据，状态，更新子组件的props等。</p>\n\n<h2 id=\"\">五、完整代码</h2>\n\n<p>父组件</p>\n\n<pre><code>import React, {Component} from 'react';\n\nimport Child from './components/child'  \nclass App extends Component {  \n    constructor(props) {\n        super(props);\n        this.state = {\n            childData: {name: 'child'}\n        };\n        this.handelChildChange = this.handelChildChange.bind(this);\n    }\n\n    handelChildChange(){\n        this.setState({\n            childData: {name: 'newChild'}\n        })\n    }\n    render() {\n        return (\n            &lt;div style={{textAlign:'center'}}&gt;\n                &lt;Child data={this.state.childData} handleChange={this.handelChildChange}&gt;&lt;/Child&gt;\n            &lt;/div&gt;\n        );\n    }\n}\n\nexport default App;  \n</code></pre>\n\n<p>子组件:这里使用无状态组件，解构赋值以及无状态组件使用父组件方法</p>\n\n<pre><code>import React from 'react';\n\nlet Chilid = ({data,handleChange}) =&gt;  \n    &lt;div onClick={handleChange}&gt;{data.name}&lt;/div&gt;\n\nexport default Chilid  \n</code></pre>\n\n<h2 id=\"\">六、参考链接</h2>\n\n<ol>\n<li><a href=\"http://stackoverflow.com/questions/27991366/what-is-the-difference-between-state-and-props-in-react\">http://stackoverflow.com/questions/27991366/what-is-the-difference-between-state-and-props-in-react</a>  </li>\n<li><a href=\"https://facebook.github.io/react/docs/state-and-lifecycle.html#the-data-flows-down\">https://facebook.github.io/react/docs/state-and-lifecycle.html#the-data-flows-down</a></li>\n</ol>\n\n<h2 id=\"\">七、转载分享</h2>\n\n<p>版权声明：自由转载-非商用-非衍生-保持署名<a href=\"https://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh\">（创意共享3.0许可证</a>）</p>\n\n<h2 id=\"\">八、如果你觉得此文章对你有帮助，并且想为我买杯咖啡，请扫一扫下面，谢谢。</h2>\n\n<p>微信 <br />\n<img src=\"http://www.sunzhiyong.cn/content/images/2016/11/-----2016-11-28-22-39-16-2.png\" alt=\"微信\" />\n支付宝 <br />\n<img src=\"http://www.sunzhiyong.cn/content/images/2016/11/-----2016-11-28-22-39-37-1.png\" alt=\"支付宝\" /></p>","image":null,"featured":0,"page":0,"status":"published","language":"zh_CN","meta_title":"props 和 state的区别 ","meta_description":"react中props 和 state的区别 ","author_id":1,"created_at":1476066844115,"created_by":1,"updated_at":1480949390774,"updated_by":1,"published_at":1480432180926,"published_by":1},{"id":68,"uuid":"82f335de-6c6a-432b-a9ef-2c8f5998e998","title":"博客模板","slug":"bo-ke-mo-ban","markdown":"作者：[孙志勇](http://www.sunzhiyong.cn) [微博](http://weibo.com/ysbpysbp)  \n日期：2016年12月6日      \n\n## 一、时效性\n所有信息都具有时效性。文章的价值，往往跟时间有很大关联。特别是技术类文章，请注意本文创建时间，如果本文过于久远，请读者酌情考量，莫要浪费时间。\n## 二、背景\n创建的原因等\n## 三、原因\n创建的原因等\n## 四、解决方法\n创建的原因等\n\n\n## 十一、参考链接 \n1. http://www.ruanyifeng.com/blog/2015/03/react.html\n2. 到达\n3. 到达\n## 十二、转载分享\n版权声明：自由转载-非商用-非衍生-保持署名[（创意共享3.0许可证](https://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh)）\n## 十三、如果你觉得此文章对你有帮助，并且想为我买杯咖啡，请扫一扫下面，谢谢。\n微信  \n![微信](http://www.sunzhiyong.cn/content/images/2016/11/-----2016-11-28-22-39-16-2.png)\n支付宝  \n![支付宝](http://www.sunzhiyong.cn/content/images/2016/11/-----2016-11-28-22-39-37-1.png)\n\n\n\n\n","html":"<p>作者：<a href=\"http://www.sunzhiyong.cn\">孙志勇</a> <a href=\"http://weibo.com/ysbpysbp\">微博</a> <br />\n日期：2016年12月6日      </p>\n\n<h2 id=\"\">一、时效性</h2>\n\n<p>所有信息都具有时效性。文章的价值，往往跟时间有很大关联。特别是技术类文章，请注意本文创建时间，如果本文过于久远，请读者酌情考量，莫要浪费时间。</p>\n\n<h2 id=\"\">二、背景</h2>\n\n<p>创建的原因等</p>\n\n<h2 id=\"\">三、原因</h2>\n\n<p>创建的原因等</p>\n\n<h2 id=\"\">四、解决方法</h2>\n\n<p>创建的原因等</p>\n\n<h2 id=\"\">十一、参考链接</h2>\n\n<ol>\n<li><a href=\"http://www.ruanyifeng.com/blog/2015/03/react.html\">http://www.ruanyifeng.com/blog/2015/03/react.html</a>  </li>\n<li>到达  </li>\n<li>到达  </li>\n</ol>\n\n<h2 id=\"\">十二、转载分享</h2>\n\n<p>版权声明：自由转载-非商用-非衍生-保持署名<a href=\"https://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh\">（创意共享3.0许可证</a>）</p>\n\n<h2 id=\"\">十三、如果你觉得此文章对你有帮助，并且想为我买杯咖啡，请扫一扫下面，谢谢。</h2>\n\n<p>微信 <br />\n<img src=\"http://www.sunzhiyong.cn/content/images/2016/11/-----2016-11-28-22-39-16-2.png\" alt=\"微信\" />\n支付宝 <br />\n<img src=\"http://www.sunzhiyong.cn/content/images/2016/11/-----2016-11-28-22-39-37-1.png\" alt=\"支付宝\" /></p>","image":null,"featured":0,"page":0,"status":"draft","language":"zh_CN","meta_title":"","meta_description":"","author_id":1,"created_at":1480339217873,"created_by":1,"updated_at":1485428694814,"updated_by":1,"published_at":null,"published_by":null},{"id":69,"uuid":"3b25bc50-5401-4e25-b5e0-7a3fbce0b8ac","title":"2016年终总结","slug":"2016","markdown":"作者：[孙志勇](http://www.sunzhiyong.cn) [微博](http://weibo.com/ysbpysbp)  \n日期：2016年12月3日      \n\n## 一、背景\n一直以来，自我感觉，有目标，但是对于具体实现的过程，并没有清晰的短期目标，以及短期目标实现的具体步骤。  \n趁此机会，静下心来剖析一下自己。看看自身的问题、优势，总结下2106，计划下2017。\n## 二、2016我干了啥\n\n* sass，less\n*  Konckout框架 \n* 看完一遍Javascript权威指南\n* 熟悉了Node\n* React框架\n* Redux框架\n* 熟悉了ES6、7\n* 适应了==分解问题==思维，适应了==组件化==\n* \n\n* 与设计师确定公司的设计体系，基于less字体库，色系等。\n* 封装可以==定制化==的，==不影响全局==的React组件\n* 对React框架内的代码性能进行优化，==Stateless component== => ==PureComponent== => ==Component(shouldUpdateComponent)==\n* stateless组件大量使用\n* 兼容性写法，代码健壮性思考\n\n## 三、2016不足之处\n* GTD时间管理不足\n* 执行力不足\n* 对代码质量追求不求  \n* 适应环境较慢\n* 语义化CSS \n* 对公用方法使用的不足\n* FQ不稳定\n* 对自己的代码管理不足\n* 没有深究背后原理\n* 想的太多，==Just do it,so TM what？==\n\n* ==2016，混乱，杂序无章，为技术而技术，为业务而业务==\n## 四、2016程序小事例\n小事例：CSS兼容写法。  \n\n* copy\n```\n  -webkit-transform-origin:@val;\n  -moz-transform-origin:@val;\n  -ms-transform-origin:@val;\n  -o-transform-origin:@val;\n  transform-origin:@val;\n```\n* mixin初级版\n``` less\n.transform-pre(@val){\n  -webkit-transform-origin:@val;\n  -moz-transform-origin:@val;\n  -ms-transform-origin:@val;\n  -o-transform-origin:@val;\n  transform-origin:@val;\n}\n```\n* mixin中级版\n```\n.pre(@style,@value) {\n  -webkit-@{style}: @value;\n  -moz-@{style}: @value;\n  -ms-@{style}: @value;\n  -o-@{style}: @value;\n    @{style}: @value;\n}\n```\n* mixin高级版\n```\n...？？？\n```\n* CSS后处理器：\n[autoprefixer](https://github.com/postcss/autoprefixer)\n```\na {\n    display: flex;\n}\n```\n```\na {\n    display: -webkit-box;\n    display: -webkit-flex;\n    display: -ms-flexbox;\n    display: flex\n}\n\n```\n\n* 《西部世界》：机器人写代码（代码写代码）\n\n\n* ==**消除重复劳动**==\n## 五、2017计划，基于 ==**消除重复劳动**==的两点想法\n\n* ==**less is more** ==\n* 公司设计体系的优化、维护及管理：less变量优化、维护及管理\n* Less Mixin复用\n* React核心点之一：==Component-Based==，组件复用\n* 方法的通用性：==函数式方法==\n\n*  ==**团队协作**==现在的沟通成本有点高\n* 减少不必要沟通：==团队内部==，希望推广一种编程范式\n* ==函数式方法== => ==编程范式：函数式编程==\n* underscore\n* redux源码\n* 组件、方法没有副作用\n* 相互独立而又紧密结合\n\n* 减少不必要沟通：==团队外部==\n* ==沟通：==依靠设计师的标注？试试[Zeplin](https://zeplin.io/)吧\n* ==沟通：==交互设计，试试[Axure RP](http://)\n* 怎么跟设计部门沟通？\n* 怎么跟后台部门沟通？\n* 怎么跟测试部门沟通？\n* 考虑下==团队协作工具？==钉钉？teambition？\n\n* ==**其它**==\n* GTD时间管理执行\n* ==问题===> ==分解问题== => ==算法== => ==思维导图==\n* 精力是有限：专注于JS,React,Node技术栈\n* 思考[Mern](http://mern.io/)的使用，基于[React](https://facebook.github.io/react/) + [Node](https://nodejs.org/en/) + [Redux](http://redux.js.org/) + [Express](http://expressjs.com/) + [mongoDB](https://www.mongodb.com/) + [Webpack](https://webpack.github.io/) 的全栈实现，从全栈的角度思考前端。\n* 探究浏览器渲染原理\n* React，性能优化（原材料：CSS,JS,HTML,Img,Font)\n* [sketch](http://xclient.info/s/sketch.html)熟练使用，不依靠设计师标注，减少与设计师不必要沟通\n* ==框架==\n* 热加载：开发效率提升利器，利大于弊\n* Css-module :爸爸再也不用担心CSS类重名✌️ \n* CSS后处理器：\n[autoprefixer](https://github.com/postcss/autoprefixer)\n```\na {\n    display: flex;\n}\n```\n```\na {\n    display: -webkit-box;\n    display: -webkit-flex;\n    display: -ms-flexbox;\n    display: flex\n}\n\n```\n\n## 五、2017该坚持的\n* 思维导图\n* 代码管理\n* 分解问题\n* 一手资料\n* 看源码\n* 从全栈的角度思考问题\n* 每日[博客](http://www.sunzhiyong.cn)\n## 六、查漏补缺书籍\n* The Art of Readable Code\n![](https://pic2.zhimg.com/c6ddc1aab62766136d098696075056e1_b.png)\n* Clean Code\n![](/content/images/2016/12/6e9064134f8f86b3fc00998d01257add_b.png)\n* The Clean Coder\n![](/content/images/2016/12/b9558b0553d37f116be99242b53b3fe9_b.png)\n* JavaScript: The Good Parts\n![]()\n* Effective JavaScript - 68 Specific Ways to Harness the Power of JavaScript\n![](/content/images/2016/12/aef8e41a2b1a830b2b32935ea9d7d1ac_b.png)\n* JavaScript Patterns\n![](/content/images/2016/12/16a6b931ebf285a1a19ee9d840b4669c_b.png)\n* High Performance JavaScript\n![]()\n* Functional JavaScript ==函数式编程，Underscore,React组件，Redux都渗透着这种思想==\n![](/content/images/2016/12/464ada8f1acb3d7ab80799fa618ec604_b.png)\n* Javascript权威指南\n* 深入理解计算机系统\n* 计算机程序的构造和解释\n* 哥德尔、艾舍尔、巴赫\n* 算法导论\n* 代码大全\n* 编程珠玑\n* 重构\n\n## 七、参考链接 \n1. [Google](https://www.google.com)\n2. [GitHub](https://github.com/)\n2. [Stack Overflow](http://stackoverflow.com/)\n3. [CodePen](codepen.io)\n4. [CSS-Tricks](https://css-tricks.com/)\n5. [MDN](https://developer.mozilla.org)\n## 八、转载分享\n版权声明：自由转载-非商用-非衍生-保持署名[（创意共享3.0许可证](https://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh)）\n## 九、很高兴加入平安前端，谢谢各位的帮助\n\n\n## 十、编程是一种艺术，成为一名编程艺术家\n\n\n\n\n\n\n\n\n\n\n\n\n\n","html":"<p>作者：<a href=\"http://www.sunzhiyong.cn\">孙志勇</a> <a href=\"http://weibo.com/ysbpysbp\">微博</a> <br />\n日期：2016年12月3日      </p>\n\n<h2 id=\"\">一、背景</h2>\n\n<p>一直以来，自我感觉，有目标，但是对于具体实现的过程，并没有清晰的短期目标，以及短期目标实现的具体步骤。 <br />\n趁此机会，静下心来剖析一下自己。看看自身的问题、优势，总结下2106，计划下2017。</p>\n\n<h2 id=\"2016\">二、2016我干了啥</h2>\n\n<ul>\n<li>sass，less</li>\n<li>Konckout框架 </li>\n<li>看完一遍Javascript权威指南</li>\n<li>熟悉了Node</li>\n<li>React框架</li>\n<li>Redux框架</li>\n<li>熟悉了ES6、7</li>\n<li>适应了<mark>分解问题</mark>思维，适应了<mark>组件化</mark></li>\n<li></li>\n<li>与设计师确定公司的设计体系，基于less字体库，色系等。</li>\n<li>封装可以<mark>定制化</mark>的，<mark>不影响全局</mark>的React组件</li>\n<li>对React框架内的代码性能进行优化，<mark>Stateless component</mark> => <mark>PureComponent</mark> => <mark>Component(shouldUpdateComponent)</mark></li>\n<li>stateless组件大量使用</li>\n<li>兼容性写法，代码健壮性思考</li>\n</ul>\n\n<h2 id=\"2016\">三、2016不足之处</h2>\n\n<ul>\n<li>GTD时间管理不足</li>\n<li>执行力不足</li>\n<li>对代码质量追求不求  </li>\n<li>适应环境较慢</li>\n<li>语义化CSS </li>\n<li>对公用方法使用的不足</li>\n<li>FQ不稳定</li>\n<li>对自己的代码管理不足</li>\n<li>没有深究背后原理</li>\n<li><p>想的太多，<mark>Just do it,so TM what？</mark></p></li>\n<li><p><mark>2016，混乱，杂序无章，为技术而技术，为业务而业务</mark></p></li>\n</ul>\n\n<h2 id=\"2016\">四、2016程序小事例</h2>\n\n<p>小事例：CSS兼容写法。  </p>\n\n<ul>\n<li>copy</li>\n</ul>\n\n<pre><code>  -webkit-transform-origin:@val;\n  -moz-transform-origin:@val;\n  -ms-transform-origin:@val;\n  -o-transform-origin:@val;\n  transform-origin:@val;\n</code></pre>\n\n<ul>\n<li>mixin初级版</li>\n</ul>\n\n<pre><code class=\"language- less\">.transform-pre(@val){\n  -webkit-transform-origin:@val;\n  -moz-transform-origin:@val;\n  -ms-transform-origin:@val;\n  -o-transform-origin:@val;\n  transform-origin:@val;\n}\n</code></pre>\n\n<ul>\n<li>mixin中级版</li>\n</ul>\n\n<pre><code>.pre(@style,@value) {\n  -webkit-@{style}: @value;\n  -moz-@{style}: @value;\n  -ms-@{style}: @value;\n  -o-@{style}: @value;\n    @{style}: @value;\n}\n</code></pre>\n\n<ul>\n<li>mixin高级版</li>\n</ul>\n\n<pre><code>...？？？\n</code></pre>\n\n<ul>\n<li>CSS后处理器：\n<a href=\"https://github.com/postcss/autoprefixer\">autoprefixer</a></li>\n</ul>\n\n<pre><code>a {  \n    display: flex;\n}\n</code></pre>\n\n<pre><code>a {  \n    display: -webkit-box;\n    display: -webkit-flex;\n    display: -ms-flexbox;\n    display: flex\n}\n</code></pre>\n\n<ul>\n<li><p>《西部世界》：机器人写代码（代码写代码）</p></li>\n<li><p><mark><strong>消除重复劳动</strong></mark></p></li>\n</ul>\n\n<h2 id=\"2017\">五、2017计划，基于 <mark><strong>消除重复劳动</strong></mark>的两点想法</h2>\n\n<ul>\n<li><mark><strong>less is more</strong> </mark></li>\n<li>公司设计体系的优化、维护及管理：less变量优化、维护及管理</li>\n<li>Less Mixin复用</li>\n<li>React核心点之一：<mark>Component-Based</mark>，组件复用</li>\n<li><p>方法的通用性：<mark>函数式方法</mark></p></li>\n<li><p><mark><strong>团队协作</strong></mark>现在的沟通成本有点高</p></li>\n<li>减少不必要沟通：<mark>团队内部</mark>，希望推广一种编程范式</li>\n<li><mark>函数式方法</mark> => <mark>编程范式：函数式编程</mark></li>\n<li>underscore</li>\n<li>redux源码</li>\n<li>组件、方法没有副作用</li>\n<li><p>相互独立而又紧密结合</p></li>\n<li><p>减少不必要沟通：<mark>团队外部</mark></p></li>\n<li><mark>沟通：</mark>依靠设计师的标注？试试<a href=\"https://zeplin.io/\">Zeplin</a>吧</li>\n<li><mark>沟通：</mark>交互设计，试试<a href=\"http://\">Axure RP</a></li>\n<li>怎么跟设计部门沟通？</li>\n<li>怎么跟后台部门沟通？</li>\n<li>怎么跟测试部门沟通？</li>\n<li><p>考虑下<mark>团队协作工具？</mark>钉钉？teambition？</p></li>\n<li><p><mark><strong>其它</strong></mark></p></li>\n<li>GTD时间管理执行</li>\n<li><mark>问题</mark>=> <mark>分解问题</mark> => <mark>算法</mark> => <mark>思维导图</mark></li>\n<li>精力是有限：专注于JS,React,Node技术栈</li>\n<li>思考<a href=\"http://mern.io/\">Mern</a>的使用，基于<a href=\"https://facebook.github.io/react/\">React</a> + <a href=\"https://nodejs.org/en/\">Node</a> + <a href=\"http://redux.js.org/\">Redux</a> + <a href=\"http://expressjs.com/\">Express</a> + <a href=\"https://www.mongodb.com/\">mongoDB</a> + <a href=\"https://webpack.github.io/\">Webpack</a> 的全栈实现，从全栈的角度思考前端。</li>\n<li>探究浏览器渲染原理</li>\n<li>React，性能优化（原材料：CSS,JS,HTML,Img,Font)</li>\n<li><a href=\"http://xclient.info/s/sketch.html\">sketch</a>熟练使用，不依靠设计师标注，减少与设计师不必要沟通</li>\n<li><mark>框架</mark></li>\n<li>热加载：开发效率提升利器，利大于弊</li>\n<li>Css-module :爸爸再也不用担心CSS类重名✌️ </li>\n<li>CSS后处理器：\n<a href=\"https://github.com/postcss/autoprefixer\">autoprefixer</a></li>\n</ul>\n\n<pre><code>a {  \n    display: flex;\n}\n</code></pre>\n\n<pre><code>a {  \n    display: -webkit-box;\n    display: -webkit-flex;\n    display: -ms-flexbox;\n    display: flex\n}\n</code></pre>\n\n<h2 id=\"2017\">五、2017该坚持的</h2>\n\n<ul>\n<li>思维导图</li>\n<li>代码管理</li>\n<li>分解问题</li>\n<li>一手资料</li>\n<li>看源码</li>\n<li>从全栈的角度思考问题</li>\n<li>每日<a href=\"http://www.sunzhiyong.cn\">博客</a></li>\n</ul>\n\n<h2 id=\"\">六、查漏补缺书籍</h2>\n\n<ul>\n<li>The Art of Readable Code\n<img src=\"https://pic2.zhimg.com/c6ddc1aab62766136d098696075056e1_b.png\" alt=\"\" /></li>\n<li>Clean Code\n<img src=\"/content/images/2016/12/6e9064134f8f86b3fc00998d01257add_b.png\" alt=\"\" /></li>\n<li>The Clean Coder\n<img src=\"/content/images/2016/12/b9558b0553d37f116be99242b53b3fe9_b.png\" alt=\"\" /></li>\n<li><p>JavaScript: The Good Parts</p></li>\n<li><p>Effective JavaScript - 68 Specific Ways to Harness the Power of JavaScript\n<img src=\"/content/images/2016/12/aef8e41a2b1a830b2b32935ea9d7d1ac_b.png\" alt=\"\" /></p></li>\n<li>JavaScript Patterns\n<img src=\"/content/images/2016/12/16a6b931ebf285a1a19ee9d840b4669c_b.png\" alt=\"\" /></li>\n<li><p>High Performance JavaScript</p></li>\n<li><p>Functional JavaScript <mark>函数式编程，Underscore,React组件，Redux都渗透着这种思想</mark>\n<img src=\"/content/images/2016/12/464ada8f1acb3d7ab80799fa618ec604_b.png\" alt=\"\" /></p></li>\n<li>Javascript权威指南</li>\n<li>深入理解计算机系统</li>\n<li>计算机程序的构造和解释</li>\n<li>哥德尔、艾舍尔、巴赫</li>\n<li>算法导论</li>\n<li>代码大全</li>\n<li>编程珠玑</li>\n<li>重构</li>\n</ul>\n\n<h2 id=\"\">七、参考链接</h2>\n\n<ol>\n<li><a href=\"https://www.google.com\">Google</a>  </li>\n<li><a href=\"https://github.com/\">GitHub</a>  </li>\n<li><a href=\"http://stackoverflow.com/\">Stack Overflow</a>  </li>\n<li><a href=\"codepen.io\">CodePen</a>  </li>\n<li><a href=\"https://css-tricks.com/\">CSS-Tricks</a>  </li>\n<li><a href=\"https://developer.mozilla.org\">MDN</a>  </li>\n</ol>\n\n<h2 id=\"\">八、转载分享</h2>\n\n<p>版权声明：自由转载-非商用-非衍生-保持署名<a href=\"https://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh\">（创意共享3.0许可证</a>）</p>\n\n<h2 id=\"\">九、很高兴加入平安前端，谢谢各位的帮助</h2>\n\n<h2 id=\"\">十、编程是一种艺术，成为一名编程艺术家</h2>","image":null,"featured":0,"page":0,"status":"published","language":"zh_CN","meta_title":null,"meta_description":null,"author_id":1,"created_at":1480751605522,"created_by":1,"updated_at":1481034961730,"updated_by":1,"published_at":1480931997724,"published_by":1},{"id":70,"uuid":"e929dcab-51c6-4c44-9dfe-d0b683482e80","title":"CSS开启硬件加速 hardware accelerated","slug":"csskai-qi-ying-jian-jia-su-hardware-accelerated","markdown":"作者：[孙志勇](http://www.sunzhiyong.cn) [微博](http://weibo.com/ysbpysbp)  \n日期：2016年12月6日      \n\n## 一、时效性\n所有信息都具有时效性。文章的价值，往往跟时间有很大关联。特别是技术类文章，请注意本文创建时间，如果本文过于久远，请读者酌情考量，莫要浪费时间。\n## 二、背景\n在一次项目当中，需要用到图片随着鼠标移动而变化，需要很多次重新绘制。从而导致了页面卡顿，想到了硬件加速，就使用CSS属性来开启硬件加速。\n## 三、原因\n硬件加速背后的原理，请参考：https://www.sitepoint.com/introduction-to-hardware-acceleration-css-animations/\n## 四、使用方法\n并不是所有的CSS元素属性都可以开启硬件加速，只有下面几个可以开启硬件加速： \n \n* transform  \n* opacity  \n* filter  \n\n只要在元素添加这三个属性之一就可以开启。注意：CSS3的兼容性。你需要自行添加前缀。\n## 五、参考链接 \n1. https://www.sitepoint.com/introduction-to-hardware-acceleration-css-animations/\n\n## 六、转载分享\n版权声明：自由转载-非商用-非衍生-保持署名[（创意共享3.0许可证](https://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh)）\n## 七、如果你觉得此文章对你有帮助，并且想为我买杯咖啡，请扫一扫下面，谢谢。\n微信  \n![微信](http://www.sunzhiyong.cn/content/images/2016/11/-----2016-11-28-22-39-16-2.png)\n支付宝  \n![支付宝](http://www.sunzhiyong.cn/content/images/2016/11/-----2016-11-28-22-39-37-1.png)\n\n\n\n\n","html":"<p>作者：<a href=\"http://www.sunzhiyong.cn\">孙志勇</a> <a href=\"http://weibo.com/ysbpysbp\">微博</a> <br />\n日期：2016年12月6日      </p>\n\n<h2 id=\"\">一、时效性</h2>\n\n<p>所有信息都具有时效性。文章的价值，往往跟时间有很大关联。特别是技术类文章，请注意本文创建时间，如果本文过于久远，请读者酌情考量，莫要浪费时间。</p>\n\n<h2 id=\"\">二、背景</h2>\n\n<p>在一次项目当中，需要用到图片随着鼠标移动而变化，需要很多次重新绘制。从而导致了页面卡顿，想到了硬件加速，就使用CSS属性来开启硬件加速。</p>\n\n<h2 id=\"\">三、原因</h2>\n\n<p>硬件加速背后的原理，请参考：<a href=\"https://www.sitepoint.com/introduction-to-hardware-acceleration-css-animations/\">https://www.sitepoint.com/introduction-to-hardware-acceleration-css-animations/</a></p>\n\n<h2 id=\"\">四、使用方法</h2>\n\n<p>并不是所有的CSS元素属性都可以开启硬件加速，只有下面几个可以开启硬件加速： </p>\n\n<ul>\n<li>transform  </li>\n<li>opacity  </li>\n<li>filter  </li>\n</ul>\n\n<p>只要在元素添加这三个属性之一就可以开启。注意：CSS3的兼容性。你需要自行添加前缀。</p>\n\n<h2 id=\"\">五、参考链接</h2>\n\n<ol>\n<li><a href=\"https://www.sitepoint.com/introduction-to-hardware-acceleration-css-animations/\">https://www.sitepoint.com/introduction-to-hardware-acceleration-css-animations/</a></li>\n</ol>\n\n<h2 id=\"\">六、转载分享</h2>\n\n<p>版权声明：自由转载-非商用-非衍生-保持署名<a href=\"https://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh\">（创意共享3.0许可证</a>）</p>\n\n<h2 id=\"\">七、如果你觉得此文章对你有帮助，并且想为我买杯咖啡，请扫一扫下面，谢谢。</h2>\n\n<p>微信 <br />\n<img src=\"http://www.sunzhiyong.cn/content/images/2016/11/-----2016-11-28-22-39-16-2.png\" alt=\"微信\" />\n支付宝 <br />\n<img src=\"http://www.sunzhiyong.cn/content/images/2016/11/-----2016-11-28-22-39-37-1.png\" alt=\"支付宝\" /></p>","image":null,"featured":0,"page":0,"status":"published","language":"zh_CN","meta_title":null,"meta_description":null,"author_id":1,"created_at":1481032719501,"created_by":1,"updated_at":1481034039600,"updated_by":1,"published_at":1481033499827,"published_by":1}],"users":[{"id":1,"uuid":"7a634c59-f331-4d60-a3c8-cbc548f18f52","name":"孙志勇","slug":"sun","password":"$2a$10$AE/nSnKRuVR6J4yPsWn5zOoRuukXaVnews3N25BUNN4yi7qcAxuze","email":"785037725@qq.com","image":null,"cover":null,"bio":"focus一个人，focus一门技术，focus简单的生活","website":null,"location":"上海","accessibility":null,"status":"active","language":"zh_CN","meta_title":null,"meta_description":null,"tour":null,"last_login":1501517943433,"created_at":1458229222744,"created_by":1,"updated_at":1501517943433,"updated_by":1}],"roles":[{"id":1,"uuid":"a54913ce-c337-4623-ac94-010ec0bf339f","name":"Administrator","description":"管理员","created_at":1458229218281,"created_by":1,"updated_at":1458229218281,"updated_by":1},{"id":2,"uuid":"7979dcb3-cbce-4e00-bd8d-948d6c811d5b","name":"Editor","description":"编辑","created_at":1458229218281,"created_by":1,"updated_at":1458229218281,"updated_by":1},{"id":3,"uuid":"65651631-3a67-4c61-9694-04725bbb87d1","name":"Author","description":"作者","created_at":1458229218282,"created_by":1,"updated_at":1458229218282,"updated_by":1},{"id":4,"uuid":"dc1b92ed-d232-4638-9907-7043c6c8f713","name":"Owner","description":"博客所有者","created_at":1458229218282,"created_by":1,"updated_at":1458229218282,"updated_by":1}],"roles_users":[{"id":1,"role_id":4,"user_id":1}],"permissions":[{"id":1,"uuid":"f0cea856-1549-42fb-beda-c30ddcd4a4df","name":"Export database","object_type":"db","action_type":"exportContent","object_id":null,"created_at":1458229218501,"created_by":1,"updated_at":1458229218501,"updated_by":1},{"id":2,"uuid":"3e251100-677a-447e-8179-a681b51047cd","name":"Import database","object_type":"db","action_type":"importContent","object_id":null,"created_at":1458229218521,"created_by":1,"updated_at":1458229218521,"updated_by":1},{"id":3,"uuid":"898a87a7-b88f-49bc-a9f8-6ec623047597","name":"Delete all content","object_type":"db","action_type":"deleteAllContent","object_id":null,"created_at":1458229218547,"created_by":1,"updated_at":1458229218547,"updated_by":1},{"id":4,"uuid":"47269722-c311-4bf0-adf2-181f140749cb","name":"Send mail","object_type":"mail","action_type":"send","object_id":null,"created_at":1458229218571,"created_by":1,"updated_at":1458229218571,"updated_by":1},{"id":5,"uuid":"e427a66a-b628-4471-b5d5-534929fcddd0","name":"Browse notifications","object_type":"notification","action_type":"browse","object_id":null,"created_at":1458229218590,"created_by":1,"updated_at":1458229218590,"updated_by":1},{"id":6,"uuid":"eb489722-a1a6-4060-8575-1d6666aba13d","name":"Add notifications","object_type":"notification","action_type":"add","object_id":null,"created_at":1458229218608,"created_by":1,"updated_at":1458229218608,"updated_by":1},{"id":7,"uuid":"fdee5747-5ad2-4ec4-a009-d9281421fa74","name":"Delete notifications","object_type":"notification","action_type":"destroy","object_id":null,"created_at":1458229218629,"created_by":1,"updated_at":1458229218629,"updated_by":1},{"id":8,"uuid":"f082943e-6833-4af4-9057-0c1c04350d15","name":"Browse posts","object_type":"post","action_type":"browse","object_id":null,"created_at":1458229218650,"created_by":1,"updated_at":1458229218650,"updated_by":1},{"id":9,"uuid":"ca0b77d8-10c0-4b87-85b9-3b14e553312d","name":"Read posts","object_type":"post","action_type":"read","object_id":null,"created_at":1458229218671,"created_by":1,"updated_at":1458229218671,"updated_by":1},{"id":10,"uuid":"5f59c609-7e8f-4eb0-8db5-55f0527570a9","name":"Edit posts","object_type":"post","action_type":"edit","object_id":null,"created_at":1458229218691,"created_by":1,"updated_at":1458229218691,"updated_by":1},{"id":11,"uuid":"e724b177-07b9-4507-bf54-30b5c2ec587f","name":"Add posts","object_type":"post","action_type":"add","object_id":null,"created_at":1458229218711,"created_by":1,"updated_at":1458229218711,"updated_by":1},{"id":12,"uuid":"b8f36be8-06bc-4b92-9763-4f7f3f8d5ac7","name":"Delete posts","object_type":"post","action_type":"destroy","object_id":null,"created_at":1458229218737,"created_by":1,"updated_at":1458229218737,"updated_by":1},{"id":13,"uuid":"5d9f2630-ed20-44ee-a6a2-021a1d8b56b1","name":"Browse settings","object_type":"setting","action_type":"browse","object_id":null,"created_at":1458229218768,"created_by":1,"updated_at":1458229218768,"updated_by":1},{"id":14,"uuid":"af16ef15-26e8-46be-bc48-7b25829113e5","name":"Read settings","object_type":"setting","action_type":"read","object_id":null,"created_at":1458229218792,"created_by":1,"updated_at":1458229218792,"updated_by":1},{"id":15,"uuid":"1b931f26-0db4-4686-90fc-14756122a786","name":"Edit settings","object_type":"setting","action_type":"edit","object_id":null,"created_at":1458229218818,"created_by":1,"updated_at":1458229218818,"updated_by":1},{"id":16,"uuid":"e96f3ed3-10ee-40ba-963f-ade6d0ba4d00","name":"Generate slugs","object_type":"slug","action_type":"generate","object_id":null,"created_at":1458229218839,"created_by":1,"updated_at":1458229218839,"updated_by":1},{"id":17,"uuid":"630baebe-e220-4af6-adcf-9ab75c1a1024","name":"Browse tags","object_type":"tag","action_type":"browse","object_id":null,"created_at":1458229218858,"created_by":1,"updated_at":1458229218858,"updated_by":1},{"id":18,"uuid":"8abcd09a-7883-4e54-9316-664640340a63","name":"Read tags","object_type":"tag","action_type":"read","object_id":null,"created_at":1458229218884,"created_by":1,"updated_at":1458229218884,"updated_by":1},{"id":19,"uuid":"16dfd17f-7f3d-4ef9-94c2-68ebd953e324","name":"Edit tags","object_type":"tag","action_type":"edit","object_id":null,"created_at":1458229218904,"created_by":1,"updated_at":1458229218904,"updated_by":1},{"id":20,"uuid":"cebdbcb3-ca68-46c8-abc5-2208b4e0bc4f","name":"Add tags","object_type":"tag","action_type":"add","object_id":null,"created_at":1458229218923,"created_by":1,"updated_at":1458229218923,"updated_by":1},{"id":21,"uuid":"5ff53858-9eae-4907-83c1-12c3d6203989","name":"Delete tags","object_type":"tag","action_type":"destroy","object_id":null,"created_at":1458229218944,"created_by":1,"updated_at":1458229218944,"updated_by":1},{"id":22,"uuid":"5858039c-d296-44e5-b8ed-34aa97a700b0","name":"Browse themes","object_type":"theme","action_type":"browse","object_id":null,"created_at":1458229218970,"created_by":1,"updated_at":1458229218970,"updated_by":1},{"id":23,"uuid":"118f299b-9d40-45c8-bfbc-9e5c247d9f88","name":"Edit themes","object_type":"theme","action_type":"edit","object_id":null,"created_at":1458229218996,"created_by":1,"updated_at":1458229218996,"updated_by":1},{"id":24,"uuid":"2c366353-bda2-4253-a3da-185c34968e40","name":"Browse users","object_type":"user","action_type":"browse","object_id":null,"created_at":1458229219016,"created_by":1,"updated_at":1458229219016,"updated_by":1},{"id":25,"uuid":"362ae410-e004-43de-be43-d04c3d721fbd","name":"Read users","object_type":"user","action_type":"read","object_id":null,"created_at":1458229219032,"created_by":1,"updated_at":1458229219032,"updated_by":1},{"id":26,"uuid":"60d10801-b7fc-480c-9ca0-ecef7b9ceab7","name":"Edit users","object_type":"user","action_type":"edit","object_id":null,"created_at":1458229219052,"created_by":1,"updated_at":1458229219052,"updated_by":1},{"id":27,"uuid":"4b5db746-d4c3-4d14-94c6-25f811bd3959","name":"Add users","object_type":"user","action_type":"add","object_id":null,"created_at":1458229219072,"created_by":1,"updated_at":1458229219072,"updated_by":1},{"id":28,"uuid":"e3a781de-c2b6-4098-acd0-5e2e24892dce","name":"Delete users","object_type":"user","action_type":"destroy","object_id":null,"created_at":1458229219089,"created_by":1,"updated_at":1458229219089,"updated_by":1},{"id":29,"uuid":"fe6ce97b-56d9-4568-a7dd-f9efe4cbaf35","name":"Assign a role","object_type":"role","action_type":"assign","object_id":null,"created_at":1458229219119,"created_by":1,"updated_at":1458229219119,"updated_by":1},{"id":30,"uuid":"3ef1a082-3d7d-46bb-a66d-c1acfb399021","name":"Browse roles","object_type":"role","action_type":"browse","object_id":null,"created_at":1458229219140,"created_by":1,"updated_at":1458229219140,"updated_by":1}],"permissions_users":[],"permissions_roles":[{"id":1,"role_id":1,"permission_id":1},{"id":2,"role_id":1,"permission_id":2},{"id":3,"role_id":1,"permission_id":3},{"id":4,"role_id":1,"permission_id":4},{"id":5,"role_id":1,"permission_id":5},{"id":6,"role_id":1,"permission_id":6},{"id":7,"role_id":1,"permission_id":7},{"id":8,"role_id":1,"permission_id":8},{"id":9,"role_id":1,"permission_id":9},{"id":10,"role_id":1,"permission_id":10},{"id":11,"role_id":1,"permission_id":11},{"id":12,"role_id":1,"permission_id":12},{"id":13,"role_id":1,"permission_id":13},{"id":14,"role_id":1,"permission_id":14},{"id":15,"role_id":1,"permission_id":15},{"id":16,"role_id":1,"permission_id":16},{"id":17,"role_id":1,"permission_id":17},{"id":18,"role_id":1,"permission_id":18},{"id":19,"role_id":1,"permission_id":19},{"id":20,"role_id":1,"permission_id":20},{"id":21,"role_id":1,"permission_id":21},{"id":22,"role_id":1,"permission_id":22},{"id":23,"role_id":1,"permission_id":23},{"id":24,"role_id":1,"permission_id":24},{"id":25,"role_id":1,"permission_id":25},{"id":26,"role_id":1,"permission_id":26},{"id":27,"role_id":1,"permission_id":27},{"id":28,"role_id":1,"permission_id":28},{"id":29,"role_id":1,"permission_id":29},{"id":30,"role_id":1,"permission_id":30},{"id":31,"role_id":2,"permission_id":8},{"id":32,"role_id":2,"permission_id":9},{"id":33,"role_id":2,"permission_id":10},{"id":34,"role_id":2,"permission_id":11},{"id":35,"role_id":2,"permission_id":12},{"id":36,"role_id":2,"permission_id":13},{"id":37,"role_id":2,"permission_id":14},{"id":38,"role_id":2,"permission_id":16},{"id":39,"role_id":2,"permission_id":17},{"id":40,"role_id":2,"permission_id":18},{"id":41,"role_id":2,"permission_id":19},{"id":42,"role_id":2,"permission_id":20},{"id":43,"role_id":2,"permission_id":21},{"id":44,"role_id":2,"permission_id":24},{"id":45,"role_id":2,"permission_id":25},{"id":46,"role_id":2,"permission_id":26},{"id":47,"role_id":2,"permission_id":27},{"id":48,"role_id":2,"permission_id":28},{"id":49,"role_id":2,"permission_id":29},{"id":50,"role_id":2,"permission_id":30},{"id":51,"role_id":3,"permission_id":8},{"id":52,"role_id":3,"permission_id":9},{"id":53,"role_id":3,"permission_id":11},{"id":54,"role_id":3,"permission_id":13},{"id":55,"role_id":3,"permission_id":14},{"id":56,"role_id":3,"permission_id":16},{"id":57,"role_id":3,"permission_id":17},{"id":58,"role_id":3,"permission_id":18},{"id":59,"role_id":3,"permission_id":20},{"id":60,"role_id":3,"permission_id":24},{"id":61,"role_id":3,"permission_id":25},{"id":62,"role_id":3,"permission_id":30}],"permissions_apps":[],"settings":[{"id":1,"uuid":"bf03addc-7241-4dd2-ae26-ee79c9ed3e12","key":"databaseVersion","value":"004","type":"core","created_at":1458229222793,"created_by":1,"updated_at":1458229222793,"updated_by":1},{"id":2,"uuid":"14d18355-56c7-47f1-b758-0d40e7aadead","key":"dbHash","value":"8cc9fc2c-54fa-4bff-a51e-a70363ba5a24","type":"core","created_at":1458229222793,"created_by":1,"updated_at":1458229223246,"updated_by":1},{"id":3,"uuid":"82bad82e-9fdb-475b-8751-a035f46fe471","key":"nextUpdateCheck","value":"1501604337","type":"core","created_at":1458229222793,"created_by":1,"updated_at":1501517937411,"updated_by":1},{"id":4,"uuid":"1199f9ea-2057-49a0-9e6e-930ab355d564","key":"displayUpdateNotification","value":"0.7.0","type":"core","created_at":1458229222793,"created_by":1,"updated_at":1501517937418,"updated_by":1},{"id":5,"uuid":"e19c3558-d5a0-42d7-b603-a3b5a0dab8ed","key":"title","value":"孙志勇的博客","type":"blog","created_at":1458229222794,"created_by":1,"updated_at":1480984684305,"updated_by":1},{"id":6,"uuid":"f691c3ec-1f55-43d0-8d6c-462a73f59bc0","key":"description","value":"focus一个人，focus一门技术，focus简单的生活","type":"blog","created_at":1458229222794,"created_by":1,"updated_at":1480984684311,"updated_by":1},{"id":7,"uuid":"53a13567-4c5d-4a58-927b-f74c37574518","key":"logo","value":"","type":"blog","created_at":1458229222796,"created_by":1,"updated_at":1480984684315,"updated_by":1},{"id":8,"uuid":"161fa282-39d1-431e-aaf1-2e11cb061e29","key":"cover","value":"","type":"blog","created_at":1458229222796,"created_by":1,"updated_at":1480984684316,"updated_by":1},{"id":9,"uuid":"8539b738-96b3-4ede-ad31-5db58e18e58e","key":"defaultLang","value":"zh_CN","type":"blog","created_at":1458229222797,"created_by":1,"updated_at":1480984684319,"updated_by":1},{"id":10,"uuid":"4afacd24-4e7a-4ee2-9433-47f318149228","key":"postsPerPage","value":"10","type":"blog","created_at":1458229222797,"created_by":1,"updated_at":1480984684324,"updated_by":1},{"id":11,"uuid":"a8dac5d9-581e-4fa7-a181-3fccdb9f2399","key":"forceI18n","value":"true","type":"blog","created_at":1458229222797,"created_by":1,"updated_at":1480984684325,"updated_by":1},{"id":12,"uuid":"aa89b456-01d5-4cc8-b7d6-b170428b43c8","key":"permalinks","value":"/:year/:month/:day/:slug/","type":"blog","created_at":1458229222797,"created_by":1,"updated_at":1480984684327,"updated_by":1},{"id":13,"uuid":"3b5347a0-8dd9-4b71-aed5-9371c7d21154","key":"ghost_head","value":"<script>  \n  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){\n  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),\n  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)\n  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');\n\n  ga('create', 'UA-XXXXXXXX-X', 'yourblog.ghost.io');\n  ga('send', 'pageview');\n</script>  ","type":"blog","created_at":1458229222797,"created_by":1,"updated_at":1480984684336,"updated_by":1},{"id":14,"uuid":"281cbb29-345f-458e-aa24-d694638dd5fb","key":"ghost_foot","value":"","type":"blog","created_at":1458229222797,"created_by":1,"updated_at":1480984684337,"updated_by":1},{"id":15,"uuid":"26821212-23c9-47b1-abd4-78867f37f0fe","key":"labs","value":"{\"publicAPI\":true}","type":"blog","created_at":1458229222798,"created_by":1,"updated_at":1480984684338,"updated_by":1},{"id":16,"uuid":"bffe3535-f377-41ed-9f32-d9ffa11c58cc","key":"navigation","value":"[{\"label\":\"HOME\",\"url\":\"/\"},{\"label\":\"React\",\"url\":\"/tag/React/\"},{\"label\":\"CSS\",\"url\":\"/tag/css/\"},{\"label\":\"Javascript\",\"url\":\"/tag/js/\"},{\"label\":\"Thoughts\",\"url\":\"/tag/thought/\"},{\"label\":\"Canvas\",\"url\":\"/tag/canvas/\"},{\"label\":\"Reading\",\"url\":\"/tag/reading/\"},{\"label\":\"Diraries\",\"url\":\"/tag/ri-zhi/\"},{\"label\":\"Travels\",\"url\":\"/tag/lu-you/\"},{\"label\":\"Tools\",\"url\":\"/tag/kai-fa-gong-ju/\"},{\"label\":\"MUI\",\"url\":\"/tag/mui/\"},{\"label\":\"Hbulider\",\"url\":\"/tag/hbulider/\"},{\"label\":\"jQuery\",\"url\":\"/tag/jquery/\"},{\"label\":\"MVVM\",\"url\":\"/tag/mvvm/\"}]","type":"blog","created_at":1458229222798,"created_by":1,"updated_at":1480984684343,"updated_by":1},{"id":17,"uuid":"efcaaf23-78cd-40d1-b1f8-913381043afb","key":"activeApps","value":"[]","type":"app","created_at":1458229222799,"created_by":1,"updated_at":1458229222799,"updated_by":1},{"id":18,"uuid":"e44860ad-28cc-44be-ba2d-9b7b7414a0f1","key":"installedApps","value":"[]","type":"app","created_at":1458229222799,"created_by":1,"updated_at":1501603312396,"updated_by":1},{"id":19,"uuid":"94c5652c-5879-4f06-976c-001056ec1318","key":"isPrivate","value":"false","type":"private","created_at":1458229222799,"created_by":1,"updated_at":1480984684344,"updated_by":1},{"id":20,"uuid":"98d497fd-75af-4c1a-b5f6-c3b71cbfe978","key":"password","value":"null","type":"private","created_at":1458229222799,"created_by":1,"updated_at":1480984684349,"updated_by":1},{"id":21,"uuid":"8d4e7703-30e0-4e90-a57b-ec2449fb1c64","key":"activeTheme","value":"casper-zh","type":"theme","created_at":1458229222799,"created_by":1,"updated_at":1480984684331,"updated_by":1}],"tags":[{"id":6,"uuid":"8f25c03d-4c1e-4548-9c42-2398d308fd04","name":"diraries","slug":"ri-zhi","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1458908177799,"created_by":1,"updated_at":1468942110407,"updated_by":1},{"id":7,"uuid":"4b000b27-81de-4af0-93d3-c9ef4ec09340","name":"Hbulider","slug":"hbulider","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1458908270633,"created_by":1,"updated_at":1458908270633,"updated_by":1},{"id":8,"uuid":"0f372233-a271-4056-81da-516b026f915a","name":"MUI","slug":"mui","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1458908270641,"created_by":1,"updated_at":1468941772053,"updated_by":1},{"id":9,"uuid":"0c06c081-e06a-4442-89d9-2a673a6b3ee2","name":"javascript","slug":"js","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1458911730752,"created_by":1,"updated_at":1468941410241,"updated_by":1},{"id":10,"uuid":"618c72ca-716d-445e-89c2-6ab5ed176909","name":"jQuery","slug":"jquery","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1458912192447,"created_by":1,"updated_at":1458912192447,"updated_by":1},{"id":11,"uuid":"64f0a841-81ed-4751-8381-b238b554f71e","name":"Travels","slug":"lu-you","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1460380280546,"created_by":1,"updated_at":1468941833268,"updated_by":1},{"id":12,"uuid":"1cf1bb10-82c6-4484-9413-d2716f9d9f78","name":"开发工具","slug":"kai-fa-gong-ju","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1460381118527,"created_by":1,"updated_at":1460381118527,"updated_by":1},{"id":13,"uuid":"f76a48f9-4224-4df7-a93b-4aca8582e26b","name":"CSS","slug":"css","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1461162924103,"created_by":1,"updated_at":1468941368419,"updated_by":1},{"id":15,"uuid":"91f962a2-f5f8-49c8-8479-4a9b5489002d","name":"Thoughts","slug":"thought","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1462280323671,"created_by":1,"updated_at":1468941542388,"updated_by":1},{"id":16,"uuid":"50447d77-3a6a-459a-9358-25b4f72587b0","name":"MVVM","slug":"mvvm","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1463754306454,"created_by":1,"updated_at":1463754306454,"updated_by":1},{"id":17,"uuid":"896299b0-0686-49dc-8b90-93391d90f52b","name":"knockoutjs","slug":"knockoutjs","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1463974768740,"created_by":1,"updated_at":1463974768740,"updated_by":1},{"id":18,"uuid":"86fda1bb-1381-47e5-8e2f-e0264ec48033","name":"canvas","slug":"canvas","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1466512089341,"created_by":1,"updated_at":1466512089341,"updated_by":1},{"id":19,"uuid":"13e28881-b593-41f7-84e4-d059b6675dbb","name":"Reading","slug":"reading","description":"Reading","image":null,"hidden":0,"parent_id":null,"meta_title":"阅读","meta_description":"阅读","created_at":1468943859673,"created_by":1,"updated_at":1468943906983,"updated_by":1},{"id":20,"uuid":"bc294c03-6d5a-423f-807e-e4a642fb8f1f","name":"React","slug":"react","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1480432105064,"created_by":1,"updated_at":1480432105064,"updated_by":1}],"posts_tags":[{"id":4,"post_id":5,"tag_id":6,"sort_order":0},{"id":5,"post_id":6,"tag_id":7,"sort_order":0},{"id":6,"post_id":6,"tag_id":8,"sort_order":1},{"id":7,"post_id":7,"tag_id":7,"sort_order":0},{"id":8,"post_id":7,"tag_id":8,"sort_order":1},{"id":9,"post_id":8,"tag_id":7,"sort_order":0},{"id":10,"post_id":8,"tag_id":8,"sort_order":1},{"id":11,"post_id":9,"tag_id":9,"sort_order":0},{"id":12,"post_id":10,"tag_id":10,"sort_order":0},{"id":13,"post_id":4,"tag_id":6,"sort_order":0},{"id":14,"post_id":11,"tag_id":8,"sort_order":0},{"id":15,"post_id":11,"tag_id":7,"sort_order":1},{"id":16,"post_id":12,"tag_id":8,"sort_order":0},{"id":17,"post_id":12,"tag_id":9,"sort_order":1},{"id":18,"post_id":12,"tag_id":10,"sort_order":2},{"id":19,"post_id":16,"tag_id":8,"sort_order":0},{"id":20,"post_id":16,"tag_id":7,"sort_order":1},{"id":21,"post_id":15,"tag_id":9,"sort_order":0},{"id":22,"post_id":18,"tag_id":6,"sort_order":0},{"id":23,"post_id":19,"tag_id":9,"sort_order":0},{"id":24,"post_id":20,"tag_id":9,"sort_order":0},{"id":25,"post_id":21,"tag_id":9,"sort_order":0},{"id":26,"post_id":22,"tag_id":9,"sort_order":0},{"id":27,"post_id":23,"tag_id":7,"sort_order":0},{"id":28,"post_id":23,"tag_id":8,"sort_order":1},{"id":29,"post_id":24,"tag_id":6,"sort_order":0},{"id":30,"post_id":25,"tag_id":11,"sort_order":0},{"id":31,"post_id":25,"tag_id":6,"sort_order":1},{"id":32,"post_id":26,"tag_id":12,"sort_order":0},{"id":33,"post_id":27,"tag_id":13,"sort_order":0},{"id":34,"post_id":28,"tag_id":13,"sort_order":0},{"id":35,"post_id":29,"tag_id":13,"sort_order":0},{"id":36,"post_id":31,"tag_id":9,"sort_order":0},{"id":37,"post_id":32,"tag_id":6,"sort_order":0},{"id":39,"post_id":34,"tag_id":15,"sort_order":0},{"id":40,"post_id":35,"tag_id":13,"sort_order":0},{"id":41,"post_id":36,"tag_id":6,"sort_order":0},{"id":42,"post_id":37,"tag_id":15,"sort_order":0},{"id":43,"post_id":38,"tag_id":15,"sort_order":0},{"id":44,"post_id":39,"tag_id":13,"sort_order":0},{"id":45,"post_id":40,"tag_id":15,"sort_order":0},{"id":46,"post_id":41,"tag_id":13,"sort_order":0},{"id":47,"post_id":42,"tag_id":13,"sort_order":0},{"id":48,"post_id":43,"tag_id":13,"sort_order":0},{"id":49,"post_id":45,"tag_id":13,"sort_order":0},{"id":50,"post_id":44,"tag_id":16,"sort_order":0},{"id":51,"post_id":46,"tag_id":17,"sort_order":0},{"id":52,"post_id":47,"tag_id":17,"sort_order":0},{"id":53,"post_id":48,"tag_id":17,"sort_order":0},{"id":54,"post_id":49,"tag_id":17,"sort_order":0},{"id":55,"post_id":50,"tag_id":17,"sort_order":0},{"id":56,"post_id":51,"tag_id":17,"sort_order":0},{"id":57,"post_id":52,"tag_id":17,"sort_order":0},{"id":58,"post_id":53,"tag_id":17,"sort_order":0},{"id":59,"post_id":54,"tag_id":17,"sort_order":0},{"id":60,"post_id":60,"tag_id":9,"sort_order":0},{"id":61,"post_id":62,"tag_id":18,"sort_order":0},{"id":62,"post_id":61,"tag_id":19,"sort_order":0},{"id":63,"post_id":21,"tag_id":7,"sort_order":1},{"id":64,"post_id":65,"tag_id":20,"sort_order":0},{"id":65,"post_id":63,"tag_id":6,"sort_order":0},{"id":66,"post_id":69,"tag_id":6,"sort_order":0},{"id":67,"post_id":64,"tag_id":13,"sort_order":0},{"id":68,"post_id":70,"tag_id":13,"sort_order":0}],"apps":[],"app_settings":[],"app_fields":[],"client_trusted_domains":[]}}]}